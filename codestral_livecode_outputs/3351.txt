Problem ID: 3351
Problem Content:
You are given an array happiness of length n, and a positive integer k.
There are n children standing in a queue, where the i^th child has happiness value happiness[i]. You want to select k children from these n children in k turns.
In each turn, when you select a child, the happiness value of all the children that have not been selected till now decreases by 1. Note that the happiness value cannot become negative and gets decremented only if it is positive.
Return the maximum sum of the happiness values of the selected children you can achieve by selecting k children.
 
Example 1:

Input: happiness = [1,2,3], k = 2
Output: 4
Explanation: We can pick 2 children in the following way:
- Pick the child with the happiness value == 3. The happiness value of the remaining children becomes [0,1].
- Pick the child with the happiness value == 1. The happiness value of the remaining child becomes [0]. Note that the happiness value cannot become less than 0.
The sum of the happiness values of the selected children is 3 + 1 = 4.

Example 2:

Input: happiness = [1,1,1,1], k = 2
Output: 1
Explanation: We can pick 2 children in the following way:
- Pick any child with the happiness value == 1. The happiness value of the remaining children becomes [0,0,0].
- Pick the child with the happiness value == 0. The happiness value of the remaining child becomes [0,0].
The sum of the happiness values of the selected children is 1 + 0 = 1.

Example 3:

Input: happiness = [2,3,4,5], k = 1
Output: 5
Explanation: We can pick 1 child in the following way:
- Pick the child with the happiness value == 5. The happiness value of the remaining children becomes [1,2,3].
The sum of the happiness values of the selected children is 5.

 
Constraints:

1 <= n == happiness.length <= 2 * 10^5
1 <= happiness[i] <= 10^8
1 <= k <= n

Codestral Analysis:
 Category: Heap Problem / Greedy Problem / Priority Queue Problem

This is a greedy algorithm problem, but it can also be solved using a heap-based approach or a priority queue. The key to solving this problem is recognizing that you should always pick the child with the highest happiness value that hasn't been affected by previous selections as much as possible, because each subsequent selection decreases the remaining children's happiness values.

The difficulty of this problem can be considered MEDIUM-HARD. This is because it requires a good understanding of greedy algorithms and how to implement them efficiently. It also requires handling edge cases, such as when there are multiple children with the same highest happiness value or when k is equal to n. The complexity of the problem is O(n log n) due to sorting or heap operations.

Programming skills required:
- Proficient in a programming language such as Python, Java, C++.
- Knowledge of data structures like Heaps/Priority Queues.
- Understanding and implementation of greedy algorithms.
