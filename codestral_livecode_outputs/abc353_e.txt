Problem ID: abc353_e
Problem Content:
For strings x and y, define f(x, y) as follows:

- f(x, y) is the length of the longest common prefix of x and y.

You are given N strings (S_1, \ldots, S_N) consisting of lowercase English letters. Find the value of the following expression:
\displaystyle \sum_{i=1}^{N-1}\sum_{j=i+1}^N f(S_i,S_j).

Input

The input is given from Standard Input in the following format:
N 
S_1 \ldots S_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 3\times 10^5
- S_i is a string consisting of lowercase English letters.
- 1 \leq |S_i|
- |S_1|+|S_2|+\ldots+|S_N|\leq 3\times 10^5
- All input numbers are integers.

Sample Input 1

3
ab abc arc

Sample Output 1

4


- f(S_1,S_2)=2 
- f(S_1,S_3)=1 
- f(S_2,S_3)=1 

Thus, the answer is f(S_1,S_2) + f(S_1,S_3) + f(S_2,S_3) = 4.

Sample Input 2

11
ab bb aaa bba baba babb aaaba aabbb a a b

Sample Output 2

32

Codestral Analysis:
 The given problem can be categorized as a String Processing problem with some algorithmic reasoning involved.

   Difficulty: Medium to Hard

   Required Skills:
   - Proficient knowledge of string processing in coding.
   - Basic understanding of algorithms to solve the problem optimally.

   Problem Category and Analysis:
   This problem involves finding the sum of lengths of the longest common prefixes between all pairs of strings from a given list of N strings. Here, we are supposed to find f(x, y) for every pair (S_i, S_j), where i < j, and then sum up these values to obtain our final result.

   To optimally solve this problem, we can use a data structure called the Trie or Prefix Tree. A Trie is an ordered tree-like data structure that is used to store a dynamic set or associative array where the keys are usually strings. By using this data structure, we can efficiently find the longest common prefix for each pair of strings and sum them up, resulting in a linear time complexity O(L), where L is the total length of all input strings combined.

   Therefore, I would categorize this problem as a Data Structures - Trie or String Processing problem with a moderate to high level of difficulty.
