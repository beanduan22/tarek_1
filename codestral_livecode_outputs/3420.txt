Problem ID: 3420
Problem Content:
You are given an integer array nums, an integer array queries, and an integer x.
For each queries[i], you need to find the index of the queries[i]^th occurrence of x in the nums array. If there are fewer than queries[i] occurrences of x, the answer should be -1 for that query.
Return an integer array answer containing the answers to all queries.
 
Example 1:

Input: nums = [1,3,1,7], queries = [1,3,2,4], x = 1
Output: [0,-1,2,-1]
Explanation:

For the 1^st query, the first occurrence of 1 is at index 0.
For the 2^nd query, there are only two occurrences of 1 in nums, so the answer is -1.
For the 3^rd query, the second occurrence of 1 is at index 2.
For the 4^th query, there are only two occurrences of 1 in nums, so the answer is -1.


Example 2:

Input: nums = [1,2,3], queries = [10], x = 5
Output: [-1]
Explanation:

For the 1^st query, 5 doesn't exist in nums, so the answer is -1.


 
Constraints:

1 <= nums.length, queries.length <= 10^5
1 <= queries[i] <= 10^5
1 <= nums[i], x <= 10^4

Codestral Analysis:
 This is a problem from the category of "Array" or "Hashmap" in programming, with a medium level of difficulty. It requires an understanding of XOR operation, iterating over arrays, and maintaining data structure to track occurrences.

    The problem can be solved by first tracking all the indices where the target number appears in the array using a hashmap or similar data structure. After that, for each query, we check if there are enough occurrences of the number in our data structure. If not, we return -1; otherwise, we return the index corresponding to the required occurrence.

    The time complexity is O(n + m), where n is the size of the nums array and m is the size of the queries array. This is because we need to iterate over both arrays once. The space complexity is also O(n) since we may have to store all indices in our data structure in the worst case.
