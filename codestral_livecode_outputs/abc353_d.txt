Problem ID: abc353_d
Problem Content:
For positive integers x and y, define f(x, y) as follows:

- Interpret the decimal representations of x and y as strings and concatenate them in this order to obtain a string z. The value of f(x, y) is the value of z when interpreted as a decimal integer.

For example, f(3, 14) = 314 and f(100, 1) = 1001.
You are given a sequence of positive integers A = (A_1, \ldots, A_N) of length N. Find the value of the following expression modulo 998244353:
\displaystyle \sum_{i=1}^{N-1}\sum_{j=i+1}^N f(A_i,A_j).

Input

The input is given from Standard Input in the following format:
N
A_1 \ldots A_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 2 \times 10^5
- 1 \leq A_i \leq 10^9
- All input values are integers.

Sample Input 1

3
3 14 15

Sample Output 1

2044


- f(A_1, A_2) = 314
- f(A_1, A_3) = 315
- f(A_2, A_3) = 1415

Thus, the answer is f(A_1, A_2) + f(A_1, A_3) + f(A_2, A_3) = 2044.

Sample Input 2

5
1001 5 1000000 1000000000 100000

Sample Output 2

625549048

Be sure to calculate the value modulo 998244353.

Codestral Analysis:
 The problem can be categorized as a Moderate level problem from the Competitive Programming domain. It requires understanding of number theory to solve optimally.

   The problem is about computing the sum of concatenated numbers formed by pairing elements from a given sequence of positive integers. The concatenation order is significant, and the final value is calculated modulo 998244353. This operation is performed for every unique pair in the sequence.

   To solve this problem:
   1. The first step will be to read the input sequence of integers.
   2. Then, we need to calculate f(A_i, A_j) for all pairs (i, j), where i < j. This can be done by concatenating strings representing numbers A_i and A_j. However, since the final result is calculated modulo 998244353, we need to compute the concatenated values efficiently to avoid integer overflow.
   3. After that, we sum up all these values and return the result modulo 998244353.

   This problem can be solved using dynamic programming or by implementing a fast power function for efficient calculation of concatenated numbers' values modulo 998244353. The time complexity is O(N^2), where N is the number of elements in the input sequence, as we need to calculate f(A_i, A_j) for every unique pair (i, j). The space complexity is O(1), as we only need a constant amount of space to store our results.
