Problem ID: abc355_e
Problem Content:
This is an interactive problem (where your program interacts with the judge via input and output).
You are given a positive integer N and integers L and R such that 0 \leq L \leq R < 2^N. The judge has a hidden sequence A = (A_0, A_1, \dots, A_{2^N-1}) consisting of integers between 0 and 99, inclusive.
Your goal is to find the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100. However, you cannot directly know the values of the elements in the sequence A. Instead, you can ask the judge the following question:

- Choose non-negative integers i and j such that 2^i(j+1) \leq 2^N. Let l = 2^i j and r = 2^i (j+1) - 1. Ask for the remainder when A_l + A_{l+1} + \dots + A_r is divided by 100.

Let m be the minimum number of questions required to determine the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100 for any sequence A. You need to find this remainder within m questions.

Input and Output

This is an interactive problem (where your program interacts with the judge via input and output).
First, read the integers N, L, and R from Standard Input:
N L R

Then, repeat asking questions until you can determine the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100. Each question should be printed in the following format:
? i j

Here, i and j must satisfy the following constraints:

- i and j are non-negative integers.
- 2^i(j+1) \leq 2^N

The response to the question will be given in the following format from Standard Input:
T

Here, T is the answer to the question, which is the remainder when A_l + A_{l+1} + \dots + A_r is divided by 100, where l = 2^i j and r = 2^i (j+1) - 1.
If i and j do not satisfy the constraints, or if the number of questions exceeds m, then T will be -1.
If the judge returns -1, your program is already considered incorrect. In this case, terminate the program immediately.
Once you have determined the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100, print the remainder S in the following format and terminate the program immediately:
! S

Input and Output

This is an interactive problem (where your program interacts with the judge via input and output).
First, read the integers N, L, and R from Standard Input:
N L R

Then, repeat asking questions until you can determine the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100. Each question should be printed in the following format:
? i j

Here, i and j must satisfy the following constraints:

- i and j are non-negative integers.
- 2^i(j+1) \leq 2^N

The response to the question will be given in the following format from Standard Input:
T

Here, T is the answer to the question, which is the remainder when A_l + A_{l+1} + \dots + A_r is divided by 100, where l = 2^i j and r = 2^i (j+1) - 1.
If i and j do not satisfy the constraints, or if the number of questions exceeds m, then T will be -1.
If the judge returns -1, your program is already considered incorrect. In this case, terminate the program immediately.
Once you have determined the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100, print the remainder S in the following format and terminate the program immediately:
! S

Constraints


- 1 \leq N \leq 18
- 0 \leq L \leq R \leq 2^N - 1
- All input values are integers.



Codestral Analysis:
 The problem is an interactive one where the goal is to find the remainder when a sum of elements in a hidden sequence is divided by 100. To solve this problem, you need to ask questions about subranges of the sequence, and each question will give you a remainder when that subrange's sum is divided by 100. The challenge is that you can only query these subranges in specific ways, as defined in the problem statement.

    This problem falls under the category of interactive problems. Interactive problems require communication between the program and a judge-like system to obtain information about the hidden state or data to solve the problem. These types of problems are often more challenging than traditional input/output problems because they require additional logic for handling the interaction with the judge system.

    Difficulty: Hard
    Required programming skills: Basic programming concepts, interactive problem-solving, and logical thinking.
    Complexity: The time complexity is dependent on the number of questions asked to obtain the solution, which can range from a few to several hundred. The space complexity is minimal as no additional data structures are used to store the sequence elements.

    Potential approach: Start by understanding the constraints and the way you can query subranges. Then, implement a strategy to ask questions efficiently to minimize the number of queries required to find the desired remainder. One possible approach is to use binary search-like strategies on the range or index values while querying for subrange sums.
