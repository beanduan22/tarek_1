Problem ID: 2845
Problem Content:
You are given a positive integer array nums.
Partition nums into two arrays, nums1 and nums2, such that:

Each element of the array nums belongs to either the array nums1 or the array nums2.
Both arrays are non-empty.
The value of the partition is minimized.

The value of the partition is |max(nums1) - min(nums2)|.
Here, max(nums1) denotes the maximum element of the array nums1, and min(nums2) denotes the minimum element of the array nums2.
Return the integer denoting the value of such partition.
 
Example 1:

Input: nums = [1,3,2,4]
Output: 1
Explanation: We can partition the array nums into nums1 = [1,2] and nums2 = [3,4].
- The maximum element of the array nums1 is equal to 2.
- The minimum element of the array nums2 is equal to 3.
The value of the partition is |2 - 3| = 1. 
It can be proven that 1 is the minimum value out of all partitions.

Example 2:

Input: nums = [100,1,10]
Output: 9
Explanation: We can partition the array nums into nums1 = [10] and nums2 = [100,1].
- The maximum element of the array nums1 is equal to 10.
- The minimum element of the array nums2 is equal to 1.
The value of the partition is |10 - 1| = 9.
It can be proven that 9 is the minimum value out of all partitions.

 
Constraints:

2 <= nums.length <= 10^5
1 <= nums[i] <= 10^9

Codestral Analysis:
 The problem can be categorized as a 'Sorting' and 'Binary Search' problem based on its requirements and constraints. The problem asks to partition an array into two non-empty subsets such that the difference between maximum element of one subset and minimum element of the other is minimized. This involves sorting the elements, then applying a binary search algorithm to find the optimal partition point.

Difficulty: Medium

Required Programming Skills:
1. Understanding how to perform sorting operations in a programming language (Arrays/Lists can be sorted directly or using built-in functions).
2. Implementation of Binary Search or understanding its concept.
3. Ability to handle arrays and their elements.
4. Knowledge on finding maximum, minimum and absolute difference between numbers.
5. Basic knowledge of looping constructs.
6. Experience in solving algorithmic problems will be beneficial but not required as the problem can be solved with a good understanding of basic concepts mentioned above.

Complexity:
1. Time Complexity - The sort operation dominates this problem, which has a time complexity of O(n log n) where 'n' is the length of nums array. After that we perform binary search, so the overall complexity will be O(n log n + log m), where 'm' is the range of the numbers in the array.
2. Space Complexity - Depending on the sorting algorithm used and whether it is an in-place or not, space complexity can vary from O(1) to O(n). In this case, assuming a standard sorting mechanism without extra space, we can say that the space complexity is O(1), as no additional data structure proportional to input size is required.
