Problem ID: 3354
Problem Content:
You are given a string s. s[i] is either a lowercase English letter or '?'.
For a string t having length m containing only lowercase English letters, we define the function cost(i) for an index i as the number of characters equal to t[i] that appeared before it, i.e. in the range [0, i - 1].
The value of t is the sum of cost(i) for all indices i.
For example, for the string t = "aab":

cost(0) = 0
cost(1) = 1
cost(2) = 0
Hence, the value of "aab" is 0 + 1 + 0 = 1.

Your task is to replace all occurrences of '?' in s with any lowercase English letter so that the value of s is minimized.
Return a string denoting the modified string with replaced occurrences of '?'. If there are multiple strings resulting in the minimum value, return the lexicographically smallest one.
 
Example 1:

Input:   s = "???" 
Output:   "abc" 
Explanation:  In this example, we can replace the occurrences of '?' to make s equal to "abc".
For "abc", cost(0) = 0, cost(1) = 0, and cost(2) = 0.
The value of "abc" is 0.
Some other modifications of s that have a value of 0 are "cba", "abz", and, "hey".
Among all of them, we choose the lexicographically smallest.

Example 2:

Input:  s = "a?a?"
Output:  "abac"
Explanation:  In this example, the occurrences of '?' can be replaced to make s equal to "abac".
For "abac", cost(0) = 0, cost(1) = 0, cost(2) = 1, and cost(3) = 0.
The value of "abac" is 1.

 
Constraints:

1 <= s.length <= 10^5
s[i] is either a lowercase English letter or '?'.

Codestral Analysis:
 Problem Category Analysis:

   - Difficulty Level: Medium-Hard
   - Programming Skills Required: String Manipulation, Dynamic Programming, Prefix Sums
   - Complexity: The problem can be solved by iterating through the string once and utilizing a prefix sum concept. It requires understanding of string manipulation, dynamic programming concepts and prefix sums calculation which could be challenging for beginners. However, it is considered a medium to hard level problem in terms of difficulty due to its complexity and required skills set.
   - Time Complexity: The time complexity of the solution would be O(n), where n is the length of the string. This is because we are iterating through the string only once.
   - Space Complexity: The space complexity is also O(n) as we are using an array to store the prefix sums for each character in the string.

   Solution Approach:
   1. Initialize a list or array `prefix_sum` of size 26 (for lowercase English alphabets) with all elements set to zero. This will keep track of the number of occurrences of each character before the current index in the string.
   2. Initialize an empty string `result`.
   3. Iterate through each character `c` in the input string `s`.
      a. If `c` is not '?', add it to the `result` and increment the corresponding value in `prefix_sum`.
      b. If `c` is '?', find the smallest lowercase English letter that has not been used before (i.e., the one with the lowest count in `prefix_sum`) and add it to the `result`. Increment the corresponding value in `prefix_sum`.
   4. Return the final `result` string.
