Problem ID: 1883_C
Problem Content:
You are given an array of integers $a_1, a_2, \ldots, a_n$ and a number $k$ ($2 \leq k \leq 5$). In one operation, you can do the following:


-  Choose an index $1 \leq i \leq n$,
-  Set $a_i = a_i + 1$.Find the minimum number of operations needed to make the product of all the numbers in the array $a_1 \cdot a_2 \cdot \ldots \cdot a_n$ divisible by $k$.

Input

Each test consists of multiple test cases. The first line contains a single integer $t$ ($1 \leq t \leq 10^4$) — the number of test cases. Then follows the description of the test cases.

The first line of each test case contains two integers $n$ and $k$ ($2 \leq n \leq 10^5$, $2 \leq k \leq 5$) — the size of the array $a$ and the number $k$.

The second line of each test case contains $n$ integers $a_1, a_2, \ldots, a_n$ ($1 \leq a_i \leq 10$).

It is guaranteed that the sum of $n$ over all test cases does not exceed $2 \cdot 10^5$.

Output

For each test case, output the minimum number of operations needed to make the product of all the numbers in the array divisible by $k$.Sample Input 1:
15

2 5

7 3

3 3

7 4 1

5 2

9 7 7 3 9

5 5

5 4 1 2 3

7 4

9 5 1 5 9 5 1

3 4

6 3 6

3 4

6 1 5

3 4

1 5 9

4 4

1 4 1 1

3 4

3 5 3

4 5

8 9 9 3

2 5

1 6

2 5

10 10

4 5

1 6 1 1

2 5

7 7



Sample Output 1:

2
2
1
0
2
0
1
2
0
1
1
4
0
4
3


Note

In the first test case, we need to choose the index $i = 2$ twice. After that, the array will be $a = [7, 5]$. The product of all the numbers in the array is $35$.

In the fourth test case, the product of the numbers in the array is $120$, which is already divisible by $5$, so no operations are needed.

In the eighth test case, we can perform two operations by choosing $i = 2$ and $i = 3$ in any order. After that, the array will be $a = [1, 6, 10]$. The product of the numbers in the array is $60$.

Codestral Analysis:
 This problem falls into the category of algorithmic problems with a focus on number theory and optimization. The difficulty level could be considered MEDIUM to HARD as it requires knowledge about how divisibility works in numbers and optimizing solutions through algorithms.

   Here's an analysis:

   The problem gives us an array of integers and a target integer `k` (which is a small number between 2 and 5). We need to find the minimum number of operations required to make the product of all numbers in the array divisible by `k`. An operation is defined as choosing an index in the array and incrementing its value by one.

   In order to solve this problem, we need to understand that if a number isn't divisible by `k`, then adding 1 to it may or may not make it divisible by `k`. For example, if k=3 and we have the number 4 in our array, then adding 1 will not help us because 5 is still not divisible by 3.

   The approach to solve this problem would involve counting the remainder of each division of all numbers in the array by `k`. Then we can try to minimize these remainders using a greedy approach or dynamic programming. We could use a frequency map to count how many times each remainder appears. Then we need to calculate the minimum number of operations required to make all remainders sum up to 0, which is a well-known problem in number theory and combinatorics.

   The complexity of this problem might be considered as MEDIUM to HARD. It requires good understanding of how divisibility works and how to use data structures such as frequency maps to solve optimization problems efficiently. Also, the constraint that the sum of `n` over all test cases does not exceed 2*10^5 could make brute force solutions time out on large inputs.
