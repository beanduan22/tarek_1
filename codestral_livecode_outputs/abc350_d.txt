Problem ID: abc350_d
Problem Content:
There is an SNS used by N users, labeled with numbers from 1 to N.
In this SNS, two users can become friends with each other.
Friendship is bidirectional; if user X is a friend of user Y, user Y is always a friend of user X.
Currently, there are M pairs of friendships on the SNS, with the i-th pair consisting of users A_i and B_i.
Determine the maximum number of times the following operation can be performed:

- Operation: Choose three users X, Y, and Z such that X and Y are friends, Y and Z are friends, but X and Z are not. Make X and Z friends.

Input

The input is given from Standard Input in the following format:
N M
A_1 B_1
\vdots
A_M B_M

Output

Print the answer.

Constraints


- 2 \leq N \leq 2 \times 10^5
- 0 \leq M \leq 2 \times 10^5
- 1 \leq A_i < B_i \leq N
- The pairs (A_i, B_i) are distinct.
- All input values are integers.

Sample Input 1

4 3
1 2
2 3
1 4

Sample Output 1

3

Three new friendships with a friend's friend can occur as follows:

- User 1 becomes friends with user 3, who is a friend of their friend (user 2)
- User 3 becomes friends with user 4, who is a friend of their friend (user 1)
- User 2 becomes friends with user 4, who is a friend of their friend (user 1)

There will not be four or more new friendships.

Sample Input 2

3 0

Sample Output 2

0

If there are no initial friendships, no new friendships can occur.

Sample Input 3

10 8
1 2
2 3
3 4
4 5
6 7
7 8
8 9
9 10

Sample Output 3

12

Codestral Analysis:
 The problem is about finding the maximum number of times a specific operation can be performed on a social network with N users and M friendships. The operation involves making two users X and Z friends, given that X and Y are already friends, Y and Z are friends but X and Z are not. This problem can be classified as a graph theory problem, specifically focusing on finding cliques in a graph or counting triangles in a graph, and it requires good programming skills in graph algorithms or data structures. The complexity of the problem is moderate to hard, depending on the approach used to solve it.

Here's an analysis of the problem:

1. Define a graph with N vertices representing users and M edges representing friendships.
2. Iterate through all possible triplets of friends (X, Y, Z) where X is a friend of Y and Y is a friend of Z.
3. Check if X and Z are not already friends, in which case perform the operation by making X and Z friends.
4. Count the number of operations performed to find the maximum possible value.

To optimize the solution, we can use graph algorithms such as Breadth-First Search (BFS) or Depth-First Search (DFS) to traverse the graph and count triangles instead of checking all possible triplets, which would result in a higher time complexity. The overall time complexity of this approach is O(N^2), where N is the number of users.
