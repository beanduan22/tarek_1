Problem ID: 2754
Problem Content:
You are given a 0-indexed integer array nums representing the score of students in an exam. The teacher would like to form one non-empty group of students with maximal strength, where the strength of a group of students of indices i_0, i_1, i_2, ... , i_k is defined as nums[i_0] * nums[i_1] * nums[i_2] * ... * nums[i_k​].
Return the maximum strength of a group the teacher can create.
 
Example 1:

Input: nums = [3,-1,-5,2,5,-9]
Output: 1350
Explanation: One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.

Example 2:

Input: nums = [-4,-5,-4]
Output: 20
Explanation: Group the students at indices [0, 1] . Then, we’ll have a resulting strength of 20. We cannot achieve greater strength.

 
Constraints:

1 <= nums.length <= 13
-9 <= nums[i] <= 9

Codestral Analysis:
 The problem category is dynamic programming with a slight twist of considering negative numbers as well. It's a medium level problem that requires understanding of bit manipulation to iterate over all possible subsets, and knowledge of how to handle overflow in integer multiplication in some languages. Here's the analysis:

    - The problem can be solved using dynamic programming with bitmasking technique where we consider each subset of the given array nums.
    - We maintain a dp table where dp[i] is the maximum strength that can be achieved by considering elements from index 0 to i.
    - For each element, we have two choices: either to include it in our product or exclude it. If we include an element, its value must be multiplied with all other included elements so far (stored in dp[mask^(1<<i)] where mask^(1<<i) gives us the subset without the ith element).
    - To handle negative numbers, we calculate maximum and minimum strength for each subset separately since a negative number can turn a maximum product into a minimum.
    - The time complexity is O(2^n * n), where n is the length of nums. This is because we have to iterate through all subsets and calculate product for each subset, which takes O(n) time.
    - Space complexity is also O(2^n), used by the dp table.

    Thus, this problem can be categorized as a dynamic programming problem with a medium level of difficulty.
