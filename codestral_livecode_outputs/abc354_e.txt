Problem ID: abc354_e
Problem Content:
Takahashi and Aoki are playing a game using N cards. The front side of the i-th card has A_i written on it, and the back side has B_i written on it. Initially, the N cards are laid out on the table. With Takahashi going first, the two players take turns performing the following operation:

- Choose a pair of cards from the table such that either the numbers on their front sides are the same or the numbers on their back sides are the same, and remove these two cards from the table. If no such pair of cards exists, the player cannot perform the operation.

The player who is first to be unable to perform the operation loses, and the other player wins.
Determine who wins if both players play optimally.

Input

The input is given from Standard Input in the following format:
N
A_1 B_1
A_2 B_2
\vdots
A_N B_N

Output

Print Takahashi if Takahashi wins when both players play optimally, and Aoki otherwise.

Constraints


- 1 \leq N \leq 18
- 1 \leq A_i, B_i \leq 10^9
- All input values are integers.

Sample Input 1

5
1 9
2 5
4 9
1 4
2 5

Sample Output 1

Aoki

If Takahashi first removes

- 
the first and third cards: Aoki can win by removing the second and fifth cards.

- 
the first and fourth cards: Aoki can win by removing the second and fifth cards.

- 
the second and fifth cards: Aoki can win by removing the first and third cards.


These are the only three pairs of cards Takahashi can remove in his first move, and Aoki can win in all cases. Therefore, the answer is Aoki.

Sample Input 2

9
3 2
1 7
4 1
1 8
5 2
9 8
2 1
6 8
5 2

Sample Output 2

Takahashi

Codestral Analysis:
 This is a game theory problem that can be solved using dynamic programming and bitmasking techniques. The problem involves two players taking turns to remove pairs of cards from a table such that either the numbers on their front sides are the same or the numbers on their back sides are the same. The player who cannot perform the operation loses. The problem requires determining who wins if both players play optimally given certain constraints such as the number of cards and values on them.

   Category: Game Theory, Dynamic Programming, Bitmasking
   Difficulty: Medium to Hard
   Required programming skills: Understanding of dynamic programming, bitwise operations, recursion and memoization.
   Complexity: The time complexity is O(3^N) because there are at most 2*N choices for a move (removing two cards with the same value on front or back), and it could take up to N turns. Space complexity is also O(2^N) as it requires a state array to store whether a player can win from each state.
