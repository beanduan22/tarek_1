Problem ID: abc329_b
Problem Content:
You are given N integers A_1, A_2, \ldots, A_N. Find the largest among those integers that are not the largest.
The constraints of this problem guarantee that the answer exists.

Input

The input is given from Standard Input in the following format:
N
A_1 A_2 \ldots A_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 100
- 1 \leq A_i \leq 100
- It is not the case that all A_1, A_2, \ldots, A_N are equal.
- All input values are integers.

Sample Input 1

5
2 1 3 3 2

Sample Output 1

2

The largest integer among 2,1,3,3,2 is 3.
The integers that are not 3 among 2,1,3,3,2 are 2,1,2, among which the largest is 2.

Sample Input 2

4
4 3 2 1

Sample Output 2

3

Sample Input 3

8
22 22 18 16 22 18 18 22

Sample Output 3

18

Codestral Analysis:
 This is a basic problem that can be solved using simple algorithms such as sorting or traversing through an array. It falls under the category of "find the second largest number" problems which are considered easy to moderate in terms of difficulty. To solve this problem:

1. Read the input integers into an array.
2. Traverse through the array once to find the maximum value and store it.
3. Traverse through the array again, but this time compare each integer with the maximum value found in step 2. If the current number is less than the maximum, update a variable that stores the second largest number if the current number is greater than the previously stored second largest number.
4. Print the second largest number.

This problem requires basic programming skills and knowledge of array traversal and comparison operations. The time complexity is O(n) since we're making two passes over the input array. It's also worth noting that this solution assumes that there are no duplicate maximum values in the array, as per the given constraints. If duplicates can exist, additional steps would be needed to handle that case.
