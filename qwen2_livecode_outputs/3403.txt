Problem ID: 3403
Problem Content:
Given a string s, you need to partition it into one or more balanced substrings. For example, if s == "ababcc" then ("abab", "c", "c"), ("ab", "abc", "c"), and ("ababcc") are all valid partitions, but ("a", "bab", "cc"), ("aba", "bc", "c"), and ("ab", "abcc") are not. The unbalanced substrings are bolded.
Return the minimum number of substrings that you can partition s into.
Note: A balanced string is a string where each character in the string occurs the same number of times.
 
Example 1:

Input: s = "fabccddg"
Output: 3
Explanation:
We can partition the string s into 3 substrings in one of the following ways: ("fab, "ccdd", "g"), or ("fabc", "cd", "dg").

Example 2:

Input: s = "abababaccddb"
Output: 2
Explanation:
We can partition the string s into 2 substrings like so: ("abab", "abaccddb").

 
Constraints:

1 <= s.length <= 1000
s consists only of English lowercase letters.

Qwen2 Analysis:
This problem can be categorized as a **Medium** level question in the context of coding challenges. It requires understanding and implementing basic string manipulation techniques along with a good grasp of data structures such as Hash Maps or Dictionaries.

### Difficulty:
- **Algorithmic thinking**: The problem requires devising an efficient strategy to break down the input string into balanced substrings. This involves creating a plan that can adapt dynamically based on character frequency across different segments.
  
- **Logical reasoning**: Understanding how characters should be distributed among substrings for balance (each character occurring an equal number of times) and recognizing patterns or conditions for breaking up the string requires careful thought.

### Required Programming Skills:
- **String manipulation**: Ability to traverse strings, access specific parts of a string using indices, and create new strings from segments of the original string.
  
- **Data structure knowledge**: Familiarity with hash maps or dictionaries is crucial as they can help in tracking character frequencies efficiently. This data structure allows for quick checks on whether adding a new substring maintains balance.

### Complexity:
The algorithmic approach should strive to achieve linear time complexity, i.e., O(n), where n is the length of the string. This ensures efficiency even for large inputs. The space complexity should also be kept minimal by leveraging in-place data structures if possible.

By solving this problem, you are expected to demonstrate skills in:
- **Efficient use of algorithms**
- **Effective handling of strings**
- **Optimization of code for performance**
