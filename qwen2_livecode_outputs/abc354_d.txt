Problem ID: abc354_d
Problem Content:
The pattern of AtCoder's wallpaper can be represented on the xy-plane as follows:

- 
The plane is divided by the following three types of lines:

- 
x = n (where n is an integer)

- 
y = n (where n is an even number)

- 
x + y = n (where n is an even number)



- 
Each region is painted black or white. Any two regions adjacent along one of these lines are painted in different colors.

- 
The region containing (0.5, 0.5) is painted black.


The following figure shows a part of the pattern.

You are given integers A, B, C, D. Consider a rectangle whose sides are parallel to the x- and y-axes, with its bottom-left vertex at (A, B) and its top-right vertex at (C, D). Calculate the area of the regions painted black inside this rectangle, and print twice that area.
It can be proved that the output value will be an integer.

Input

The input is given from Standard Input in the following format:
A B C D

Output

Print the answer on a single line.

Constraints


- -10^9 \leq A, B, C, D \leq 10^9
- A < C and B < D.
- All input values are integers.

Sample Input 1

0 0 3 3

Sample Output 1

10

We are to find the area of the black-painted region inside the following square:

The area is 5, so print twice that value: 10.

Sample Input 2

-1 -2 1 3

Sample Output 2

11

The area is 5.5, which is not an integer, but the output value is an integer.

Sample Input 3

-1000000000 -1000000000 1000000000 1000000000

Sample Output 3

4000000000000000000

This is the case with the largest rectangle, where the output still fits into a 64-bit signed integer.

Qwen2 Analysis:
The given programming problem falls under the category of Geometry and Algorithmic Problem Solving. The difficulty level is moderate to high depending on the familiarity with geometric concepts and algorithmic approaches like area calculation for rectangles or regions.

**Required Programming Skills:**

1. **Coordinate System Understanding:** The problem revolves around a coordinate system where multiple lines divide the space into distinct regions. This requires knowledge of how to interpret and visualize such divisions based on given mathematical rules.

2. **Rectangle Area Calculation:** Being able to calculate the area of rectangles is crucial since the output involves computing twice the area of some region inside a rectangle defined by (A, B) and (C, D).

3. **Algorithmic Thinking:** The problem requires devising an efficient method to determine if points lie in black or white regions based on the given line rules.

4. **Modular Arithmetic and Integer Handling:** Given large integer constraints (-10^9 ≤ A, B, C, D ≤ 10^9), understanding of modular arithmetic operations might be necessary when dealing with calculations involving very large numbers.

5. **Conditional Logic:** Implementing conditional logic to determine the color (black or white) of a region based on its coordinates relative to the dividing lines is required.

**Complexity:**

The problem's complexity lies mainly in translating geometric concepts into an algorithm that can accurately determine which regions are painted black and calculating their area efficiently. The challenge arises from needing to handle large integers while maintaining precision throughout computations, particularly when dealing with very large ranges for A, B, C, D values.

The solution will likely involve iterating through the given rectangle (defined by A, B, C, D) and determining if a point falls into a black or white region based on its coordinates. This can be optimized by applying insights from geometric principles to reduce computations where possible (e.g., identifying patterns in which regions are painted black). Efficient area calculation methods might include summing up the areas of simple geometric shapes formed within the rectangle that contribute to the overall count.

In summary, this problem requires a blend of algorithmic proficiency, understanding of geometry concepts, and careful handling of large numbers. The solution would likely involve writing logic based on conditional checks against line equations defining the regions, possibly using techniques like counting or summing up areas of relevant shapes within the rectangle bounds.
