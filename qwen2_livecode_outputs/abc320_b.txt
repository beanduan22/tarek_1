Problem ID: abc320_b
Problem Content:
You are given a string S.
Find the maximum length of a contiguous substring of S that is a palindrome.
Note that there is always a contiguous substring of S that is a palindrome.

Input

The input is given from Standard Input in the following format:
S

Output

Print the answer.

Constraints


- S is a string of length between 2 and 100, inclusive, consisting of uppercase English letters.

Sample Input 1

TOYOTA

Sample Output 1

5

TOYOT, a contiguous substring of TOYOTA, is a palindrome of length 5.
TOYOTA, the only length-6 contiguous substring of TOYOTA, is not a palindrome, so print 5.

Sample Input 2

ABCDEFG

Sample Output 2

1

Every contiguous substring of length 1 is a palindrome.

Sample Input 3

AAAAAAAAAA

Sample Output 3

10

Qwen2 Analysis:
The problem presented here can be classified as an algorithmic challenge that requires string manipulation, pattern recognition, and dynamic programming knowledge. The main objective is to find the maximum length of a contiguous substring in a given string S which forms a palindrome.

**Category Prediction:**

1. **Difficulty:** Medium - The problem involves understanding palindromes and optimizing search through dynamic programming techniques or other efficient algorithms.
2. **Required Programming Skills:** Basic string handling, loops, and conditional statements are essential along with an understanding of recursion or dynamic programming to optimize the solution.
3. **Complexity:** Moderate - It requires careful reasoning about the structure of strings and how to efficiently explore different substrings for palindromes.

**Solution Approach:**

A common approach involves using a two-pointer technique combined with dynamic programming concepts. Here are key steps:

1. Iterate through each character in the string, treating it as a potential center of a palindrome.
2. Check both odd-length and even-length palindromes by expanding around the current center (character or pair of characters).
3. Use memoization or dynamic programming to store results for subproblems (maximum length found between certain indices) to avoid redundant computations.

Given these aspects, this problem falls into the category of **Intermediate Algorithm Challenges** requiring an understanding of both string manipulation and basic algorithmic optimization techniques. It tests skills in efficiently searching through data structures and optimizing computation by avoiding recalculating already known results.
