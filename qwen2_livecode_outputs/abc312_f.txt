Problem ID: abc312_f
Problem Content:
There are N items.
Each of these is one of a pull-tab can, a regular can, or a can opener.
The i-th item is described by an integer pair (T_i, X_i) as follows:  

- If T_i = 0, the i-th item is a pull-tab can; if you obtain it, you get a happiness of X_i.
- If T_i = 1, the i-th item is a regular can; if you obtain it and use a can opener against it, you get a happiness of X_i.
- If T_i = 2, the i-th item is a can opener; it can be used against at most X_i cans.

Find the maximum total happiness that you get by obtaining M items out of N.

Input

The input is given from Standard Input in the following format:
N M
T_1 X_1
T_2 X_2
\vdots
T_N X_N

Output

Print the answer as an integer.

Constraints


- 1 \leq M \leq N \leq 2 \times 10^5
- T_i is 0, 1, or 2.
- 1 \leq X_i \leq 10^9
- All input values are integers.

Sample Input 1

8 4
0 6
0 6
1 3
1 5
1 15
2 1
2 10
2 100

Sample Output 1

27

If you obtain the 1-st, 2-nd, 5-th, and 7-th items, and use the 7-th item (a can opener) against the 5-th item, you will get a happiness of 6 + 6 + 15 = 27.
There are no ways to obtain items to get a happiness of 28 or greater, but you can still get a happiness of 27 by obtaining the 6-th or 8-th items instead of the 7-th in the combination above.

Sample Input 2

5 5
1 5
1 5
1 5
1 5
1 5

Sample Output 2

0

Sample Input 3

12 6
2 2
0 1
0 9
1 3
1 5
1 3
0 4
2 1
1 8
2 1
0 1
0 4

Sample Output 3

30

Qwen2 Analysis:
The given problem involves a combination of decision-making and dynamic programming techniques. It requires strategic selection from different types of items (pull-tab cans, regular cans, can openers) with varying happiness values and specific constraints to maximize total happiness gained.

**Category Prediction:**

1. **Difficulty:** The problem is challenging because it requires deep understanding of the interaction between item types, effective use of resources (can opener), and smart selection strategy under limited choices (M items out of N available).

2. **Required Programming Skills:** It involves algorithmic thinking particularly related to decision-making problems like knapsack or optimization challenges, which necessitates knowledge in:
   - Understanding problem constraints 
   - Implementing dynamic programming strategies
   - Efficient use of data structures for tracking and storing intermediate results

3. **Complexity:** The complexity is medium-high due to the need for a combination of greedy decisions (selecting items based on immediate happiness gain) and backtracking concepts with potentially overlapping sub-problems, which are tackled using dynamic programming.

**Solution Approach:**
To solve this problem, one would typically follow these steps:

- **Initialization:** Set up variables or data structures suitable for dynamic programming to track total happiness (`dp`) at each step.
- **Sorting:** Sort items based on their `T_i` value and then potentially by `X_i` if T_i is 0 or 1 to ensure efficient exploration of item selection orders.
- **Dynamic Programming:** Use DP tables to store the maximum happiness gain for considering a certain number of items up to a specific point in the sorted list. This involves deciding for each item whether to include it based on its type (`T_i`) and potential contribution to total happiness against other items (regular cans) or as an additional resource (can opener).
- **Optimization:** Since this is a combination optimization problem, look into different states to optimize selection of items, especially focusing on the interplay between pull-tab cans, regular cans, and can openers. 

**Conclusion:**
The problem falls under the category of advanced algorithmic challenges requiring an understanding of dynamic programming techniques and decision-making algorithms like knapsack problems. Its difficulty level is medium-high with significant emphasis on efficient implementation details and optimization strategies for handling overlapping sub-problems effectively through memoization or tabulation methods in DP.
