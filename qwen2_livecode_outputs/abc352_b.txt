Problem ID: abc352_b
Problem Content:
Takahashi tried to type a string S consisting of lowercase English letters using a keyboard.
He was typing while looking only at the keyboard, not the screen.
Whenever he mistakenly typed a different lowercase English letter, he immediately pressed the backspace key. However, the backspace key was broken, so the mistakenly typed letter was not deleted, and the actual string typed was T.
He did not mistakenly press any keys other than those for lowercase English letters.
The characters in T that were not mistakenly typed are called correctly typed characters.
Determine the positions in T of the correctly typed characters.

Input

The input is given from Standard Input in the following format:
S
T

Output

Let |S| be the length of S. If the correctly typed characters are the A_1-th, A_2-th, \ldots, A_{|S|}-th characters of T, print the values of A_1, A_2, \ldots, A_{|S|} in this order, separated by spaces.
Ensure that the output is in ascending order. That is, A_i < A_{i + 1} should hold for each 1 \leq i \leq |S| - 1.

Constraints


- S and T are strings of lowercase English letters with lengths between 1 and 2 \times 10^5, inclusive.
- T is a string obtained by the procedure described in the problem statement.

Sample Input 1

abc
axbxyc

Sample Output 1

1 3 6

The sequence of Takahashi's typing is as follows:

- Type a.
- Try to type b but mistakenly type x.
- Press the backspace key, but the character is not deleted.
- Type b.
- Try to type c but mistakenly type x.
- Press the backspace key, but the character is not deleted.
- Try to type c but mistakenly type y.
- Press the backspace key, but the character is not deleted.
- Type c.

The correctly typed characters are the first, third, and sixth characters.

Sample Input 2

aaaa
bbbbaaaa

Sample Output 2

5 6 7 8

Sample Input 3

atcoder
atcoder

Sample Output 3

1 2 3 4 5 6 7

Takahashi did not mistakenly type any characters.

Qwen2 Analysis:
Based on the description provided:

- The problem involves string manipulation and character comparison in a sequence where characters might be deleted due to mistakes (which are then also deleted by pressing backspace).
- It requires understanding of how strings are constructed, especially in terms of deleting or removing characters from their original positions.
- The output is ordered based on the position of correctly typed characters, implying that some form of tracking or marking these correct typing points needs to be done efficiently.

These elements suggest that this problem falls into the category of **Algorithmic String Processing**. Specifically:

1. **String Algorithms**: This involves techniques such as sliding window algorithms, prefix suffix structures (like Suffix Arrays, Suffix Trees), and string matching algorithms like KMP or Rabin-Karp.
2. **Data Structures**: Efficient data structures might be necessary to keep track of the typing sequence and identify correctly typed characters quickly without having to re-examine previous inputs for each query.
3. **Complexity**: The problem does not seem to have a direct straightforward brute-force solution due to its focus on tracking and ordering operations based on correct typing, implying that solutions should be optimized considering time complexity.

Given the constraints (`S` and `T` can be up to length 2Ã—10^5), we might expect that an **Algorithmic String Processing** approach using efficient data structures (like a stack for managing correct typing) would likely provide an optimal solution, as brute-force methods could exceed reasonable time limits on large inputs.

The problem requires a good understanding of how strings can be manipulated and analyzed in sequences with deletions, suggesting knowledge in algorithm design techniques such as tracking state changes through operations and ordering output based on these states. This typically involves skills like careful string manipulation logic and possibly utilizing data structures that efficiently support insertion, deletion, and query operations.

Therefore, categorizing this problem appropriately would likely place it under **String Algorithms** with a focus on specific optimizations for handling deletions within strings (like simulating backspaces) while maintaining the order of correct typing positions. It might lean more towards **Advanced Data Structures** problems due to the need for tracking and managing dynamic sequences effectively.

In summary, this problem would best fit under categories such as:

- **String Algorithms**
- **Data Structures** (specifically those supporting efficient insertions, deletions, and query operations)
- **Optimization Problems** (given constraints on input size)

These classifications reflect the need for careful algorithm design and potentially optimized data structure usage to handle deletions within strings effectively while maintaining a sorted order of correctly typed characters.
