Problem ID: abc353_c
Problem Content:
For positive integers x and y, define f(x, y) as the remainder of (x + y) divided by 10^8.
You are given a sequence of positive integers A = (A_1, \ldots, A_N) of length N. Find the value of the following expression:
\displaystyle \sum_{i=1}^{N-1}\sum_{j=i+1}^N f(A_i,A_j).

Input

The input is given from Standard Input in the following format:
N 
A_1 \ldots A_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 3\times 10^5
- 1 \leq A_i < 10^8
- All input values are integers.

Sample Input 1

3
3 50000001 50000002

Sample Output 1

100000012


- f(A_1,A_2)=50000004 
- f(A_1,A_3)=50000005 
- f(A_2,A_3)=3 

Thus, the answer is f(A_1,A_2) + f(A_1,A_3) + f(A_2,A_3) = 100000012.
Note that you are not asked to compute the remainder of the sum divided by 10^8.

Sample Input 2

5
1 3 99999999 99999994 1000000

Sample Output 2

303999988

Qwen2 Analysis:
The given programming problem can be categorized as:

Category: **Algorithmic Problem**

**Difficulty Level:** Intermediate to Advanced

**Required Programming Skills:**
1. **Understanding of Basic Arithmetic Operations:** The core operation involves remainder calculation which is a basic arithmetic operation in most programming languages.

2. **Looping Constructs:** Efficient use of nested loops (`for` loops) for iterating through sequences, as seen in the double summation part.

3. **Data Structures and Algorithms:** While not explicitly mentioned, understanding how to manage data efficiently can help optimize solutions.
   
4. **Handling Large Data Sets:** With constraints suggesting potentially large input sizes (up to \(N \leq 3\times10^5\)), the algorithm should be optimized for efficiency in terms of time complexity.

**Problem Complexity:**
- The problem involves mathematical computations and summations on a large scale, necessitating careful handling of arithmetic operations.
- It requires optimizing the way loops are structured to avoid unnecessary computations or iterations which could lead to inefficiencies with larger inputs.
  
In summary, this is an intermediate-level algorithmic problem that tests one's ability to handle data efficiently through optimized loop usage and basic mathematical concepts. The challenge lies in implementing a solution without exceeding time limits for large input sizes, thereby requiring careful thought on space and time complexity optimization.

**Solutions:**
Possible solutions could involve:
- **Iterative Summation:** Directly summing the required values by iterating over each combination of \(A_i\) and \(A_j\).
- **Optimized Looping:** Using optimized loops or data structures to reduce computational complexity.
- **Mathematical Optimization:** Finding patterns in how remainders accumulate based on input values, potentially leading to optimization through mathematical insights rather than brute force.

**Solution Approach:**
One could consider:
1. **Calculate and store intermediate results (remainders) to avoid recalculating for duplicate \(A_i\) and \(A_j\).**

2. **Use efficient looping strategies:** For example, after calculating the sum for combinations involving `A_1`, reuse parts of the loop when moving on to calculate sums involving `A_2`, `A_3` etc., by leveraging existing computations.

3. **Optimize loops based on sequence patterns**: If there's a pattern in how remainders accumulate (which might not be straightforward due to modular arithmetic), exploit it for optimization.

This problem encourages thinking about computational efficiency, loop management, and the practical implications of arithmetic operations at scale, which are fundamental skills in algorithmic programming.
