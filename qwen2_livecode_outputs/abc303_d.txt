Problem ID: abc303_d
Problem Content:
Your computer has a keyboard with three keys: 'a' key, Shift key, and Caps Lock key.  The Caps Lock key has a light on it.
Initially, the light on the Caps Lock key is off, and the screen shows an empty string.
You can do the following three actions any number of times in any order:

- Spend X milliseconds to press only the 'a' key.  If the light on the Caps Lock key is off, a is appended to the string on the screen; if it is on, A is.
- Spend Y milliseconds to press the 'a' key and Shift key simultaneously.  If the light on the Caps Lock key is off, A is appended to the string on the screen; if it is on, a is.
- Spend Z milliseconds to press the Caps Lock key.  If the light on the Caps Lock key is off, it turns on; if it is on, it turns off.

Given a string S consisting of A and a, determine at least how many milliseconds you need to spend to make the string shown on the screen equal to S.

Input

The input is given from Standard Input in the following format:
X Y Z
S

Output

Print the answer.

Constraints


- 1 \leq X,Y,Z \leq 10^9
- X, Y, and Z are integers.
- 1 \leq |S| \leq 3 \times 10^5
- S is a string consisting of A and a.

Sample Input 1

1 3 3
AAaA

Sample Output 1

9

The following sequence of actions makes the string on the screen equal to AAaA in 9 milliseconds, which is the shortest possible.

- Spend Z(=3) milliseconds to press the CapsLock key.  The light on the Caps Lock key turns on.
- Spend X(=1) milliseconds to press the 'a' key.  A is appended to the string on the screen.
- Spend X(=1) milliseconds to press the 'a' key.  A is appended to the string on the screen.
- Spend Y(=3) milliseconds to press the Shift key and 'a' key simultaneously.  a is appended to the string on the screen.
- Spend X(=1) milliseconds to press the 'a' key.  A is appended to the string on the screen.

Sample Input 2

1 1 100
aAaAaA

Sample Output 2

6

Sample Input 3

1 2 4
aaAaAaaAAAAaAaaAaAAaaaAAAAA

Sample Output 3

40

Qwen2 Analysis:
The problem described above is a classic example of an optimization problem with constraints typically found in competitive programming contests or algorithmic challenges. It requires understanding how to manage resources (time) under specific conditions to achieve an optimal outcome.

**Category Prediction:**

1. **Difficulty:** The problem involves logical reasoning and careful planning which are fundamental skills needed for solving algorithmic problems, especially those requiring optimization. However, without diving into the specifics of algorithms or data structures involved, it's hard to gauge whether this would be considered easy, medium, or hard by contest standards. Given the constraints (especially involving time limits X, Y, Z), it leans towards being more challenging as optimizing such systems requires efficient strategies.

2. **Required Programming Skills:** The problem focuses on logic and algorithmic thinking rather than specific programming language features or complex data structures like trees or graphs. Therefore, this would require proficiency in at least one common language that supports basic operations (like reading input, performing arithmetic calculations), along with a good understanding of the underlying algorithm.

3. **Complexity:** The complexity of solving such problems lies more in devising an efficient strategy rather than implementing complex logic or structures. This is typically considered medium to high complexity in terms of algorithms requiredâ€”mainly focusing on greedy strategies or dynamic programming, depending on how one approaches modeling the problem space and determining optimal actions based on given constraints.

In summary, this type of problem would likely be categorized as Medium-Hard difficulty for competitive programming contests due to its focus on algorithmic strategy, optimization under specific conditions, and requiring careful planning and execution. The core skills needed are logical reasoning, understanding and applying appropriate algorithms (such as dynamic programming or greedy approaches), and efficient resource management.

To solve it efficiently:

1. **Understanding Input:** You need to understand that you can change the case of 'a' based on Caps Lock status with specific actions and that each action takes a certain amount of time.
2. **State Transition Modeling:** Define states that could represent different combinations of Caps Lock light being on/off and the current character (A or a).
3. **Optimization Strategy:** Decide whether it's more efficient to make a direct change in case by pressing 'a' followed by Caps Lock or if pressing Shift is faster based on transitions between states.
4. **Algorithmic Solution:** Implement either dynamic programming to store previous results for optimization, or use greedy strategy if the problem guarantees that local optimal choices lead to global optimality.

For an actual code solution, one would typically iterate through each character of string S and calculate minimum time using above logic, taking into account the costs X, Y, Z associated with pressing keys. This involves creating algorithms to efficiently evaluate different paths through states transitions based on current state and actions taken so far.

The solution process thus combines algorithmic design (including understanding dynamic programming principles), careful handling of constraints, and an intuitive grasp for when it's more efficient to perform certain actions over others given the time costs involved.

This matches a medium-hard category considering the above criteria: requires strategic thinking about resource allocation, state transitions, and optimization techniques often seen in competitive programming contexts.
