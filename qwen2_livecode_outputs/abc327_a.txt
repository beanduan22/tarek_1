Problem ID: abc327_a
Problem Content:
You are given a string S of length N consisting of lowercase English letters.
If there are any adjacent occurrences of a and b in S, print Yes; otherwise, print No. (The order of a and b does not matter.)

Input

The input is given from Standard Input in the following format:
N
S

Output

If there are any adjacent occurrences of a and b in S, print Yes; otherwise, print No.

Constraints


- 2 \leq N \leq 100
- S is a string of length N consisting of lowercase English letters.

Sample Input 1

3
abc

Sample Output 1

Yes

The string abc has a as the first character and b as the second character, which are adjacent. Thus, print Yes.

Sample Input 2

2
ba

Sample Output 2

Yes

The string ba has a as the second character and b as the first character, which are adjacent. (Note that the order of a and b does not matter.)

Sample Input 3

7
atcoder

Sample Output 3

No

Qwen2 Analysis:
The problem described above is relatively straightforward to solve using basic string processing techniques. Let's break down how we might approach this:

1. **Problem Understanding**: The task involves checking if any two adjacent characters in a given string are the same (regardless of their order).

2. **Solution Strategy**:
   - Iterate through the given string.
   - Check every two consecutive characters to see if they match.

3. **Data Types and Complexity**:
   - We'll likely use a `string` data type for input processing.
   - The primary loop is linear (`O(N)`), where N is the length of the string.
   - Additional checks are constant time operations, so this doesn't affect overall complexity.

4. **Required Skills**: Basic knowledge of string handling and control flow (loops, conditional statements) should suffice.

5. **Category Prediction**: This problem falls under the category of 'Easy' or 'Medium-Easy', based on its simplicity to understand and implement using fundamental programming concepts without requiring advanced techniques or data structures.

6. **Key Takeaways**:
   - It demonstrates the importance of iterating through strings.
   - It illustrates how to compare elements in an array (or string) by checking adjacent positions.
   - This problem helps reinforce the understanding of basic algorithmic logic and data structure manipulation skills without overwhelming complexity.

Given these points, this would likely be classified as a beginner or intermediate level problem in terms of programming challenge categories.
