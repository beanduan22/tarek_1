Problem ID: 1883_C
Problem Content:
You are given an array of integers $a_1, a_2, \ldots, a_n$ and a number $k$ ($2 \leq k \leq 5$). In one operation, you can do the following:


-  Choose an index $1 \leq i \leq n$,
-  Set $a_i = a_i + 1$.Find the minimum number of operations needed to make the product of all the numbers in the array $a_1 \cdot a_2 \cdot \ldots \cdot a_n$ divisible by $k$.

Input

Each test consists of multiple test cases. The first line contains a single integer $t$ ($1 \leq t \leq 10^4$) — the number of test cases. Then follows the description of the test cases.

The first line of each test case contains two integers $n$ and $k$ ($2 \leq n \leq 10^5$, $2 \leq k \leq 5$) — the size of the array $a$ and the number $k$.

The second line of each test case contains $n$ integers $a_1, a_2, \ldots, a_n$ ($1 \leq a_i \leq 10$).

It is guaranteed that the sum of $n$ over all test cases does not exceed $2 \cdot 10^5$.

Output

For each test case, output the minimum number of operations needed to make the product of all the numbers in the array divisible by $k$.Sample Input 1:
15

2 5

7 3

3 3

7 4 1

5 2

9 7 7 3 9

5 5

5 4 1 2 3

7 4

9 5 1 5 9 5 1

3 4

6 3 6

3 4

6 1 5

3 4

1 5 9

4 4

1 4 1 1

3 4

3 5 3

4 5

8 9 9 3

2 5

1 6

2 5

10 10

4 5

1 6 1 1

2 5

7 7



Sample Output 1:

2
2
1
0
2
0
1
2
0
1
1
4
0
4
3


Note

In the first test case, we need to choose the index $i = 2$ twice. After that, the array will be $a = [7, 5]$. The product of all the numbers in the array is $35$.

In the fourth test case, the product of the numbers in the array is $120$, which is already divisible by $5$, so no operations are needed.

In the eighth test case, we can perform two operations by choosing $i = 2$ and $i = 3$ in any order. After that, the array will be $a = [1, 6, 10]$. The product of the numbers in the array is $60$.

Qwen2 Analysis:
The problem presented here involves a combination of number theory concepts (divisibility by certain integers), dynamic programming, or mathematical insights to minimize operations. It requires understanding how numbers can be manipulated through addition under specific constraints to achieve a desired condition (multiples). 

### Difficulty Level:

Given that the operation is focused on incrementing elements in an array until their product becomes divisible by a fixed integer (`k`), this problem introduces a medium-to-high difficulty level for algorithmic challenges. It requires not only programming skills but also logical reasoning and optimization techniques.

### Required Programming Skills:

- **Understanding of Array Manipulations**: The ability to iterate over arrays, modify elements in place, and track changes efficiently.
  
- **Divisibility and Modular Arithmetic**: Knowledge on how numbers behave under operations like addition and multiplication modulo `k`, which can be crucial for optimizing the solution or understanding its limits.

- **Dynamic Programming (Optional)**: While not explicitly mentioned as a requirement, some optimizations might involve dynamic programming techniques to store intermediate results and avoid recalculating them, especially in scenarios where multiple queries are expected on the same input array (as implied by the description of 'multiple test cases' per input).

### Complexity:

The solution space could range from linear (`O(n*k)`) if brute force is used to exponential (`O(2^n)`), depending on how one chooses to solve it. An optimized approach might involve calculating the frequency distribution of remainders modulo `k` for each element in the array and determining the minimum number of operations required based on these distributions, aiming for a better complexity.

### Category Prediction:

This problem leans heavily towards **Algorithm Optimization** and **Number Theory**, with hints pointing towards either **Dynamic Programming** or **Mathematical Insight** solutions. It might be categorized under:

1. **Advanced Algorithm Design**: Highlighting the need to efficiently manipulate numbers and their states (in this case, divisibility by `k`) through operations.
2. **Competitive Programming Challenges**: Often found in platforms like Codeforces, LeetCode or similar sites where complex number manipulations and optimizations are common themes.

Overall, solving such a problem requires careful consideration of how each operation impacts the product's divisibility by `k` and potentially leveraging mathematical properties to minimize this impact efficiently. The use of dynamic programming might not be directly necessary but could be an insightful approach in some implementations for optimization.
