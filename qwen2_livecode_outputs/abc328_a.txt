Problem ID: abc328_a
Problem Content:
There is a programming contest with N problems. For each i = 1, 2, \ldots, N, the score for the i-th problem is S_i.
Print the total score for all problems with a score of X or less.

Input

The input is given from Standard Input in the following format:
N X
S_1 S_2 \ldots S_N

Output

Print the answer.

Constraints


- All input values are integers.
- 4 \leq N \leq 8
- 100 \leq S_i \leq 675
- 100 \leq X \leq 675

Sample Input 1

6 200
100 675 201 200 199 328

Sample Output 1

499

Three problems have a score of 200 or less: the first, fourth, and fifth, for a total score of S_1 + S_4 + S_5 = 100 + 200 + 199 = 499.

Sample Input 2

8 675
675 675 675 675 675 675 675 675

Sample Output 2

5400

Sample Input 3

8 674
675 675 675 675 675 675 675 675

Sample Output 3

0

Qwen2 Analysis:
This problem appears to be of moderate difficulty in terms of algorithmic thinking and computational skills. It requires understanding basic input/output operations, array manipulation, and arithmetic operations with integers.

The necessary skills for solving this problem include:

1. **Input Handling**: Reading integer arrays from the standard input stream.
2. **Algorithm Design**: Implementing an efficient method to calculate the sum of scores that are less than or equal to a given threshold X. This involves iterating over the array and summing up the qualifying elements.
3. **Efficiency**: Ensuring the solution is optimized for time complexity, considering constraints such as N â‰¤ 8.

The problem can be categorized under topics like "Array Processing", "Summation Problems", or "Threshold-Based Calculations". It requires a straightforward linear scan through the array with basic arithmetic operations and conditional logic to identify qualifying elements. This falls into the category of problems that might typically appear in an introductory programming course or as part of the training for coding competitions focusing on basic algorithmic understanding.

The solution would involve:
1. Reading N, X and the array S.
2. Iterating through each element `S_i` in the array.
3. Checking if `S_i <= X`. If true, add it to a running sum variable.
4. After iterating through all elements, print out the total sum calculated.

This type of problem is good for reinforcing skills like iteration control structures (loops), conditionals (`if` statements), and basic arithmetic operations in programming languages.
