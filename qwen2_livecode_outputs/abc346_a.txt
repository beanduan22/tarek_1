Problem ID: abc346_a
Problem Content:
You are given N integers A_1, A_2, \dots, A_N.
Also, define B_i = A_i \times A_{i+1}\ (1 \leq i \leq N-1).
Print B_1, B_2, \dots, B_{N-1} in this order, separated by spaces.

Input

The input is given from Standard Input in the following format:
N
A_1 A_2 \dots A_N

Output

Print B_1, B_2, \dots, B_{N-1} in this order, separated by spaces.

Constraints


- 2 \leq N \leq 100
- 1 \leq A_i \leq 100
- All input values are integers.

Sample Input 1

3
3 4 6

Sample Output 1

12 24

We have B_1 = A_1 \times A_2 = 12, B_2 = A_2 \times A_3 = 24.

Sample Input 2

5
22 75 26 45 72

Sample Output 2

1650 1950 1170 3240

Qwen2 Analysis:
The programming problem described above falls under the category of "Beginner to Intermediate" in terms of difficulty. The requirements include basic arithmetic operations (multiplication) and sequence handling, which are fundamental concepts that most beginner programmers would learn early on in their education.

**Required Programming Skills:**

1. **Basic Input Handling:** The ability to read data from the standard input is a common skill needed for almost any programming problem.
2. **Array or List Manipulation:** Working with arrays or lists is necessary, as you need to store and process multiple values of `A_i`.
3. **Looping Constructs:** You'll need to use loops (likely for loops) to iterate through the input data sequence (`A_i`) and perform calculations on adjacent elements.
4. **Arithmetic Operations:** The problem requires multiplication operation which is straightforward but essential.

**Complexity:**

- **Time Complexity:** The time complexity will be O(N), assuming a single pass through the array where N is the number of inputs.
- **Space Complexity:** Since we are only storing input data and output data, space complexity can also be considered as O(N).

The problem emphasizes understanding how to handle sequences (in this case, adjacent elements in an integer sequence) and basic operations on them. This is a typical type of question used for initial programming exercises or coding interviews that aim to assess foundational skills.

Given the constraints:
- `2 <= N <= 100`
- `1 <= A_i <= 100`

These bounds ensure that the problem can be solved efficiently within reasonable computational resources and time, making it suitable for a wide range of beginners looking to practice their basic programming skills.
