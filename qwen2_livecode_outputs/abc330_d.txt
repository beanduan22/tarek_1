Problem ID: abc330_d
Problem Content:
You are given an N \times N grid. Let (i,j) denote the cell in the i-th row from the top and the j-th column from the left.
The states of the cells are given by N strings of length N, S_1, S_2, \dots, S_N, in the following format:

- If the j-th character of S_i is o, there is an o written in cell (i,j).
- If the j-th character of S_i is x, there is an x written in cell (i,j).

Find the number of triples of cells that satisfy all of the following conditions:

- The three cells in the triple are distinct.
- All three cells have an o written in them.
- Exactly two of the cells are in the same row.
- Exactly two of the cells are in the same column.

Here, two triples are considered different if and only if some cell is contained in exactly one of the triples.

Input

The input is given from Standard Input in the following format:
N
S_1
S_2
\vdots
S_N

Output

Print the answer as an integer.

Constraints


- N is an integer between 2 and 2000, inclusive.
- S_i is a string of length N consisting of o and x.

Sample Input 1

3
ooo
oxx
xxo

Sample Output 1

4

The following four triples satisfy the conditions:

- (1,1),(1,2),(2,1)
- (1,1),(1,3),(2,1)
- (1,1),(1,3),(3,3)
- (1,2),(1,3),(3,3)

Sample Input 2

4
oxxx
xoxx
xxox
xxxo

Sample Output 2

0

Sample Input 3

15
xooxxooooxxxoox
oxxoxoxxxoxoxxo
oxxoxoxxxoxoxxx
ooooxooooxxoxxx
oxxoxoxxxoxoxxx
oxxoxoxxxoxoxxo
oxxoxooooxxxoox
xxxxxxxxxxxxxxx
xooxxxooxxxooox
oxxoxoxxoxoxxxo
xxxoxxxxoxoxxoo
xooxxxooxxoxoxo
xxxoxxxxoxooxxo
oxxoxoxxoxoxxxo
xooxxxooxxxooox

Sample Output 3

2960

Qwen2 Analysis:
The given programming problem is a medium to high difficulty level question that requires a combination of understanding of matrix/grid manipulation and application of combinatorics. The primary skills needed are logical reasoning, algorithmic thinking, familiarity with string or character array handling in the programming language of choice, as well as knowledge about counting techniques and possibly nested loops for iterating over different possibilities.

The problem deals with:
1. **Matrix/2D Grid Operations**: Working with a grid where each cell can have specific states (in this case 'o'/'x') is a common theme found in competitive programming problems.
2. **String Handling**: Processing strings to extract information about the rows and columns efficiently.
3. **Combinatorics for Counting**: Calculating combinations of different possibilities based on certain conditions, which requires understanding of combinatorial mathematics.

The problem likely involves:
- **Iterative Logic**: To go through each row in the matrix and check every cell if it contains 'o'.
- **Nested Loops**: For checking pairs of cells within a row to ensure they both have an 'o' and are distinct.
- **Conditional Checks**: Ensuring that exactly two of the triples belong to the same row or column based on the problem's conditions.

The problem category would typically fall under "Algorithms" with subcategories like:
- **Dynamic Programming** (for more complex scenarios requiring state transitions)
- **Greedy Algorithms** (if there is a straightforward way to make locally optimal choices)
- **Backtracking** (though not clearly mentioned here, it could be considered for exploring all possible combinations)
- **Mathematics and Combinatorics** due to the requirement of counting specific patterns within constraints

To solve this problem efficiently:
1. Iterate through each row in the grid.
2. For each 'o' found, use nested loops or recursive function calls (if using backtracking) to find other 'o's within the same row and column that satisfy the conditions.
3. Count unique triples meeting all criteria by ensuring no cell is repeated across different triples.

This categorization provides insights into not only solving the problem but also hints at possible approaches, such as using iterative methods for straightforward scenarios or backtracking (which requires more computational resources) depending on optimization needs and time constraints in a competition setting.
