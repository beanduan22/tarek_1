Problem ID: abc314_d
Problem Content:
You are given a string S of length N consisting of uppercase and lowercase English letters.
Let us perform Q operations on the string S.
The i-th operation (1\leq i\leq Q) is represented by a tuple (t _ i,x _ i,c _ i) of two integers and one character, as follows.

- If t _ i=1, change the x _ i-th character of S to c _ i.
- If t _ i=2, convert all uppercase letters in S to lowercase (do not use x _ i,c _ i for this operation).
- If t _ i=3, convert all lowercase letters in S to uppercase (do not use x _ i,c _ i for this operation).

Print the S after the Q operations.

Input

The input is given from Standard Input in the following format:
N
S
Q
t _ 1 x _ 1 c _ 1
t _ 2 x _ 2 c _ 2
\vdots
t _ Q x _ Q c _ Q

Output

Print the answer in a single line.

Constraints


- 1\leq N\leq5\times10^5
- S is a string of length N consisting of uppercase and lowercase English letters.
- 1\leq Q\leq5\times10^5
- 1\leq t _ i\leq3\ (1\leq i\leq Q)
- If t _ i=1, then 1\leq x _ i\leq N\ (1\leq i\leq Q).
- c _ i is an uppercase or lowercase English letter.
- If t _ i\neq 1, then x _ i=0 and c _ i= 'a'.
- N,Q,t _ i,x _ i are all integers.

Sample Input 1

7
AtCoder
5
1 4 i
3 0 a
1 5 b
2 0 a
1 4 Y

Sample Output 1

atcYber

Initially, the string S is AtCoder.

- The first operation changes the 4-th character to i, changing S to AtCider.
- The second operation converts all lowercase letters to uppercase, changing S to ATCIDER.
- The third operation changes the 5-th character to b, changing S to ATCIbER.
- The fourth operation converts all uppercase letters to lowercase, changing S to atciber.
- The fifth operation changes the 4-th character to Y, changing S to atcYber.

After the operations, the string S is atcYber, so print atcYber.

Sample Input 2

35
TheQuickBrownFoxJumpsOverTheLazyDog
10
2 0 a
1 19 G
1 13 m
1 2 E
1 21 F
2 0 a
1 27 b
3 0 a
3 0 a
1 15 i

Sample Output 2

TEEQUICKBROWMFiXJUGPFOVERTBELAZYDOG

Qwen2 Analysis:
The problem described above is categorized under Data Structures and Algorithms with a medium-difficulty level. 

### Key Components:

1. **Input Processing**: The input consists of strings and integer values, suggesting that string manipulation plays a crucial role in the solution.

2. **Dynamic Changes**: The operations to change characters in the string based on conditions indicate a need for dynamic programming or careful state management to handle changes efficiently.

3. **Case Sensitivity Handling**: The inclusion of both uppercase and lowercase conversions requires understanding of character case transformations, which can be considered basic but important aspects of text processing languages like Python or C++.

4. **Query Processing**: The problem involves multiple operations applied sequentially on a string, hinting that it might benefit from an iterative approach where each operation is executed step-by-step.

### Programming Skills Required:

- **String Manipulation**: Ability to access and modify characters in strings.
- **Loop Structures**: Implementing loops to iterate through the queries or characters as required.
- **Conditional Logic**: Writing conditions to handle different types of operations (changing a specific character, converting all cases, etc.).

### Complexity Analysis:

The problem has constraints on string length (`N`) and operation count (`Q`), which can be up to `5*10^5`. The main complexity comes from iterating over the input string and performing updates based on each query. Efficient handling of these operations without exceeding time or memory limits is crucial.

### Algorithmic Approach:

A potential algorithm might involve:
- Storing operations in a list or array where each operation has a type (`t_i`) and parameters.
- A main loop that iterates through the operations, applying them to the string accordingly. 
- Using additional data structures (like sets for case-sensitive manipulation) could optimize specific transformations.

### Conclusion:

This problem tests skills in efficient text processing, state management for dynamic changes, and possibly optimization techniques like avoiding unnecessary full-string scans or maintaining auxiliary states that can reduce computation time. It is suitable for candidates who have a good grasp of basic string operations in their programming language of choice and are comfortable with iterative problem-solving strategies.
