Problem ID: abc332_b
Problem Content:
AtCoder Inc. sells glasses and mugs.
Takahashi has a glass with a capacity of G milliliters and a mug with a capacity of M milliliters.
Here, G<M.
Initially, both the glass and the mug are empty.
After performing the following operation K times, determine how many milliliters of water are in the glass and the mug, respectively.

- When the glass is filled with water, that is, the glass contains exactly G milliliters of water, discard all the water from the glass.
- Otherwise, if the mug is empty, fill the mug with water.
- Otherwise, transfer water from the mug to the glass until the mug is empty or the glass is filled with water.

Input

The input is given from Standard Input in the following format:
K G M

Output

Print the amounts, in milliliters, of water in the glass and the mug, in this order, separated by a space, after performing the operation K times.

Constraints


- 1\leq K\leq 100
- 1\leq G<M\leq 1000
- G, M, and K are integers.

Sample Input 1

5 300 500

Sample Output 1

200 500

The operation will be performed as follows. Initially, both the glass and the mug are empty.

- Fill the mug with water. The glass has 0 milliliters, and the mug has 500 milliliters of water.
- Transfer water from the mug to the glass until the glass is filled. The glass has 300 milliliters, and the mug has 200 milliliters of water.
- Discard all the water from the glass. The glass has 0 milliliters, and the mug has 200 milliliters of water.
- Transfer water from the mug to the glass until the mug is empty. The glass has 200 milliliters, and the mug has 0 milliliters of water.
- Fill the mug with water. The glass has 200 milliliters, and the mug has 500 milliliters of water.

Thus, after five operations, the glass has 200 milliliters, and the mug has 500 milliliters of water.
Hence, print 200 and 500 in this order, separated by a space.

Sample Input 2

5 100 200

Sample Output 2

0 0

Qwen2 Analysis:
The problem described involves logic, state transitions, and basic arithmetic operations to determine water levels in two containers (a glass and a mug) after performing a series of defined operations K times. The core challenge lies in understanding the sequence of actions and how they impact the final states of both containers.

**Category Prediction:**

1. **Difficulty**: Moderate
   - The problem requires some insight into programming logic, specifically focusing on conditions under which certain actions are performed.
   - It involves iterating over a specific number of operations (K times), making it suitable for beginners to intermediate programmers who understand basic loops and conditionals in any language.

2. **Required Programming Skills**:
   - Basic knowledge of variables and data types
   - Understanding and implementing loop constructs like `for` or `while`
   - Conditional logic (`if`, `else`) to make decisions based on current states
   - Performing arithmetic operations (addition, subtraction)

3. **Complexity**: Moderate
   - The problem's complexity arises from the need to keep track of water levels in two different containers simultaneously and performing state transitions based on a set of predefined rules.
   - It requires careful consideration of edge cases where one container might be emptied before another reaches its limit.

Given these factors, I would classify this problem as **MEDIUM** difficulty level. It is suitable for beginners who are learning programming concepts but does not involve advanced algorithms or data structures that might challenge more experienced programmers.

The solution to the problem involves iterating through each operation (K times), updating water levels based on defined rules until no more operations can be performed, and then outputting the final states of the glass and mug. This process emphasizes the importance of structured programming practices like defining clear variables for state representation, implementing logic flow with loops and conditionals, and debugging small issues that might arise from misinterpreting problem constraints or conditions.

To solve this problem algorithmically:

1. Initialize variables `glass_capacity`, `mug_capacity`, `operations_to_perform`, representing G (glass capacity), M (mug capacity), K respectively.
2. Start a loop to iterate through each operation (`K` times).
3. Within the loop, check if pouring water from mug fills the glass or emptying glass into mug empties the mug first by comparing capacities and current water levels in both containers.
4. Based on these conditions, adjust water levels accordingly until no more operations can be performed based on the rules defined in the problem statement.
5. After `K` iterations (end of loop), output final states for both containers.

This approach encapsulates essential programming skills such as iterative processing, condition evaluation, and variable manipulation, making it a practical exercise for learning these concepts within a controlled and well-defined context.
