Problem ID: abc318_a
Problem Content:
Takahashi likes full moons.
Let today be day 1. The first day on or after today on which he can see a full moon is day M. After that, he can see a full moon every P days, that is, on day M+P, day M+2P, and so on.
Find the number of days between day 1 and day N, inclusive, on which he can see a full moon.

Input

The input is given from Standard Input in the following format:
N M P

Output

Print the answer as an integer.

Constraints


- 1\leq N\leq 2\times 10^5
- 1\leq M \leq P \leq 2\times 10^5
- All input values are integers.

Sample Input 1

13 3 5

Sample Output 1

3

He can see a full moon on day 3, 8, 13, 18, and so on.
From day 1 to 13, he can see a full moon on three days: day 3, 8, and 13.

Sample Input 2

5 6 6

Sample Output 2

0

There may be no days he can see a full moon.

Sample Input 3

200000 314 318

Sample Output 3

628

Qwen2 Analysis:
The given problem seems to be a classic algorithmic problem that involves basic mathematics and linear progression. Based on the constraints provided, we can determine several things about the requirements of this task:

1. **Time Complexity**: The problem deals with iterating through days from 1 to N (up to approximately 200,000 iterations). This suggests an iterative algorithm might be required.

2. **Space Complexity**: No additional data structures are mentioned that require large amounts of memory outside of the input itself (N, M, and P).

3. **Problem Nature**:
    - It involves a specific mathematical sequence related to days that coincide with full moons.
    - The problem likely requires understanding of arithmetic sequences or linear progression since it asks for calculating the number of days within a given range when certain conditions are met.

4. **Required Programming Skills**: Basic programming skills such as loop control, variable initialization, and conditional logic would be necessary.

5. **Category**:
   - Based on these elements, this problem could fit into several categories like "Mathematical Algorithms", "Basic Programming Challenges", or perhaps "Sequence and Series Problems". Given the constraints (up to 200k iterations), it's likely more of a Basic Programming Challenge or an exercise in understanding sequences.

**Problem Solving Strategy**:

1. Initialize a variable `full_moon_count` to keep track of how many full moons have occurred between day `1` and day `N`.
2. Start iterating from `day = M` because that is the first day he can see a full moon.
3. Increment `day` by `P` for each subsequent full moon occurrence, since they happen every `P` days after `M`.
4. Each time we land on or exceed `N`, we stop counting as there are no more days to consider.
5. The final value of `full_moon_count` would be the answer.

This problem does not require any complex data structures or advanced algorithms beyond basic arithmetic and iteration. Therefore, it aligns well with "Basic Programming Challenges" that focus on algorithmic thinking without requiring knowledge of advanced data structures or dynamic programming techniques.
