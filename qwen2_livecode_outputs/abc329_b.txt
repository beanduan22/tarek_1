Problem ID: abc329_b
Problem Content:
You are given N integers A_1, A_2, \ldots, A_N. Find the largest among those integers that are not the largest.
The constraints of this problem guarantee that the answer exists.

Input

The input is given from Standard Input in the following format:
N
A_1 A_2 \ldots A_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 100
- 1 \leq A_i \leq 100
- It is not the case that all A_1, A_2, \ldots, A_N are equal.
- All input values are integers.

Sample Input 1

5
2 1 3 3 2

Sample Output 1

2

The largest integer among 2,1,3,3,2 is 3.
The integers that are not 3 among 2,1,3,3,2 are 2,1,2, among which the largest is 2.

Sample Input 2

4
4 3 2 1

Sample Output 2

3

Sample Input 3

8
22 22 18 16 22 18 18 22

Sample Output 3

18

Qwen2 Analysis:
The provided problem can be categorized as an easy-level algorithmic problem that involves basic sorting techniques in computer science. Here's a breakdown of the attributes you've mentioned:

**Difficulty**: The problem is relatively straightforward and does not require advanced algorithms or complex data structures to solve. It falls under the "easy" category for beginners.

**Required Programming Skills**: Basic programming skills are sufficient, including familiarity with loops (for/while), arrays, basic arithmetic operations, and conditional statements. It assumes that the programmer knows how to read input from standard input and output results as specified.

**Complexity**: The time complexity of this problem is \(O(N)\) since it requires a single pass through all the elements in the array at most once (to find both the maximum element and then again to find the second largest). Space complexity is \(O(1)\), assuming we do not count input/output data size, as only constant space for variables would be used.

The nature of this problem aligns well with learning and practicing basic algorithms and understanding fundamental concepts in computer science. It encourages a step-by-step approach: first identifying the maximum element, then scanning through the list again to find the next highest number that isn't the largest. This kind of logic is quite intuitive and straightforward to implement.

In summary, this problem targets foundational skills and is suitable for learners transitioning from basic programming concepts towards more complex algorithms. It's a good exercise for reinforcing understanding of loops, variables, and sorting in the context of real-world scenarios.
