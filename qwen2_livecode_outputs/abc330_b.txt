Problem ID: abc330_b
Problem Content:
You are given an integer sequence A=(A_1,A_2,\ldots,A_N) of length N and integers L and R such that L\leq R.
For each i=1,2,\ldots,N, find the integer X_i that satisfies both of the following conditions. Note that the integer to be found is always uniquely determined.

- L\leq X_i \leq R.
- For every integer Y such that L \leq Y \leq R, it holds that |X_i - A_i| \leq |Y - A_i|.

Input

The input is given from Standard Input in the following format:
N L R
A_1 \ldots A_N

Output

Print X_i for i=1,2,\ldots,N, separated by spaces.

Constraints


- 1\leq N\leq 2\times 10^5
- 1\leq L\leq R \leq 10^9
- 1\leq A_i\leq 10^9
- All input values are integers.

Sample Input 1

5 4 7
3 1 4 9 7

Sample Output 1

4 4 4 7 7

For i=1:

- |4-3|=1
- |5-3|=2
- |6-3|=3
- |7-3|=4

Thus, X_i = 4.

Sample Input 2

3 10 10
11 10 9

Sample Output 2

10 10 10

Qwen2 Analysis:
Based on the description of the problem:

- The problem involves processing an integer sequence `A` of length `N`, along with two integers `L` and `R`. It requires finding for each element in `A` a number that satisfies specific conditions based on given constraints.

- The solution process involves iterating over the elements, calculating distances to each value within bounds `L` and `R`, and selecting the optimal value based on minimizing this distance. This implies an understanding of basic algorithms related to searching or sorting might be involved.

- The input size is relatively large (`N` can be up to `2 * 10^5`) which suggests the solution should have reasonable time complexity, possibly O(N) since we iterate over each element in the sequence exactly once. This indicates familiarity with efficient data structures and algorithms like linear traversal or basic sorting could suffice.

- The problem requires the computation of absolute differences between elements of `A` and possible values within specified bounds (`L` to `R`). This involves arithmetic operations (absolute value calculations) which is straightforward but must be handled correctly given large input ranges.

Given these points, I would categorize this problem as:

**Category:** **Intermediate Algorithm Problem**

- **Required Programming Skills**: Basic programming knowledge with an emphasis on understanding and applying linear time complexity algorithms like simple sorting or iterative processes.
  
- **Difficulty Level**: Moderately challenging due to the need for careful computation of distances (absolute values) and ensuring that solutions are within bounds. It requires attention to detail.

- **Complexity**: Low in terms of data structure complexity, but high in terms of potential edge cases related to arithmetic operations on large numbers or handling large input sizes efficiently.

This categorization aligns with the typical expectations for a college-level computer science course focusing on algorithm design and analysis, bridging between introductory concepts like sorting algorithms and more complex challenges involving array manipulation and computational constraints.
