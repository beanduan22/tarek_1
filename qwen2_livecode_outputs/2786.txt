Problem ID: 2786
Problem Content:
You are given a 0-indexed string s that consists of digits from 0 to 9.
A string t is called a semi-repetitive if there is at most one consecutive pair of the same digits inside t. For example, 0010, 002020, 0123, 2002, and 54944 are semi-repetitive while 00101022, and 1101234883 are not.
Return the length of the longest semi-repetitive substring inside s.
A substring is a contiguous non-empty sequence of characters within a string.
 
Example 1:

Input: s = "52233"
Output: 4
Explanation: The longest semi-repetitive substring is "5223", which starts at i = 0 and ends at j = 3. 

Example 2:

Input: s = "5494"
Output: 4
Explanation: s is a semi-reptitive string, so the answer is 4.

Example 3:

Input: s = "1111111"
Output: 2
Explanation: The longest semi-repetitive substring is "11", which starts at i = 0 and ends at j = 1.

 
Constraints:

1 <= s.length <= 50
'0' <= s[i] <= '9'

Qwen2 Analysis:
The given problem can be categorized under the following aspects:

**Difficulty**: Medium. The problem requires understanding string manipulation, iteration through a sequence, condition checks, and keeping track of certain information (like lengths of semi-repetitive substrings).

**Required Programming Skills**: 
1. **String Processing**: Ability to iterate over each character in the string.
2. **Condition Checking**: Logic to identify when two consecutive characters are equal (indicating a pair) versus when they differ.
3. **Dynamic Problem Solving**: Requires storing and updating information related to semi-repetitive substrings, like their lengths.

**Complexity**:
1. **Time Complexity**: The solution involves iterating through each character of the string once in worst case scenario, making it O(n), where n is the length of the string.
2. **Space Complexity**: If we consider the space used for storing the current semi-repetitive substring, then the space complexity would be O(1). Otherwise, if a more detailed structure (like a stack) to keep track of previous characters was used, it could also be considered as O(n).

In summary, this problem combines string processing and basic algorithmic concepts in a slightly tricky way by introducing the notion of "semi-repetitive" which needs careful checking. The solution likely involves looping over each character and using simple condition checks to determine if the current substring is semi-repetitive or not.

This question tests your ability to write clean code, handle edge cases (such as all characters being identical), understand string manipulation techniques and maintain a running count of semi-repetitive segments effectively.
