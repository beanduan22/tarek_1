Problem ID: abc332_d
Problem Content:
You are given two grids, A and B, each with H rows and W columns.
For each pair of integers (i, j) satisfying 1 \leq i \leq H and 1 \leq j \leq W, let (i, j) denote the cell in the i-th row and j-th column. In grid A, cell (i, j) contains the integer A_{i, j}. In grid B, cell (i, j) contains the integer B_{i, j}.
You will repeat the following operation any number of times, possibly zero. In each operation, you perform one of the following:

- Choose an integer i satisfying 1 \leq i \leq H-1 and swap the i-th and (i+1)-th rows in grid A.
- Choose an integer i satisfying 1 \leq i \leq W-1 and swap the i-th and (i+1)-th columns in grid A.

Determine whether it is possible to make grid A identical to grid B by repeating the above operation. If it is possible, print the minimum number of operations required to do so.
Here, grid A is identical to grid B if and only if, for all pairs of integers (i, j) satisfying 1 \leq i \leq H and 1 \leq j \leq W, the integer written in cell (i, j) of grid A is equal to the integer written in cell (i, j) of grid B.

Input

The input is given from Standard Input in the following format:
H W
A_{1, 1} A_{1, 2} \cdots A_{1, W}
A_{2, 1} A_{2, 2} \cdots A_{2, W}
\vdots
A_{H, 1} A_{H, 2} \cdots A_{H, W}
B_{1, 1} B_{1, 2} \cdots B_{1, W}
B_{2, 1} B_{2, 2} \cdots B_{2, W}
\vdots
B_{H, 1} B_{H, 2} \cdots B_{H, W}

Output

If it is impossible to make grid A identical to grid B, output -1. Otherwise, print the minimum number of operations required to make grid A identical to grid B.

Constraints


- All input values are integers.
- 2 \leq H, W \leq 5
- 1 \leq A_{i, j}, B_{i, j} \leq 10^9

Sample Input 1

4 5
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
1 3 2 5 4
11 13 12 15 14
6 8 7 10 9
16 18 17 20 19

Sample Output 1

3

Swapping the fourth and fifth columns of the initial grid A yields the following grid:
1 2 3 5 4
6 7 8 10 9
11 12 13 15 14
16 17 18 20 19

Then, swapping the second and third rows yields the following grid:
1 2 3 5 4
11 12 13 15 14
6 7 8 10 9
16 17 18 20 19

Finally, swapping the second and third columns yields the following grid, which is identical to grid B:
1 3 2 5 4
11 13 12 15 14
6 8 7 10 9
16 18 17 20 19

You can make grid A identical to grid B with the three operations above and cannot do so with fewer operations, so print 3.

Sample Input 2

2 2
1 1
1 1
1 1
1 1000000000

Sample Output 2

-1

There is no way to perform the operation to make grid A match grid B, so print -1.

Sample Input 3

3 3
8 1 6
3 5 7
4 9 2
8 1 6
3 5 7
4 9 2

Sample Output 3

0

Grid A is already identical to grid B at the beginning.

Sample Input 4

5 5
710511029 136397527 763027379 644706927 447672230
979861204 57882493 442931589 951053644 152300688
43971370 126515475 962139996 541282303 834022578
312523039 506696497 664922712 414720753 304621362
325269832 191410838 286751784 732741849 806602693
806602693 732741849 286751784 191410838 325269832
304621362 414720753 664922712 506696497 312523039
834022578 541282303 962139996 126515475 43971370
152300688 951053644 442931589 57882493 979861204
447672230 644706927 763027379 136397527 710511029

Sample Output 4

20

Qwen2 Analysis:
The problem outlined above is a combination of several fundamental concepts in algorithmic problem solving - it involves array manipulation (swapping rows and columns), matrix comparisons, and optimization. The difficulty level can be considered medium to high depending on the specifics of implementation details and experience with similar problems.

**Category Prediction:**
1. **Difficulty Level:** It's a moderate to complex problem given that it requires systematic thinking about array manipulations and conditions for equality across matrices (grids). The constraints (small size of H, W) might suggest an approachable problem in theory but the optimization aspect suggests some complexity.
   
2. **Required Programming Skills:**
   - **Data Structures:** Basic understanding and usage of 2D arrays or matrix structures is required to represent grids A and B and perform row/column manipulations.
   - **Algorithms:** Ability to iterate over matrices and compare elements efficiently is essential, along with strategies for optimization (like determining the minimum number of operations).
   - **Optimization Techniques:** Since the constraints allow H, W â‰¤ 5, a brute-force approach might be feasible but optimizing this or finding a more efficient algorithm will depend on how quickly you can determine the required operations without actually performing each operation.

3. **Complexity:**
   - The core complexity revolves around comparing grid A with grid B to identify needed row and column swaps. This involves traversing the matrices once for initial comparison, which might be considered O(HW) if not optimized further.
   - However, determining the minimum number of operations requires a more refined approach than simple comparisons; it needs understanding how swapping rows or columns affects the grids' equality across all cells.

**Conclusion:** Given these factors - moderate difficulty level, reliance on data structures and algorithms knowledge for implementation, and focus on optimization techniques -, this problem would likely fall under the categories of **Array Manipulation**, **Dynamic Programming/Optimization**, and **Matrix/Graph Theory** depending on how you approach solving it. The specific solution might involve dynamic programming to efficiently calculate minimum operations or a systematic search with pruning based optimizations.

For instance, one could approach it by checking if grids A and B are already identical (which would imply no operations required), then checking row equalities separately from column equalities to deduce the necessary swaps. If not identical after these checks, dynamic programming might be used to keep track of minimum swap costs between states of row/column manipulations.

This problem emphasizes practical algorithmic thinking and optimization skills rather than theoretical complexity analysis since the input size is small but the approach for minimizing operations can involve deeper thought on state transitions or recursive strategies.
