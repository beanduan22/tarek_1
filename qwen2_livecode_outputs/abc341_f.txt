Problem ID: abc341_f
Problem Content:
You are given a simple undirected graph consisting of N vertices and M edges.
For i = 1, 2, \ldots, M, the i-th edge connects vertices u_i and v_i.
Also, for i = 1, 2, \ldots, N, vertex i is assigned a positive integer W_i, and there are A_i pieces placed on it.
As long as there are pieces on the graph, repeat the following operation:

- First, choose and remove one piece from the graph, and let x be the vertex on which the piece was placed.
- Choose a (possibly empty) set S of vertices adjacent to x such that \sum_{y \in S} W_y \lt W_x, and place one piece on each vertex in S.

Print the maximum number of times the operation can be performed.
It can be proved that, regardless of how the operation is performed, there will be no pieces on the graph after a finite number of iterations.

Input

The input is given from Standard Input in the following format:
N M
u_1 v_1
u_2 v_2
\vdots
u_M v_M
W_1 W_2 \ldots W_N
A_1 A_2 \ldots A_N

Output

Print the answer.

Constraints


- All input values are integers.
- 2 \leq N \leq 5000
- 1 \leq M \leq \min \lbrace N(N-1)/2, 5000 \rbrace
- 1 \leq u_i, v_i \leq N
- u_i \neq v_i
- i \neq j \implies \lbrace u_i, v_i \rbrace \neq \lbrace u_j, v_j \rbrace
- 1 \leq W_i \leq 5000
- 0 \leq A_i \leq 10^9

Sample Input 1

6 6
1 2
2 3
3 1
3 4
1 5
5 6
9 2 3 1 4 4
1 0 0 0 0 1

Sample Output 1

5

In the following explanation, let A = (A_1, A_2, \ldots, A_N) represent the numbers of pieces on the vertices.
Initially, A = (1, 0, 0, 0, 0, 1).
Consider performing the operation as follows:

- Remove one piece from vertex 1 and place one piece each on vertices 2 and 3. Now, A = (0, 1, 1, 0, 0, 1).
- Remove one piece from vertex 2. Now, A = (0, 0, 1, 0, 0, 1).
- Remove one piece from vertex 6. Now, A = (0, 0, 1, 0, 0, 0).
- Remove one piece from vertex 3 and place one piece on vertex 2. Now, A = (0, 1, 0, 0, 0, 0).
- Remove one piece from vertex 2. Now, A = (0, 0, 0, 0, 0, 0).

In this procedure, the operation is performed five times, which is the maximum possible number of times.

Sample Input 2

2 1
1 2
1 2
0 0

Sample Output 2

0

In this sample input, there are no pieces on the graph from the beginning.

Sample Input 3

10 20
4 8
1 10
1 7
5 9
9 10
8 10
7 5
1 4
7 3
8 7
2 8
5 8
4 2
5 1
7 2
8 3
3 4
8 9
7 10
2 3
25 5 1 1 16 5 98 3 21 1
35 39 32 11 35 37 14 29 36 1

Sample Output 3

1380

Qwen2 Analysis:
The provided problem involves a graph data structure and basic operations like selecting nodes, edges, performing iterations based on certain conditions, which are key elements of algorithms problems often found in contests such as LeetCode or HackerRank. 

**Category Prediction:**

**Difficulty Level:** The constraints given (N ≤ 5000 for vertices and M ≤ minimum of N(N-1)/2 or 5000 for edges) suggest that a brute force approach would be extremely inefficient, implying that the problem likely requires an optimized algorithmic solution. This hints at it being a medium to hard difficulty level.

**Required Programming Skills:** The description suggests that skills related to graph theory are required, namely understanding of graph traversal (like DFS or BFS), manipulation of graph structures, and possibly dynamic programming for optimizing iterations based on certain conditions described in the problem statement.

**Complexity:**
1. **Time Complexity:** The requirement to find a solution within reasonable time limits under given constraints suggests that an algorithm with lower complexity than O(N^3) (for brute force approaches considering every vertex combination) will be needed.
2. **Space Complexity:** An additional concern might include the space required for storing graph and auxiliary data structures during operations.

**Conclusion:**

Based on these factors, this problem is likely to fall into an intermediate to advanced level category in algorithmic problem-solving, requiring knowledge of graph theory, optimized search techniques (such as Depth-First Search or Breadth-First Search), and possibly dynamic programming strategies for optimizing the number of iterations under specific conditions. It might also involve careful management of input/output operations efficiently given constraints on vertices and edges.

Therefore, this problem would likely be categorized in a programming contest as an intermediate to hard difficulty level question that tests algorithmic skills, optimization techniques, and efficient data structure usage in solving graph-based problems.
