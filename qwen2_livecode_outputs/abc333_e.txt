Problem ID: abc333_e
Problem Content:
Takahashi will embark on an adventure.
During the adventure, N events will occur.
The i-th event (1\leq i\leq N) is represented by a pair of integers (t _ i,x _ i) (1\leq t _ i\leq 2,1\leq x _ i\leq N) and is as follows:

- If t _ i=1, he finds one potion of type x _ i. He can choose to pick it up or discard it.
- If t _ i=2, he encounters one monster of type x _ i. If he has a potion of type x _ i, he can use one to defeat the monster. If he does not defeat it, he will be defeated.

Determine whether he can defeat all the monsters without being defeated.
If he cannot defeat all the monsters, print -1.
Otherwise, let K be the maximum number of potions he has at some point during the adventure.
Let K _ {\min} be the minimum value of K across all strategies where he will not be defeated.
Print the value of K _ {\min} and the actions of Takahashi that achieve K _ {\min}.

Input

The input is given from Standard Input in the following format:
N
t _ 1 x _ 1
t _ 2 x _ 2
\vdots
t _ N x _ N

Output

If Takahashi cannot defeat all the monsters, print -1.
If he can, print the value of K _ {\min} in the first line, and in the second line, for each i such that t _ i=1 in ascending order, print 1 if he picks up the potion found at the i-th event, and 0 otherwise, separated by spaces.
If multiple sequences of actions achieve K _ {\min} and allow him to finish the adventure without being defeated, you may print any of them.

Constraints


- 1\leq N\leq2\times10^5
- 1\leq t _ i\leq2\ (1\leq i\leq N)
- 1\leq x _ i\leq N\ (1\leq i\leq N)
- All input values are integers.

Sample Input 1

13
1 2
1 3
1 1
1 3
1 2
2 3
1 3
1 3
2 3
1 3
2 2
2 3
2 1

Sample Output 1

3
1 1 1 0 0 1 0 1

The sample output corresponds to the following actions:

- Find potions of types 2,3,1 in this order. Pick up all of them.
- Find potions of types 3,2 in this order. Do not pick up any of them.
- Encounter a type-3 monster. Use one type-3 potion to defeat it.
- Find a type-3 potion. Pick it up.
- Find a type-3 potion. Do not pick it up.
- Encounter a type-3 monster. Use one type-3 potion to defeat it.
- Find a type-3 potion. Pick it up.
- Encounter a type-2 monster. Use one type-2 potion to defeat it.
- Encounter a type-3 monster. Use one type-3 potion to defeat it.
- Encounter a type-1 monster. Use one type-1 potion to defeat it.

In this sequence of actions, the value of K is 3.
There is no way to avoid defeat with K\leq 2, so the sought value of K _ {\min} is 3.
There are multiple sequences of actions that satisfy K=3 and allow him to avoid defeat; you may print any of them.

Sample Input 2

4
2 3
1 4
2 1
1 2

Sample Output 2

-1

He will inevitably be defeated by the first monster he encounters.

Sample Input 3

30
1 25
1 2
1 10
1 18
2 18
1 11
2 11
1 21
1 6
2 2
2 10
1 11
1 24
1 11
1 3
1 2
1 18
2 25
1 8
1 10
1 11
2 18
2 10
1 10
2 2
1 24
1 10
2 10
1 25
2 6

Sample Output 3

4
1 1 1 1 1 0 1 0 0 0 0 1 1 0 1 0 1 0 0 0

Qwen2 Analysis:
The given problem falls under the category of **Dynamic Programming** with a touch of **Graph Theory**, particularly focusing on managing resources (potion types) to overcome challenges (monster encounters). The problem requires understanding the sequence of events, making decisions based on available potions, and optimizing resource utilization to ensure all challenges can be successfully managed. Here's a breakdown:

### Problem Complexity
- **Time Complexity**: The naive approach could involve trying every combination of picking up or not picking up potions for each event, leading to an exponential time complexity. However, the problem requires an optimization that can achieve a better complexity through dynamic programming. This suggests a non-trivial but solvable problem based on combinatorial optimization.
- **Space Complexity**: The solution will likely involve using a few arrays or hash maps to keep track of potion usage and monster encounters, implying moderate space complexity.

### Required Programming Skills
1. **Dynamic Programming**: To optimize the decision-making process over multiple events.
2. **Graph Theory (Adjacency)**: Understanding adjacency matrices might not be directly required, but it's crucial for organizing data about which potions can defeat specific monsters efficiently.
3. **Data Structures**: Efficient use of data structures like arrays and hash maps to track potion usage and monster encounters.
4. **Algorithmic Thinking**: For optimizing the solution beyond brute force.

### Optimization Techniques
1. **Dynamic Programming State Definition**: Define states that capture crucial information about whether a potion is picked up or not, at what point in the sequence of events these decisions are made.
2. **Memoization/Bottom-Up Approach**: Implementing dynamic programming with memoization (recursively storing results of subproblems) or iteratively building solutions from smaller problems to larger ones ensures that optimal choices are made for each event based on previous outcomes.

### Conclusion
This problem is moderately complex, requiring not only knowledge of dynamic programming but also a careful approach to organizing data and structuring the algorithm. The solution involves both logical reasoning about decision-making under constraints (potion usage) and computational optimization techniques to ensure efficiency. It's ideal for participants who are familiar with basic dynamic programming concepts and can apply them to adapt to specific problem scenarios, potentially involving some creative adjustments in handling states or transitions between states.

### Recommended Approach
1. **Understand the Input Structure**: Identify how events (potion findings and monster encounters) are related.
2. **Dynamic Programming State Definition**: Define clear parameters that capture the state of potion usage post-each event decision.
3. **Recursive/Iterative DP Implementation**: Use either a recursive approach with memoization or an iterative process to build up solutions from simpler scenarios, ensuring every possible scenario is considered optimally based on resource constraints.
4. **Optimization and Output Formulation**: Ensure the dynamic programming solution efficiently computes optimal values for potion usage and monster defeat strategies.
5. **Output Processing**: Format the final answer according to the problem's requirements, including the minimum number of potions needed (`Kmin`) and a strategy that achieves this state.

By following these guidelines, one can systematically tackle the problem with confidence in understanding its underlying principles and efficiently implementing a solution.
