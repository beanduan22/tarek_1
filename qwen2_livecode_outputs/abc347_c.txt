Problem ID: abc347_c
Problem Content:
In the Kingdom of AtCoder, a week consists of A+B days, with the first through A-th days being holidays and the (A+1)-th through (A+B)-th being weekdays.
Takahashi has N plans, and the i-th plan is scheduled D_i days later.
He has forgotten what day of the week it is today. Determine if it is possible for all of his N plans to be scheduled on holidays.

Input

The input is given from Standard Input in the following format:
N A B
D_1 D_2 \ldots D_N

Output

Print Yes in a single line if it is possible for all of Takahashi's N plans to be scheduled on holidays, and No otherwise.

Constraints


- 1\leq N\leq 2\times 10^5
- 1\leq A,B\leq 10^9
- 1\leq D_1<D_2<\ldots<D_N\leq 10^9

Sample Input 1

3 2 5
1 2 9

Sample Output 1

Yes

In this input, a week consists of seven days, with the first through second days being holidays and the third through seventh days being weekdays.
Let us assume today is the seventh day of the week. In this case, one day later would be the first day of the week, two days later would be the second day of the week, and nine days later would also be the second day of the week, making all plans scheduled on holidays. Therefore, it is possible for all of Takahashi's N plans to be scheduled on holidays.

Sample Input 2

2 5 10
10 15

Sample Output 2

No

Sample Input 3

4 347 347
347 700 705 710

Sample Output 3

Yes

Qwen2 Analysis:
The problem described above falls under the category of "Algorithm" with a specific focus on "Date and Time" or "Simulation". This is because it involves logical reasoning about scheduling, dates, and time periods.

Here are several factors that categorize this problem:

1. **Difficulty Level**: The complexity of the problem isn't immediately obvious from its description, but considering the constraints (up to 200,000 plans), it suggests a need for careful handling to prevent excessive computation or memory usage. This puts the difficulty roughly at medium-hard.

2. **Required Programming Skills**:
   - **Data Structures**: Efficient use of data structures is crucial because we're dealing with large amounts of input and specific conditions based on those inputs.
   - **Mathematical Reasoning**: Understanding how to manipulate dates or time periods can involve basic arithmetic operations, but the tricky part might be relating this to a week's cycle, which requires careful logic rather than straightforward calculations.

3. **Algorithmic Complexity**:
   - The input size suggests that brute-force approaches may not be feasible due to potential timeouts or memory issues.
   - A possible approach might involve tracking the days in relation to holiday periods and adjusting for the circular nature of a week (like considering Monday as day 1, Tuesday as day 2, etc.).

Thus, this problem would likely be categorized under intermediate level problems where the focus is not only on coding skills but also understanding the underlying logic and mathematical principles involved. It might require knowledge about handling cyclic phenomena with linear data inputs or outputs.

To solve it:
- Keep track of days based on the plan's scheduled date relative to a hypothetical "today" day.
- Use modular arithmetic to handle the circular nature of days in a week.
- Ensure that all plans are scheduled either before or after the last weekday when calculating their relative positions.

The solution involves careful planning and potentially optimization techniques given the input constraints.
