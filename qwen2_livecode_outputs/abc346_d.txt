Problem ID: abc346_d
Problem Content:
You are given a string S of length N consisting of 0 and 1.
A string T of length N consisting of 0 and 1 is a good string if and only if it satisfies the following condition:

- There is exactly one integer i such that 1 \leq i \leq N - 1 and the i-th and (i + 1)-th characters of T are the same.

For each i = 1,2,\ldots, N, you can choose whether or not to perform the following operation once:

- If the i-th character of S is 0, replace it with 1, and vice versa. The cost of this operation, if performed, is C_i.

Find the minimum total cost required to make S a good string.

Input

The input is given from Standard Input in the following format:
N
S
C_1 C_2 \ldots C_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 2 \times 10^5
- S is a string of length N consisting of 0 and 1.
- 1 \leq C_i \leq 10^9
- N and C_i are integers.

Sample Input 1

5
00011
3 9 2 6 4

Sample Output 1

7

Performing the operation for i = 1, 5 and not performing it for i = 2, 3, 4 makes S = 10010, which is a good string. The cost incurred in this case is 7, and it is impossible to make S a good string for less than 7, so print 7.

Sample Input 2

4
1001
1 2 3 4

Sample Output 2

0

Sample Input 3

11
11111100111
512298012 821282085 543342199 868532399 690830957 973970164 928915367 954764623 923012648 540375785 925723427

Sample Output 3

2286846953

Qwen2 Analysis:
Based on the description provided for this problem, the following analysis and categorization can be made:

**Category: Algorithm / Dynamic Programming**

**Difficulty Level:** Medium to Hard 

**Required Programming Skills:** 
1. **Understanding of basic string manipulation**
2. **Dynamic programming techniques**: The solution might involve either dynamic programming or a greedy strategy based on how costs are accumulated over time.
3. **Handling of constraints**: Efficiently managing the input size up to \(2 \times 10^5\) and performing operations under large numbers (\(C_i\)).
4. **Mathematical Reasoning**: Calculation and comparison of different possible scenarios based on operation choices.

**Problem Complexity:**
1. **State Transition**: The dynamic programming state might involve tracking the current cost, whether we are considering making a transition to form a good string at each step (i.e., incrementing \(C_i\) if needed) or not.
2. **Optimization**: The problem requires finding the minimum total cost, indicating that optimization techniques such as pruning options and choosing states wisely are critical.
3. **Space and Time Efficiency**: Due to large input sizes, the solution should aim for space efficiency (e.g., using a 1D array) and minimize time complexity.

**Solution Strategy:**
- **Greedy Approach**: Initially, calculate prefix sums for costs \(C_i\) from both directions towards creating transitions at most once per string segment. This helps in minimizing cost.
- **Dynamic Programming**: Alternatively, use DP to track minimum costs based on whether the current position forms part of a transition or not, updating states efficiently and ensuring to backtrack properly.

**Input/Output Format:**
- **Reading Input**: Requires parsing strings and numbers accurately with attention to constraints (e.g., large integer values).
- **Output Specification**: Ensures clarity in presenting the minimum cost required.

In conclusion, this problem is categorized under Algorithm / Dynamic Programming due to its reliance on efficient state transition and optimization techniques. The challenge lies in effectively implementing these strategies given the complexity of operations and input sizes.
