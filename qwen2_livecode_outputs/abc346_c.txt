Problem ID: abc346_c
Problem Content:
You are given a sequence of positive integers A=(A_1,A_2,\dots,A_N) of length N and a positive integer K.
Find the sum of the integers between 1 and K, inclusive, that do not appear in the sequence A.

Input

The input is given from Standard Input in the following format:
N K
A_1 A_2 \dots A_N

Output

Print the answer.

Constraints


- 1\leq N \leq 2\times 10^5
- 1\leq K \leq 2\times 10^9
- 1\leq A_i \leq 2\times 10^9
- All input values are integers.

Sample Input 1

4 5
1 6 3 1

Sample Output 1

11

Among the integers between 1 and 5, three numbers, 2, 4, and 5, do not appear in A.
Thus, print their sum: 2+4+5=11.

Sample Input 2

1 3
346

Sample Output 2

6

Sample Input 3

10 158260522
877914575 24979445 623690081 262703497 24979445 1822804784 1430302156 1161735902 923078537 1189330739

Sample Output 3

12523196466007058

Qwen2 Analysis:
The problem presented appears to involve basic algorithmic techniques such as input processing, looping through sequences, set operations (in this case, finding missing numbers), arithmetic calculations, and output formatting. These are fundamental skills in competitive programming and introductory level algorithms courses.

### Difficulty Level:

- **Easy-Medium:** The constraints suggest that the solution does not require significant optimization beyond careful implementation. With a limit on \(N\) being around \(2 \times 10^5\), brute force approaches could work, given reasonable time limits for execution.

### Required Programming Skills:

- **Reading and Parsing Input:** Understanding how to read structured input data is essential.
  
- **Array/Sequence Manipulation:** Knowledge of creating and manipulating arrays or sequences of integers as you process the problem data.

- **Basic Set Operations:** Using sets to keep track of numbers that appear in sequence \(A\).

- **Arithmetic Summation:** Being able to compute a sum efficiently.

### Algorithmic Complexity:

The complexity largely depends on how well the input is processed, primarily determining how many operations are required. The solution can typically be implemented with linear time complexity (\(O(N)\)) assuming \(N\) being \(2 \times 10^5\).

### Data Structures Involved:

- **Array:** To store and process sequence \(A\).
- **Set:** For tracking numbers that appear in the sequence for quick lookups.

The problem does not involve advanced data structures or complex algorithms, making it accessible to beginners while still requiring attention to detail and efficient implementation to handle large input sizes effectively. This categorizes it as part of foundational algorithmic problems suitable for early stages of competitive programming preparation.
