Problem ID: abc352_c
Problem Content:
There are N giants, named 1 to N. When giant i stands on the ground, their shoulder height is A_i, and their head height is B_i.
You can choose a permutation (P_1, P_2, \ldots, P_N) of (1, 2, \ldots, N) and stack the N giants according to the following rules:

- 
First, place giant P_1 on the ground. The giant P_1's shoulder will be at a height of A_{P_1} from the ground, and their head will be at a height of B_{P_1} from the ground.

- 
For i = 1, 2, \ldots, N - 1 in order, place giant P_{i + 1} on the shoulders of giant P_i. If giant P_i's shoulders are at a height of t from the ground, then giant P_{i + 1}'s shoulders will be at a height of t + A_{P_{i + 1}} from the ground, and their head will be at a height of t + B_{P_{i + 1}} from the ground.


Find the maximum possible height of the head of the topmost giant P_N from the ground.

Input

The input is given from Standard Input in the following format:
N
A_1 B_1
A_2 B_2
\vdots
A_N B_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 2 \times 10^5
- 1 \leq A_i \leq B_i \leq 10^9
- All input values are integers.

Sample Input 1

3
4 10
5 8
2 9

Sample Output 1

18

If (P_1, P_2, P_3) = (2, 1, 3), then measuring from the ground, giant 2 has a shoulder height of 5 and a head height of 8, giant 1 has a shoulder height of 9 and a head height of 15, and giant 3 has a shoulder height of 11 and a head height of 18.
The head height of the topmost giant from the ground cannot be greater than 18, so print 18.

Sample Input 2

5
1 1
1 1
1 1
1 1
1 1

Sample Output 2

5

Sample Input 3

10
690830957 868532399
741145463 930111470
612846445 948344128
540375785 925723427
723092548 925021315
928915367 973970164
563314352 832796216
562681294 868338948
923012648 954764623
691107436 891127278

Sample Output 3

7362669937

Qwen2 Analysis:
Based on the description of the problem provided:

- The task involves a permutation-based approach to stacking items (giants in this case) where each giant is placed successively on another oneâ€™s shoulders or head.
- The objective is to find the maximum possible height of the head of the topmost giant from the ground, given constraints about their shoulder heights and head heights.
- This problem involves both a mathematical aspect (understanding stacking rules and impact on height) as well as programming skills (handling permutations, sorting, and calculations).
- It requires careful algorithmic thinking to efficiently explore different stacking orders and compute resulting heights without brute-forcing all possible permutations.

### Category Prediction:
Given these factors:

- **Difficulty**: The problem is complex enough that it involves combinatorial optimization but does not necessarily require advanced data structures or algorithms that are typically hard to understand (like advanced graph theory).
- **Required Programming Skills**: A solid understanding of basic programming concepts, with an emphasis on algorithmic efficiency and data manipulation. Knowledge of sorting and recursion would also be beneficial.
- **Complexity**: The solution space for permutations grows factorially with the number of giants (N), but optimizations like sorting or dynamic programming could limit this to a manageable level.

### Category: **Advanced Algorithm** / **Dynamic Programming**

The problem can be categorized under "Advanced Algorithm" due to its need for careful consideration of optimization techniques such as sorting and possibly dynamic programming to avoid exponential time complexity with respect to N. The fact that it involves permutations suggests there might be opportunities for dynamic programming or greedy strategies to find optimal configurations.

For solving this:

1. **Sort giants by the difference between head height and shoulder height** in descending order because placing taller giants on top would generally lead to a taller stack.
2. **Use dynamic programming**: Maintain an array `dp` where `dp[i]` represents the maximum height achievable with `i` giants placed optimally following the rules.
3. **Update `dp` iteratively for each giant** based on their relative positions after sorting and considering only permutations that could result in a taller stack compared to previous configurations.

This approach ensures an efficient exploration of stacking possibilities without needing to explicitly construct or iterate over all permutations, making use of dynamic programming principles (optimally solving subproblems for higher-level decisions).
