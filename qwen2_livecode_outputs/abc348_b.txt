Problem ID: abc348_b
Problem Content:
On the xy-plane, there are N points with ID numbers from 1 to N. Point i is located at coordinates (X_i, Y_i), and no two points have the same coordinates.
From each point, find the farthest point and print its ID number.
If multiple points are the farthest, print the smallest of the ID numbers of those points.
Here, we use the Euclidean distance: for two points (x_1,y_1) and (x_2,y_2), the distance between them is \sqrt{(x_1-x_2)^{2}+(y_1-y_2)^{2}}.

Input

The input is given from Standard Input in the following format:
N
X_1 Y_1
X_2 Y_2
\vdots
X_N Y_N

Output

Print N lines. The i-th line should contain the ID number of the farthest point from point i.

Constraints


- 2 \leq N \leq 100
- -1000 \leq X_i, Y_i \leq 1000
- (X_i, Y_i) \neq (X_j, Y_j) if i \neq j.
- All input values are integers.

Sample Input 1

4
0 0
2 4
5 0
3 4

Sample Output 1

3
3
1
1

The following figure shows the arrangement of the points. Here, P_i represents point i.

The farthest point from point 1 are points 3 and 4, and point 3 has the smaller ID number.
The farthest point from point 2 is point 3.
The farthest point from point 3 are points 1 and 2, and point 1 has the smaller ID number.
The farthest point from point 4 is point 1.

Sample Input 2

6
3 2
1 6
4 5
1 3
5 5
9 8

Sample Output 2

6
6
6
6
6
4

Qwen2 Analysis:
Based on the description of this programming problem:

- The task involves processing a set of points in a 2D space (x,y coordinates) given their distances. This is related to computational geometry.

- It requires an understanding of Euclidean distance formula which falls under mathematical algorithms.

- The input/output format, constraints, and sample cases suggest that it's not very complex but might require efficient handling for larger inputs due to the requirement to find maximum distances across all pairs of points.

- The required skills include knowledge about basic data structures like arrays or lists for storing coordinates, loops for iterating through all points, computations for finding Euclidean distances, and comparisons for selecting the farthest point.

Given these factors:

**Category Prediction**: This problem is likely classified as **Easy-Medium** in difficulty. It requires fundamental programming skills such as working with 2D arrays or coordinate handling along with basic algorithmic concepts like loops and comparisons. The challenge lies more in organizing the logic efficiently rather than solving a complex theoretical problem.

It's also categorized under "Geometry" and "Math", as it involves geometric calculations (Euclidean distance) and some level of data manipulation to find maximum values across different points.

Therefore, this programming problem would suit beginners or those looking to practice basic algorithmic skills with an application in geometry.
