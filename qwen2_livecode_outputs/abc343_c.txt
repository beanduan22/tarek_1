Problem ID: abc343_c
Problem Content:
You are given a positive integer N.
Find the maximum value of a palindromic cube number not greater than N.
Here, a positive integer K is defined to be a palindromic cube number if and only if it satisfies the following two conditions:

- There is a positive integer x such that x^3 = K.
- The decimal representation of K without leading zeros is a palindrome. More precisely, if K is represented as K = \sum_{i = 0}^{L-1} A_i10^i using integers A_0, A_1, \ldots, A_{L-2} between 0 and 9, inclusive, and an integer A_{L-1} between 1 and 9, inclusive, then A_i = A_{L-1-i} for all i = 0, 1, \ldots, L-1.

Input

The input is given from Standard Input in the following format:
N

Output

Print the answer.

Constraints


- N is a positive integer not greater than 10^{18}.

Sample Input 1

345

Sample Output 1

343

343 is a palindromic cube number, while 344 and 345 are not. Thus, the answer is 343.

Sample Input 2

6

Sample Output 2

1

Sample Input 3

123456789012345

Sample Output 3

1334996994331

Qwen2 Analysis:
The given programming problem falls into a high difficulty level with several required programming skills:

- **Complex Logic Understanding:** The problem involves understanding complex conditions for determining if a number is palindromic and whether it's a cube of some integer. You need to create logic that can handle both these checks simultaneously.
  
- **Efficient Algorithms:** Efficient algorithms are required because we are dealing with large numbers up to $10^{18}$. This means optimization in both time complexity and space complexity is crucial.

- **String Manipulation and Number Theory:** The problem requires string manipulation techniques to check if a number is palindromic. Also, knowledge of number theory would be beneficial since we're dealing with cube numbers and their properties.

- **Iterative Approach:** Given the constraints, an iterative approach might not work due to time limits when testing each possible input value individually against these conditions. You may need to come up with a smart way to skip certain checks or make educated guesses based on patterns you find.

This problem is categorized under "Advanced Algorithms" and requires knowledge of multiple areas like number theory, string manipulation, and efficient algorithm design principles.

To solve it effectively:

1. **Palindrome Check:** Write an optimized function that checks whether a given number (or its string representation) is palindromic without leading zeros. Since we're dealing with large numbers, consider handling this in a way that doesn't convert the entire number into text initially.

2. **Cube Generation and Verification:** Generate cube numbers starting from $1^3$ up to those that might exceed or match your input limit. This involves creating a loop that cubes numbers incrementally until you find candidates that are palindromic.

3. **Optimization:** To make this process efficient, avoid generating cubes for large numbers immediately by estimating the upper limit of cube root of N and starting from there.

4. **Implementation:** Use appropriate data types to handle large numbers (like `BigInteger` in Java or Python) since you're dealing with numbers up to $10^{18}$.

The problem requires a solid understanding of number manipulation, efficient algorithm design, and optimization skills to navigate through its complexities within reasonable time constraints.
