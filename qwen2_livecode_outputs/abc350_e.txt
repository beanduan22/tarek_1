Problem ID: abc350_e
Problem Content:
You are given an integer N. You can perform the following two types of operations:

- Pay X yen to replace N with \displaystyle\left\lfloor\frac{N}{A}\right\rfloor.
- Pay Y yen to roll a die (dice) that shows an integer between 1 and 6, inclusive, with equal probability. Let b be the outcome of the die, and replace N with \displaystyle\left\lfloor\frac{N}{b}\right\rfloor.

Here, \lfloor s \rfloor denotes the greatest integer less than or equal to s. For example, \lfloor 3 \rfloor=3 and \lfloor 2.5 \rfloor=2.
Determine the minimum expected cost paid before N becomes 0 when optimally choosing operations.
The outcome of the die in each operation is independent of other rolls, and the choice of operation can be made after observing the results of the previous operations.

Input

The input is given from Standard Input in the following format:
N A X Y

Output

Print the answer.
Your output will be considered correct if the absolute or relative error from the true answer is at most 10^{-6}.

Constraints


- 1 \leq N \leq 10^{18}
- 2 \leq A \leq 6
- 1 \leq X, Y \leq 10^9
- All input values are integers.

Sample Input 1

3 2 10 20

Sample Output 1

20.000000000000000

The available operations are as follows:

- Pay 10 yen. Replace N with \displaystyle\left\lfloor\frac{N}{2}\right\rfloor.
- Pay 20 yen. Roll a die. Let b be the outcome, and replace N with \displaystyle\left\lfloor\frac{N}{b}\right\rfloor.

The optimal strategy is to perform the first operation twice.

Sample Input 2

3 2 20 20

Sample Output 2

32.000000000000000

The available operations are as follows:

- Pay 20 yen. Replace N with \displaystyle\left\lfloor\frac{N}{2}\right\rfloor.
- Pay 20 yen. Roll a die. Let b be the outcome, and replace N with \displaystyle\left\lfloor\frac{N}{b}\right\rfloor.

The optimal strategy is as follows:

- First, perform the second operation to roll the die.
- If the outcome is 4 or greater, then N becomes 0.
- If the outcome is 2 or 3, then N becomes 1. Now, perform the first operation to make N = 0.
- If the outcome is 1, restart from the beginning.

Sample Input 3

314159265358979323 4 223606797 173205080

Sample Output 3

6418410657.7408381

Qwen2 Analysis:
The given programming problem involves operations that can be performed to manipulate an integer \(N\) with certain costs associated with each operation. The primary focus of this problem seems to involve algorithmic optimization techniques, specifically in dealing with decision-making processes under uncertainty (in this case, the random die roll) and minimizing a cost function.

**Problem Complexity and Category:**

1. **Algorithmic Thinking:** The problem requires identifying an optimal strategy for performing operations based on their costs and outcomes, which involves dynamic programming or recursive algorithms to determine the best course of action at each step given the current state of \(N\).

2. **Dynamic Programming/Recursion:** To efficiently solve this problem, one might need to implement either a dynamic programming approach with memoization or recursion with an appropriate base case (when \(N\) becomes 0). This involves computing the minimum expected cost for different values of \(N\) and choosing between performing an operation or not.

3. **Handling Large Numbers:** The constraints specify that \(N\) can be as large as \(10^{18}\), which implies that standard integer types may need to be replaced with arbitrary precision arithmetic libraries such as `BigInteger` in Java, `gmpy2` in Python, etc., to avoid overflow issues.

4. **Decision Making Under Uncertainty:** The second type of operation (rolling a die) introduces an element of randomness and thus requires considering the expected value of outcomes when deciding which action to take. This involves probability calculations combined with decision-making logic based on costs associated with different outcomes.

**Category:**
This problem falls under the category of **Algorithm Design**, specifically focusing on **Dynamic Programming**, **Recursion**, and **Handling Large Numbers** techniques. It requires a deep understanding of algorithmic strategies for optimization problems under uncertainty, making it suitable for intermediate to advanced-level programming challenges typically encountered in coding competitions or technical interviews.

To solve this problem effectively:

- **Understand the constraints:** Familiarize yourself with how large numbers are handled and what computational tools might be required.
- **Model decisions:** Consider all possible actions at each step based on \(N\) and determine their costs, including both direct operation costs and indirect costs due to uncertainty (like restarting).
- **Optimize through recursion or dynamic programming:** Use either a recursive approach with memoization to avoid recalculating the minimum expected cost for states that have already been evaluated, or implement a bottom-up dynamic programming solution if feasible.
- **Implement carefully:** Pay attention to edge cases, especially when \(N\) is close to zero and operations may result in non-positive values.

This problem encourages deep analytical skills alongside practical coding abilities, making it a challenging yet rewarding exercise for those looking to improve their algorithmic problem-solving techniques.
