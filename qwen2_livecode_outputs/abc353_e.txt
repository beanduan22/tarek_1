Problem ID: abc353_e
Problem Content:
For strings x and y, define f(x, y) as follows:

- f(x, y) is the length of the longest common prefix of x and y.

You are given N strings (S_1, \ldots, S_N) consisting of lowercase English letters. Find the value of the following expression:
\displaystyle \sum_{i=1}^{N-1}\sum_{j=i+1}^N f(S_i,S_j).

Input

The input is given from Standard Input in the following format:
N 
S_1 \ldots S_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 3\times 10^5
- S_i is a string consisting of lowercase English letters.
- 1 \leq |S_i|
- |S_1|+|S_2|+\ldots+|S_N|\leq 3\times 10^5
- All input numbers are integers.

Sample Input 1

3
ab abc arc

Sample Output 1

4


- f(S_1,S_2)=2 
- f(S_1,S_3)=1 
- f(S_2,S_3)=1 

Thus, the answer is f(S_1,S_2) + f(S_1,S_3) + f(S_2,S_3) = 4.

Sample Input 2

11
ab bb aaa bba baba babb aaaba aabbb a a b

Sample Output 2

32

Qwen2 Analysis:
This question is an intermediate-level problem that involves string manipulation and some aspects of algorithmic thinking. It requires understanding of basic concepts in data structures (like arrays or maps for storing frequency counts) and algorithms (like dynamic programming or straightforward looping). The time complexity will be quite high due to the double summation over all pairs of strings, suggesting a careful approach is needed to avoid brute forcing.

**Category Prediction:**
This problem falls under several categories:
- **String Manipulation:** It involves finding common prefixes in strings.
- **Array Processing:** There might involve loops and operations on string lengths or character arrays.
- **Algorithm Optimization:** The naive solution would be inefficient with high time complexity due to double summation. Optimizations like precomputing prefix lengths, dynamic programming, or other optimization techniques could help reduce the time complexity.

**Solving Strategy:**
1. **Preprocessing:** Compute and store the length of common prefixes for all pairs `(i,j)` in an efficient manner.
2. **Avoid Double Counting:** When computing `f(S_i,S_j)`, ensure not to double count, especially when comparing strings that share a prefix with other compared strings.

**Key Skills Needed:**
- Efficient String Comparison Techniques
- Looping Constructs and Algorithm Efficiency 
- Array/Hash Map Usage for Tracking Counts or Frequencies

This problem aligns well with the skill set expected at an intermediate level in competitive programming or software development interviews, focusing on algorithm optimization and efficient data handling.
