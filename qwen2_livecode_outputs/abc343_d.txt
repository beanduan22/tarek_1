Problem ID: abc343_d
Problem Content:
Takahashi is hosting a contest with N players numbered 1 to N. 
The players will compete for points. Currently, all players have zero points.
Takahashi's foreseeing ability lets him know how the players' scores will change. Specifically, for i=1,2,\dots,T, the score of player A_i will increase by B_i points at i seconds from now. There will be no other change in the scores.
Takahashi, who prefers diversity in scores, wants to know how many different score values will appear among the players' scores at each moment. For each i=1,2,\dots,T, find the number of different score values among the players' scores at i+0.5 seconds from now.
For example, if the players have 10, 20, 30, and 20 points at some moment, there are three different score values among the players' scores at that moment.

Input

The input is given from Standard Input in the following format:
N T
A_1 B_1
A_2 B_2
\vdots
A_T B_T

Output

Print T lines.
The i-th line (1\leq i \leq T) should contain an integer representing the number of different score values among the players' scores at i+0.5 seconds from now.

Constraints


- 1\leq N, T\leq 2\times 10^5
- 1\leq A_i \leq N
- 1\leq B_i \leq 10^9
- All input values are integers.

Sample Input 1

3 4
1 10
3 20
2 10
2 10

Sample Output 1

2
3
2
2

Let S be the sequence of scores of players 1, 2, 3 in this order.
Currently, S=\lbrace 0,0,0\rbrace.

- After one second, the score of player 1 increases by 10 points, making S=\lbrace 10,0,0\rbrace. Thus, there are two different score values among the players' scores at 1.5 seconds from now.
- After two seconds, the score of player 3 increases by 20 points, making S=\lbrace 10,0,20\rbrace. Thus, there are three different score values among the players' scores at 2.5 seconds from now.
- After three seconds, the score of player 2 increases by 10 points, making S=\lbrace 10,10,20\rbrace. Therefore, there are two different score values among the players' scores at 3.5 seconds from now.
- After four seconds, the score of player 2 increases by 10 points, making S=\lbrace 10,20,20\rbrace. Therefore, there are two different score values among the players' scores at 4.5 seconds from now.

Sample Input 2

1 3
1 3
1 4
1 3

Sample Output 2

1
1
1

Sample Input 3

10 10
7 2620
9 2620
8 3375
1 3375
6 1395
5 1395
6 2923
10 3375
9 5929
5 1225

Sample Output 3

2
2
3
3
4
4
5
5
6
5

Qwen2 Analysis:
The programming problem described above falls under the category of "Competitive Programming" or "Algorithmic Problem Solving". This is due to several reasons:

1. **Problem Difficulty**: The task involves handling multiple inputs (T updates over time), sorting logic for score comparisons, maintaining a data structure that can efficiently handle insertions and deletions based on scores, and computing the count of distinct elements in an array at specific points in time. This requires good understanding of algorithms and their efficient implementations.

2. **Required Programming Skills**: The solution involves skills such as:
   - Efficient Data Structures: Using appropriate data structures for keeping track of player scores can be crucial here; binary indexed tree (BIT), segment trees, or sets might be used depending on the specific requirements.
   - Handling Large Inputs: The problem constraints suggest that solutions need to scale well with large inputs. This often means implementing algorithms and data structures carefully to ensure they are efficient in terms of time complexity.

3. **Complexity**: The task demands careful consideration of how scores evolve over time, which involves predicting the changes in scores at various intervals without explicitly simulating each change for every player (which would be inefficient). Efficiently tracking score updates that lead to distinct values requires a deep understanding and possibly optimization techniques like lazy propagation with segment trees or binary search with sets.

Therefore, this problem is most suited for students aiming to improve their skills in competitive programming by focusing on algorithmic thinking, data structures, time complexity considerations, and efficient coding practices. It's a typical kind of problem found in contests like Codeforces, LeetCode, or ACM/ICPC competitions where performance optimization under limited time constraints is key.

**Suggested Approach**: To tackle this problem effectively:
- **Understand the Scoring Mechanism**: Realize that each update only affects one player by adding to their score. The goal is to track how these scores evolve over time.
- **Data Structure Selection**: Consider using a data structure capable of maintaining order (like a sorted set or balanced binary search tree) as it needs to be queried efficiently for distinct scores at different points in time, and the scores themselves could potentially grow large requiring more efficient storage mechanisms than arrays.
- **Efficient Query Handling**: Develop a strategy for querying distinct score values efficiently after updates. This might involve keeping track of range queries (scores within certain bounds) or using properties of sorted sets to quickly find the number of distinct elements in the set.
- **Avoid Redundant Computations**: Optimize by recognizing that computing scores directly every time can be costly. Instead, consider if there are patterns or conditions under which you can avoid recomputing everything from scratch.

By focusing on these aspects and practicing similar problems, one can develop skills necessary to solve this type of complex problem efficiently within the constraints provided.
