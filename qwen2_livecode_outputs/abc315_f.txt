Problem ID: abc315_f
Problem Content:
There is a race through checkpoints 1,2,\dots,N in this order on a coordinate plane.
The coordinates of checkpoint i are (X_i,Y_i), and all checkpoints have different coordinates.
Checkpoints other than checkpoints 1 and N can be skipped.
However, let C be the number of checkpoints skipped, and the following penalty will be imposed:

- \displaystyle 2^{Câˆ’1} if C>0, and
- 0 if C=0.

Let s be the total distance traveled (Euclidean distance) from checkpoint 1 to checkpoint N plus the penalty.
Find the minimum achievable value as s.

Input

The input is given from Standard Input in the following format:
N
X_1 Y_1
X_2 Y_2
\vdots
X_N Y_N

Output

Print the answer. Your output is considered correct if the absolute or relative error from the true value is at most 10^{-5}.

Constraints


- All input values are integers.
- 2 \le N \le 10^4
- 0 \le X_i,Y_i \le 10^4
- (X_i,Y_i) \neq (X_j,Y_j) if i \neq j.

Sample Input 1

6
0 0
1 1
2 0
0 1
1 0
2 1

Sample Output 1

5.82842712474619009753

Consider passing through checkpoints 1,2,5,6 and skip checkpoints 3,4.

- Move from checkpoint 1 to 2. The distance between them is \sqrt{2}.
- Move from checkpoint 2 to 5. The distance between them is 1.
- Move from checkpoint 5 to 6. The distance between them is \sqrt{2}.
- Two checkpoints are skipped, so the penalty of 2 is imposed.

In this way, you can achieve s = 3 + 2\sqrt{2} \approx 5.828427.
You cannot make s smaller than this value.

Sample Input 2

10
1 8
3 7
9 4
4 9
6 1
7 5
0 0
1 3
6 8
6 4

Sample Output 2

24.63441361516795872523

Sample Input 3

10
34 24
47 60
30 31
12 97
87 93
64 46
82 50
14 7
17 24
3 78

Sample Output 3

110.61238353245736230207

Qwen2 Analysis:
The given problem can be categorized as a **Dynamic Programming** problem with some elements of **Graph Theory**. 

### Problem Analysis:

1. **Input and Output**: The input consists of integer coordinates for N checkpoints, where N is not very large (up to 10^4). The output requires calculating the minimum total distance traveled between these checkpoints under certain conditions.

2. **Constraints**: We have constraints on the number of points, their positions, and the fact that all checkpoint coordinates are distinct integers within a range from 0 to 10^4.

3. **Penalty System**: There's an interesting twist involving penalties for skipping checkpoints (C > 0) or zero penalty if none is skipped. The penalty involves computing powers of two based on C, adding complexity in deciding which checkpoints to skip versus not.

4. **Objective**: The goal is to find the minimum value that takes into account both the total distance traveled and potential penalties incurred by skipping certain points.

### Solution Approach:

1. **Dynamic Programming (DP)**: We could potentially use DP for this problem if a state can be defined that captures the best decision made up until a certain point, including whether we skip or pass through checkpoints in an optimal manner.

2. **Graph Theory**: Alternatively, considering each checkpoint as a node and the distances between them as edges can lead to thinking about minimum spanning trees (MST) or similar concepts if one were trying to optimize based solely on distance without penalties.

3. **State Design**: In DP terms, states could include which checkpoints have been visited, with decisions made at each step considering whether to skip the current checkpoint and what that would imply for subsequent decisions.

4. **Penalty Calculation**: For penalties related to skipped checkpoints, these might require maintaining counts of skipped checkpoints while calculating minimum distances using DFS or another traversal strategy in a graph.

### Programming Skills Required:

- **Dynamic Programming**: Familiarity with DP concepts is essential.
- **Graph Theory**: Understanding how to model problems as graphs and traverse them efficiently.
- **Data Structures**: Use of data structures like arrays, lists, hash maps for efficient state representation and management.

### Complexity:

The problem likely has a higher time complexity due to potentially exponential states in DP (Worse-case scenario: O(N^N)) or high space complexity due to maintaining multiple states. However, optimizations such as pruning paths that cannot lead to better results could reduce this significantly.

In conclusion, the problem requires skills not only in algorithms but also careful consideration of optimization techniques to handle large inputs efficiently while ensuring accuracy within specified error bounds. The solution involves a blend of theoretical concepts from dynamic programming and graph theory, making it a challenging yet rewarding exercise for students aiming to deepen their understanding of these areas.
