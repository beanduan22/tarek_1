Problem ID: abc321_b
Problem Content:
There is an exam structured as follows.

- The exam consists of N rounds called round 1 to N.
- In each round, you are given an integer score between 0 and 100, inclusive.
- Your final grade is the sum of the N-2 of the scores earned in the rounds excluding the highest and lowest.
- Formally, let S=(S_1,S_2,\dots,S_N) be the sequence of the scores earned in the rounds sorted in ascending order, then the final grade is S_2+S_3+\dots+S_{N-1}.



Now, N-1 rounds of the exam have ended, and your score in round i was A_i.
Print the minimum score you must earn in round N for a final grade of X or higher.
If your final grade will never be X or higher no matter what score you earn in round N, print -1 instead.
Note that your score in round N can only be an integer between 0 and 100.

Input

The input is given from Standard Input in the following format:
N X
A_1 A_2 \dots A_{N-1}

Output

Print the answer.

Constraints


- All input values are integers.
- 3 \le N \le 100
- 0 \le X \le 100 \times (N-2)
- 0 \le A_i \le 100

Sample Input 1

5 180
40 60 80 50

Sample Output 1

70

Your scores in the first four rounds were 40, 60, 80, and 50.
If you earn a score of 70 in round 5, the sequence of the scores sorted in ascending order will be S=(40,50,60,70,80), for a final grade of 50+60+70=180.
It can be shown that 70 is the minimum score you must earn for a final grade of 180 or higher.

Sample Input 2

3 100
100 100

Sample Output 2

0

Your scores in the first two rounds were 100 and 100.
If you earn a score of 0 in round 3, the sequence of the scores sorted in ascending order will be S=(0,100,100), for a final grade of 100.
Note that the highest score, 100, is earned multiple times, and only one of them is excluded. (The same goes for the lowest score.)
It can be shown that 0 is the minimum score you must earn for a final grade of 100 or higher.

Sample Input 3

5 200
0 0 99 99

Sample Output 3

-1

Your scores in the first four rounds were 0, 0, 99, and 99.
It can be shown that your final grade will never be 200 or higher no matter what score you earn in round 5.

Sample Input 4

10 480
59 98 88 54 70 24 8 94 46

Sample Output 4

45

Qwen2 Analysis:
The given problem involves understanding the structure of an exam, interpreting specific rules related to scoring, calculating minimum scores needed for a certain grade, considering constraints, and implementing logic through coding. Here are the aspects that can help in categorizing this problem:

1. **Difficulty Level**: The problem requires basic programming knowledge, such as understanding loops (for or while), conditionals (if-else statements), sorting arrays, arithmetic operations, and simple algorithmic reasoning. This suggests it falls into the "easy" to "medium" difficulty range depending on the programming experience of the student.

2. **Programming Skills**: The skills primarily needed are basic input/output handling with the standard input/output streams (`stdin`/`stdout`) and understanding how to manipulate arrays or lists. There is no need for advanced data structures, complex algorithms (like sorting with more than O(n log n) complexity), recursion, etc.

3. **Complexity**: The problem's complexity comes from interpreting the rules correctly, especially related to calculating scores under specific constraints without exceeding those constraints. It does not require optimization or dynamic programming techniques that are common in harder problems.

4. **Educational Level**: Given its focus on input interpretation and applying basic arithmetic operations, it would suit an introductory level course in programming classes for beginners who have covered basic syntax, control structures, and simple algorithms like sorting.

Based on these aspects:
- The problem seems to be a good fit for students learning Python (or another language that requires minimal setup) as part of their initial coding curriculum.
- It serves as a stepping stone from theoretical learning into applying concepts in more practical scenarios without requiring extensive debugging or time-consuming implementation complexities.
- This type of question is often used in online programming competitions, educational platforms like Codecademy, or as part of the interview preparation for developers who are beginners but need to demonstrate their foundational skills.

Therefore, categorizing this problem would likely place it under "Easy/Medium" for beginner programmers looking to practice basic algorithmic and logic problems. It could be used in an introductory programming course, coding workshops, or educational platforms targeting early learners of programming languages like Python.
