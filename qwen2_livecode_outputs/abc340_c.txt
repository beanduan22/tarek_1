Problem ID: abc340_c
Problem Content:
There is a single integer N written on a blackboard.
Takahashi will repeat the following series of operations until all integers not less than 2 are removed from the blackboard:

- Choose one integer x not less than 2 written on the blackboard.
- Erase one occurrence of x from the blackboard. Then, write two new integers \left \lfloor \dfrac{x}{2} \right\rfloor and \left\lceil \dfrac{x}{2} \right\rceil on the blackboard.
- Takahashi must pay x yen to perform this series of operations.

Here, \lfloor a \rfloor denotes the largest integer not greater than a, and \lceil a \rceil denotes the smallest integer not less than a.
What is the total amount of money Takahashi will have paid when no more operations can be performed?
It can be proved that the total amount he will pay is constant regardless of the order in which the operations are performed.

Input

The input is given from Standard Input in the following format:
N

Output

Print the total amount of money Takahashi will have paid, in yen.

Constraints


- 2 \leq N \leq 10^{17}

Sample Input 1

3

Sample Output 1

5

Here is an example of how Takahashi performs the operations:

- Initially, there is one 3 written on the blackboard.
- He chooses 3. He pays 3 yen, erases one 3 from the blackboard, and writes \left \lfloor \dfrac{3}{2} \right\rfloor = 1 and \left\lceil \dfrac{3}{2} \right\rceil = 2 on the blackboard.
- There is one 2 and one 1 written on the blackboard.
- He chooses 2. He pays 2 yen, erases one 2 from the blackboard, and writes \left \lfloor \dfrac{2}{2} \right\rfloor = 1 and \left\lceil \dfrac{2}{2} \right\rceil = 1 on the blackboard.
- There are three 1s written on the blackboard.
- Since all integers not less than 2 have been removed from the blackboard, the process is finished.

Takahashi has paid a total of 3 + 2 = 5 yen for the entire process, so print 5.

Sample Input 2

340

Sample Output 2

2888

Sample Input 3

100000000000000000

Sample Output 3

5655884811924144128

Qwen2 Analysis:
Based on the analysis of this problem, we can categorize it as follows:

Difficulty: **Hard**
The problem involves understanding the mathematical process behind removing integers from a list (or blackboard) in an efficient manner. It requires insight into how the floor division and ceiling operations affect the total cost over multiple iterations, making it challenging for those who might not intuitively grasp this.

Required Programming Skills:
1. **Mathematical Reasoning:** Understanding properties of arithmetic operations like floor division and ceiling is crucial.
2. **Recursion or Iterative Process:** Since the problem deals with repeatedly halving numbers until a stopping condition is met (all integers less than 2 are removed), it requires either recursive thinking or iterative computation.

Complexity:
The problem has a time complexity that can be considered **O(log N)** due to the repeated division by two operation, which continues for log base 2 of the initial integer `N` times. This is because each operation approximately halves the remaining integers until they are all less than 2.

To solve this problem effectively:
1. You would start with the given number `N`.
2. Calculate the sum as the sum of `N/2`, `3*N/4`, `7*N/8` and so on, which represents how often each integer contributes to the total cost based on its position in the binary representation (e.g., `1` contributes once for every two steps because `1` becomes `0.5`, then `0.75`, etc.).
3. Notice that this sum converges geometrically as you progress through higher powers of `(1-2^-n)`.

This problem falls under the category of **Number Theory** and **Dynamic Programming**, given its reliance on mathematical properties and iterative calculation to reach a final result efficiently. It might also be considered part of **Mathematical Algorithms**, specifically focusing on recursive sequences and summation formulas.

Overall, this is an advanced problem that combines elements of mathematics with algorithmic efficiency considerations, making it suitable for participants in competitive programming contests or those learning these techniques at a deeper level.
