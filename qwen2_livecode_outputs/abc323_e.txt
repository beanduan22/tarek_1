Problem ID: abc323_e
Problem Content:
Takahashi has a playlist with N songs.
Song i (1 \leq i \leq N) lasts T_i seconds.
Takahashi has started random play of the playlist at time 0.
Random play repeats the following: choose one song from the N songs with equal probability and play that song to the end.
Here, songs are played continuously: once a song ends, the next chosen song starts immediately.
The same song can be chosen consecutively.
Find the probability that song 1 is being played (X + 0.5) seconds after time 0, modulo 998244353.

How to print a probability modulo 998244353
It can be proved that the probability to be found in this problem is always a rational number.
Also, the constraints of this problem guarantee that when the probability to be found is expressed as an irreducible fraction \frac{y}{x}, x is not divisible by 998244353.
Then, there is a unique integer z between 0 and 998244352, inclusive, such that xz \equiv y \pmod{998244353}. Report this z.

Input

The input is given from Standard Input in the following format:
N X
T_1 T_2 \ldots T_N

Output

Print the probability, modulo 998244353, that the first song in the playlist is being played (X+0.5) seconds after time 0.

Constraints


- 2 \leq N\leq 10^3
- 0 \leq X\leq 10^4
- 1 \leq T_i\leq 10^4
- All input values are integers.

Sample Input 1

3 6
3 5 6

Sample Output 1

369720131

Song 1 will be playing 6.5 seconds after time 0 if songs are played in one of the following orders.

- Song 1 \to Song 1 \to Song 1
- Song 2 \to Song 1 
- Song 3 \to Song 1 

The probability that one of these occurs is \frac{7}{27}.
We have 369720131\times 27\equiv 7 \pmod{998244353}, so you should print 369720131.

Sample Input 2

5 0
1 2 1 2 1

Sample Output 2

598946612

0.5 seconds after time 0, the first song to be played is still playing, so the sought probability is \frac{1}{5}.
Note that different songs may have the same length.

Sample Input 3

5 10000
1 2 3 4 5

Sample Output 3

586965467

Qwen2 Analysis:
The problem described above can be categorized as a **mathematical probability** and **modular arithmetic** problem. Here's why:

1. **Problem Difficulty**: The problem involves calculating probabilities which requires understanding of basic probability theory and combinatorics. Modulo operations are used to simplify the computation, often due to constraints on the output format.

2. **Required Programming Skills**: While not directly programming specific skills like data structures or algorithms (since it's more math-based), familiarity with implementing mathematical computations in code is required. Also, understanding of modular arithmetic and its implementation in a programming language would be helpful.

3. **Complexity**: The problem involves working with large numbers (up to $10^4$ for some values) and modulo operations which can handle very large results without overflow, making it computationally intensive but algorithmically simple.

In terms of categorization based on difficulty:

- **Educational Level**: Suitable for undergraduate students learning probability theory or as an exercise in advanced high school statistics.
  
- **Skill Level**: Intermediate to Advanced. It requires solid understanding of basic mathematical concepts and some familiarity with programming principles related to handling large numbers efficiently, like using BigInteger classes if the language supports them.

- **Commonly Found In**:
  - Algorithmic problem sets in competitive programming contests that focus on mathematics and number theory.
  - University course assignments for students studying computer science or mathematics with a computational aspect. 

Given these points, this type of problem would typically appear in educational contexts where students are learning about probability, combinatorics, modular arithmetic, and their applications in computing. It might be part of an assignment to reinforce theoretical knowledge through practical implementation.
