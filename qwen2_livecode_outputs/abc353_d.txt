Problem ID: abc353_d
Problem Content:
For positive integers x and y, define f(x, y) as follows:

- Interpret the decimal representations of x and y as strings and concatenate them in this order to obtain a string z. The value of f(x, y) is the value of z when interpreted as a decimal integer.

For example, f(3, 14) = 314 and f(100, 1) = 1001.
You are given a sequence of positive integers A = (A_1, \ldots, A_N) of length N. Find the value of the following expression modulo 998244353:
\displaystyle \sum_{i=1}^{N-1}\sum_{j=i+1}^N f(A_i,A_j).

Input

The input is given from Standard Input in the following format:
N
A_1 \ldots A_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 2 \times 10^5
- 1 \leq A_i \leq 10^9
- All input values are integers.

Sample Input 1

3
3 14 15

Sample Output 1

2044


- f(A_1, A_2) = 314
- f(A_1, A_3) = 315
- f(A_2, A_3) = 1415

Thus, the answer is f(A_1, A_2) + f(A_1, A_3) + f(A_2, A_3) = 2044.

Sample Input 2

5
1001 5 1000000 1000000000 100000

Sample Output 2

625549048

Be sure to calculate the value modulo 998244353.

Qwen2 Analysis:
The given programming problem falls into the category of "Competitive Programming" or "Algorithmic Problem Solving". This is because it requires understanding of string manipulation, arithmetic operations with large numbers (beyond standard integer data types), and algorithm optimization. The problem involves concatenating decimal representations of two integers to form a new number, calculating this operation for every unique pair within a sequence of positive integers, and summing these results modulo 998244353.

The skills required are:
1. **Handling Large Numbers**: Since the input can go up to \(10^9\) and there are potentially multiple pairs being summed, arithmetic operations need to be done efficiently for large numbers.
2. **String Manipulation**: The problem involves converting integers into strings for concatenation.
3. **Algorithmic Optimization**: To handle a sequence of length \(N\) with constraints \(2 \leq N \leq 2 \times 10^5\), the solution should aim for an efficient algorithm to avoid exceeding time limits.

The complexity analysis would include:
- Time Complexity: The brute-force approach could be \(O(N^2)\) since every pair needs to be considered. However, optimizing this might involve sorting or using hash maps for faster lookups or optimizations.
- Space Complexity: The space required is relatively low unless there's an explicit need to store large integers beyond what standard integer types can handle.

This type of problem is common in coding competitions where efficiency and correctness under time constraints are key aspects of evaluation.
