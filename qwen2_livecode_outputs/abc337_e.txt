Problem ID: abc337_e
Problem Content:
This is an interactive problem (a type of problem where your program interacts with the judge program through Standard Input and Output).
There are N bottles of juice, numbered 1 to N. It has been discovered that exactly one of these bottles has gone bad. Even a small sip of the spoiled juice will cause stomach upset the next day.
Takahashi must identify the spoiled juice by the next day. To do this, he decides to call the minimum necessary number of friends and serve them some of the N bottles of juice. He can give any number of bottles to each friend, and each bottle of juice can be given to any number of friends.
Print the number of friends to call and how to distribute the juice, then receive information on whether each friend has an upset stomach the next day, and print the spoiled bottle's number.

Input/Output

This is an interactive problem (a type of problem where your program interacts with the judge program through Standard Input and Output).
Before the interaction, the judge secretly selects an integer X between 1 and N as the spoiled bottle's number. The value of X is not given to you. Also, the value of X may change during the interaction as long as it is consistent with the constraints and previous outputs.
First, the judge will give you N as input.
N

You should print the number of friends to call, M, followed by a newline.
M

Next, you should perform the following procedure to print M outputs.
For i = 1, 2, \ldots, M, the i-th output should contain the number K_i of bottles of juice you will serve to the i-th friend, and the K_i bottles' numbers in ascending order, A_{i, 1}, A_{i, 2}, \ldots, A_{i, K_i}, separated by spaces, followed by a newline.
K_i A_{i, 1} A_{i, 2} \ldots A_{i, K_i}

Then, the judge will inform you whether each friend has a stomach upset the next day by giving you a string S of length M consisting of 0 and 1.
S

For i = 1, 2, \ldots, M, the i-th friend has a stomach upset if and only if the i-th character of S is 1.
You should respond by printing the number of the spoiled juice bottle X', followed by a newline.
X'

Then, terminate the program immediately.
If the M you printed is the minimum necessary number of friends to identify the spoiled juice out of the N bottles, and the X' you printed matches the spoiled bottle's number X, then your program is considered correct.

Input/Output

This is an interactive problem (a type of problem where your program interacts with the judge program through Standard Input and Output).
Before the interaction, the judge secretly selects an integer X between 1 and N as the spoiled bottle's number. The value of X is not given to you. Also, the value of X may change during the interaction as long as it is consistent with the constraints and previous outputs.
First, the judge will give you N as input.
N

You should print the number of friends to call, M, followed by a newline.
M

Next, you should perform the following procedure to print M outputs.
For i = 1, 2, \ldots, M, the i-th output should contain the number K_i of bottles of juice you will serve to the i-th friend, and the K_i bottles' numbers in ascending order, A_{i, 1}, A_{i, 2}, \ldots, A_{i, K_i}, separated by spaces, followed by a newline.
K_i A_{i, 1} A_{i, 2} \ldots A_{i, K_i}

Then, the judge will inform you whether each friend has a stomach upset the next day by giving you a string S of length M consisting of 0 and 1.
S

For i = 1, 2, \ldots, M, the i-th friend has a stomach upset if and only if the i-th character of S is 1.
You should respond by printing the number of the spoiled juice bottle X', followed by a newline.
X'

Then, terminate the program immediately.
If the M you printed is the minimum necessary number of friends to identify the spoiled juice out of the N bottles, and the X' you printed matches the spoiled bottle's number X, then your program is considered correct.

Constraints


- N is an integer.
- 2 \leq N \leq 100



Qwen2 Analysis:
The problem described above can be categorized as a classic interactive problem with several elements that make it interesting from both an algorithmic perspective and a programming one.

**Category: Algorithmic Difficulty**

- **Problem Type:** Identification or Search Problem. The task involves identifying the specific item (in this case, the bad bottle of juice) among multiple options using limited resources (calling friends to test different bottles).

- **Complexity:** Medium to High. The challenge lies in determining the minimum number of "queries" required to narrow down and identify the bad bottle with certainty. Efficient algorithms will be needed to minimize the calls made, especially as the number of bottles increases.

**Required Programming Skills:**

1. **Algorithmic Thinking:** Understanding binary search principles or similar divide-and-conquer strategies can help optimize the number of queries.
2. **Recursion and Iteration:** Depending on the solution approach, recursion might be used to explore different states (options) efficiently while iteration could be utilized for systematic querying.
3. **Resource Management:** Efficiently managing resources, here being calls to friends, is crucial as it directly impacts the effectiveness and optimality of the solution.
4. **String Handling:** Working with strings to parse responses from the judge program and to generate expected outputs.

**Algorithmic Approach Prediction:**

Given the nature of this problem, a common approach would involve dividing bottles into smaller groups and querying on them systematically. A strategy that might be effective here is based on binary search principles:

1. **Divide:** Split the set of bottles in half (if possible) using friends to test different combinations.
2. **Conquer:** Depending on the response from each friend, recursively narrow down the suspect bottles by eliminating the group that does not contain the bad bottle(s).
3. **Combine:** Once enough groups are identified without containing a bad bottle, continue splitting those groups until one remains, which is likely to contain the bad bottle.

**Optimization for Minimality:**

- **Minimizing Queries:** The goal is to minimize the total number of friends called (queries made). This requires careful consideration of how bottles are divided and what information each query provides.
  
- **Efficient Handling of Feedback:** Efficiently processing each friend's response to quickly identify which groups can be eliminated or need further exploration.

**Conclusion:**

This problem falls under categories that require algorithmic optimization, systematic thinking about state transitions (in this case, bottle querying), and efficient use of computational resources. It leans towards the medium to advanced difficulty level due to its reliance on devising an optimal strategy for information gathering and decision-making.

The interactive nature adds complexity as it requires real-time parsing and processing of data from multiple inputs instead of a single step-by-step algorithmic solution. Students or programmers tackling this problem would need solid skills in logic, recursion, and the ability to adapt strategies based on feedback received during runtime.
