Problem ID: 1873_B
Problem Content:
Slavic is preparing a present for a friend's birthday. He has an array $a$ of $n$ digits and the present will be the product of all these digits. Because Slavic is a good kid who wants to make the biggest product possible, he wants to add $1$ to exactly one of his digits. 

What is the maximum product Slavic can make?

Input

The first line contains a single integer $t$ ($1 \leq t \leq 10^4$) — the number of test cases.

The first line of each test case contains a single integer $n$ ($1 \leq n \leq 9$) — the number of digits.

The second line of each test case contains $n$ space-separated integers $a_i$ ($0 \leq a_i \leq 9$) — the digits in the array.

Output

For each test case, output a single integer — the maximum product Slavic can make, by adding $1$ to exactly one of his digits.Sample Input 1:
4

4

2 2 1 2

3

0 1 2

5

4 3 2 3 4

9

9 9 9 9 9 9 9 9 9



Sample Output 1:

16
2
432
430467210


Qwen2 Analysis:
Based on the description of the problem provided, we can deduce that it falls under the category of **Dynamic Programming** and **Greedy Algorithms**, while considering both the nature of the constraints and the operations involved.

### Difficulty Level:
The problem involves basic operations such as multiplication and addition which are fundamental in programming. However, the strategic choice to increment one digit in an array to maximize the product introduces a layer of complexity that requires careful consideration of different scenarios. This makes it **Medium** difficulty level for someone practicing algorithmic problems with moderate experience.

### Required Programming Skills:
1. **Array Manipulation**: The problem primarily involves operations on arrays, which is a foundational skill expected from programmers.
2. **Conditional Logic**: Deciding when and where to increment the number in an array requires conditional logic to evaluate different states.
3. **Iteration**: Efficient iteration over elements of the array to compare values or perform calculations is essential.

### Complexity:
The time complexity for iterating through all possible cases (i.e., considering adding one to each digit individually) would be linear (`O(n)`), where `n` is the size of the input array. This means that with a reasonably efficient implementation, this algorithm can handle up to 9 elements within reasonable computation times on most modern computers.

### Problem Solving Approach:
1. **Identify the Objective**: The goal is to maximize the product by incrementing one digit.
2. **Consider Edge Cases**: Check for scenarios like all digits being zero or negative values not affecting positive products directly (as we're adding a positive value).
3. **Dynamic / Greedy Choice**: Use dynamic programming principles by considering each array element and deciding whether its contribution to the final product can be increased significantly by adding one.
4. **Output Processing**: The output processing involves calculating the maximum product which requires storing intermediate results.

### Conclusion:
This problem is an excellent exercise for practicing basic programming skills with a focus on decision-making (greedy choice) and efficient implementation of algorithms that involve array manipulation and conditional logic evaluation. It's suitable for candidates looking to improve their skills in this area or for interviews where they need to demonstrate proficiency in handling problems requiring careful computation and strategic decisions.
