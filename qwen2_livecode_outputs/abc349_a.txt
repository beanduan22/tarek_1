Problem ID: abc349_a
Problem Content:
There are N people labeled 1 to N, who have played several one-on-one games without draws. Initially, each person started with 0 points. In each game, the winner's score increased by 1 and the loser's score decreased by 1 (scores can become negative). Determine the final score of person N if the final score of person i\ (1\leq i\leq N-1) is A_i. It can be shown that the final score of person N is uniquely determined regardless of the sequence of games.

Input

The input is given from Standard Input in the following format:
N
A_1 A_2 \ldots A_{N-1}

Output

Print the answer.

Constraints


- 2 \leq N \leq 100
- -100 \leq A_i \leq 100
- All input values are integers.

Sample Input 1

4
1 -2 -1

Sample Output 1

2

Here is one possible sequence of games where the final scores of persons 1, 2, 3 are 1, -2, -1, respectively.

- Initially, persons 1, 2, 3, 4 have 0, 0, 0, 0 points, respectively.
- Persons 1 and 2 play, and person 1 wins. The players now have 1, -1, 0, 0 point(s).
- Persons 1 and 4 play, and person 4 wins. The players now have 0, -1, 0, 1 point(s).
- Persons 1 and 2 play, and person 1 wins. The players now have 1, -2, 0, 1 point(s).
- Persons 2 and 3 play, and person 2 wins. The players now have 1, -1, -1, 1 point(s).
- Persons 2 and 4 play, and person 4 wins. The players now have 1, -2, -1, 2 point(s).

In this case, the final score of person 4 is 2. Other possible sequences of games exist, but the score of person 4 will always be 2 regardless of the progression.

Sample Input 2

3
0 0

Sample Output 2

0

Sample Input 3

6
10 20 30 40 50

Sample Output 3

-150

Qwen2 Analysis:
The problem described above can be categorized as an **Algorithm** or **Data Structures** question. Its primary focus is on understanding relationships between entities (people in this case), calculating outcomes based on predefined rules, and deriving a solution through logical reasoning.

Here's why:

1. **Required Programming Skills**: The solution doesn't require advanced programming concepts or language-specific features. The focus is more on logic and mathematical operations rather than complex data structures or optimization techniques typically required for higher difficulty problems. Thus, it targets skills like array manipulation, basic arithmetic calculations, and iterative processes.

2. **Difficulty Level**: Given that the constraints are relatively small (N can be up to 100), brute-force approaches are feasible. The problem doesn't involve exponential time complexity issues or require sophisticated optimization strategies to find an efficient solution within time limits. This suggests it's suitable for beginners to intermediate skill levels.

3. **Complexity**: The problem description includes a simple input format and asks for a straightforward calculation (finding the final score of person N given scores of other participants). It doesn't involve complex data manipulation, recursion, or graph theory concepts typically associated with higher complexity problems like NP-complete tasks.

In conclusion, this question is designed to test basic programming skills such as logic implementation and arithmetic operations while avoiding advanced techniques that might be needed in more complex algorithmic challenges. Its educational value lies in reinforcing understanding of fundamental problem-solving strategies and reinforcing the importance of logical consistency in algorithms.
