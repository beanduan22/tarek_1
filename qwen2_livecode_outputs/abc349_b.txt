Problem ID: abc349_b
Problem Content:
A string S consisting of lowercase English letters is a good string if and only if it satisfies the following property for all integers i not less than 1:

- There are exactly zero or exactly two different letters that appear exactly i times in S.

Given a string S, determine if it is a good string.

Input

The input is given from Standard Input in the following format:
S

Output

Print Yes if S is a good string, and No otherwise.

Constraints


- S is a string of lowercase English letters with a length between 1 and 100, inclusive.

Sample Input 1

commencement

Sample Output 1

Yes

For the string commencement, the number of different letters that appear exactly i times is as follows:

- i=1: two letters (o and t)
- i=2: two letters (c and n)
- i=3: two letters (e and m)
- i\geq 4: zero letters

Therefore, commencement satisfies the condition of a good string.

Sample Input 2

banana

Sample Output 2

No

For the string banana, there is only one letter that appears exactly one time, which is b, so it does not satisfy the condition of a good string.

Sample Input 3

ab

Sample Output 3

Yes

Qwen2 Analysis:
The problem described above involves analyzing properties of strings in terms of character frequency distribution. It requires understanding and implementing a logic to check if the given string adheres to specific conditions about character repetition. 

Let's break down the problem:

1. **Input**: A string `S` made up of lowercase English letters.
2. **Output**: "Yes" if `S` is considered a 'good' string based on certain criteria, otherwise "No". 
3. **Criteria**: For every integer i ≥ 1, there should be exactly zero or exactly two different characters that appear exactly `i` times in the string.

The problem's main challenge lies in efficiently counting character frequencies at various intervals (from single occurrences to multiple occurrences) and ensuring these counts comply with the specified conditions.

This type of problem requires skills such as:
- **String manipulation**: To process input strings.
- **Data structure usage**: Efficiently storing frequency data, possibly using dictionaries or hash maps for this purpose.
- **Logic and conditional checks**: Implementing logic to validate that each 'i' in the range (1 ≤ i ≤ length of string) adheres to the specified criteria.

From a difficulty perspective:
This would generally fall under intermediate level programming problems as it involves multiple concepts like loops, conditionals, string processing, and basic data structure usage. It requires understanding and implementation without delving too deeply into complex algorithms or advanced concepts.

In terms of complexity:
The time complexity might be linear with respect to the length of the input string (`O(n)`), assuming that each character is processed once for frequency calculation and again for checking against conditions, where `n` is the length of the string. The space complexity could also be considered constant if an efficient approach like using a dictionary is taken.

Overall, this problem would suit someone familiar with basic programming constructs who needs to refine their skills in handling strings and data structures effectively. It's a good practice for applying concepts learned in more structured ways while being mindful of the requirements laid out by specific conditions on character frequency distributions.
