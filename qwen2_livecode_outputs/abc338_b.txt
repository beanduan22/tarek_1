Problem ID: abc338_b
Problem Content:
You are given a string S consisting of lowercase English letters. Find the character that appears most frequently in S. If multiple such characters exist, report the one that comes earliest in alphabetical order.

Input

The input is given from Standard Input in the following format:
S

Output

Among the characters that appear most frequently in S, print the one that comes earliest in alphabetical order.

Constraints


- 1 \leq |S| \leq 1000 (|S| is the length of the string S.)
- Each character in S is a lowercase English letter.

Sample Input 1

frequency

Sample Output 1

e

In frequency, the letter e appears twice, which is more than any other character, so you should print e.

Sample Input 2

atcoder

Sample Output 2

a

In atcoder, each of the letters a, t, c, o, d, e, and r appears once, so you should print the earliest in alphabetical order, which is a.

Sample Input 3

pseudopseudohypoparathyroidism

Sample Output 3

o

Qwen2 Analysis:
Based on the given details:

1. **Difficulty**: The task involves analyzing a string to find the most frequently occurring character(s) along with additional checks for alphabetical order when multiple characters are tied for frequency. This requires basic knowledge of string manipulation and data structures in most programming languages, which is generally considered an easy-to-medium difficulty problem.

2. **Required Programming Skills**:
   - **String Processing**: Understanding how to iterate over strings or use built-in functions to analyze them.
   - **Data Structure Usage**: Utilizing a dictionary (hash map) or similar data structure to count occurrences efficiently.
   - **Sorting and Comparison**: Sorting the characters by frequency and then alphabetically requires knowledge of sorting algorithms and comparison.

3. **Complexity**:
   - The time complexity is relatively low since we're dealing with string operations that can be optimized using hash maps, which typically give us `O(n)` performance for iterating over the input string once.
   - Space complexity depends on the number of unique characters in the input string but will not exceed a constant factor times the size of the input alphabet (26).

Given these points, this problem would likely fall into the category of **Easy-Medium** based on programming challenges. It's suitable for beginners learning string manipulation and data structure usage while still challenging enough to test understanding of algorithmic concepts like sorting and optimization with hash maps.
