Problem ID: abc355_b
Problem Content:
You are given a sequence A=(A_1,A_2,\dots,A_N) of length N and a sequence B=(B_1,B_2,\dots,B_M) of length M. Here, all elements of A and B are pairwise distinct. Determine whether the sequence C=(C_1,C_2,\dots,C_{N+M}) formed by sorting all elements of A and B in ascending order contains two consecutive elements appearing in A.

Input

The input is given from Standard Input in the following format:
N M
A_1 A_2 \dots A_N
B_1 B_2 \dots B_M

Output

If C contains two consecutive elements appearing in A, print Yes; otherwise, print No.

Constraints


- 1 \leq N, M \leq 100
- 1 \leq A_i, B_j \leq 200
- A_1, A_2, \dots, A_N, B_1, B_2, \dots, B_M are distinct.
- All input values are integers.

Sample Input 1

3 2
3 2 5
4 1

Sample Output 1

Yes

C=(1,2,3,4,5). Since 2 and 3 from A occur consecutively in C, print Yes.

Sample Input 2

3 2
3 1 5
4 2

Sample Output 2

No

C=(1,2,3,4,5). Since no two elements from A occur consecutively in C, print No.

Sample Input 3

1 1
1
2

Sample Output 3

No

Qwen2 Analysis:
The problem presented is a straightforward algorithmic question that can be categorized as having Easy-Medium difficulty. The required programming skills include basic array manipulation, sorting algorithms, and simple comparisons in most programming languages. It doesn't require complex data structures or advanced algorithms but emphasizes on the understanding of sequence comparison and sorting.

Here's an outline of how to approach solving this problem:

1. **Read Input**: First, you need to read the two sequences A and B from input along with their lengths N and M.
2. **Combine Sequences**: Combine both sequences into a single list or array C by appending sequence B after sequence A while maintaining order as per the given condition of sorting them in ascending order initially.
3. **Sort Combined Sequence**: Sort the combined sequence C to ensure that we can easily identify if any two consecutive elements from sequence A occur consecutively, which would mean they were originally adjacent in their respective sequences.
4. **Check for Consecutive Elements from A**: After sorting, traverse through the sorted array or sequence and check if there exist at least one instance where two consecutive elements are found in sequence A (i.e., their indices differ by 1). This means that these elements were originally part of sequence A and were adjacent in their original sequences.
5. **Output Result**: If such a pair is found, output "Yes". Otherwise, after checking through the entire sorted array without finding any consecutive elements from A, output "No".

The complexity mainly comes from sorting which can be O(N log N) for large inputs depending on the sorting algorithm used (like quicksort or mergesort), and then iterating over this sorted array to check for consecutive occurrences of A's elements would take linear time, making the overall time complexity dominated by the sort operation.

This problem does not require any complex optimizations as it relies more on basic programming logic and careful implementation rather than intricate algorithms. Thus, it falls into the Easy-Medium category based on these criteria.
