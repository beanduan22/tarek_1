Problem ID: abc344_c
Problem Content:
You are given three sequences A=(A_1,\ldots,A_N), B=(B_1,\ldots,B_M), and C=(C_1,\ldots,C_L).
Additionally, a sequence X=(X_1,\ldots,X_Q) is given. For each i=1,\ldots,Q, solve the following problem:
Problem: Is it possible to select one element from each of A, B, and C so that their sum is X_i?

Input

The input is given from Standard Input in the following format:
N
A_1 \ldots A_N
M
B_1 \ldots B_M
L 
C_1 \ldots C_L
Q
X_1 \ldots X_Q

Output

Print Q lines.
The i-th line should contain Yes if it is possible to select one element from each of A, B, and C so that their sum is X_i, and No otherwise.

Constraints


- 1 \leq N,M,L \leq 100
- 0 \leq A_i, B_i ,C_i \leq 10^8
- 1 \leq Q \leq 2\times 10^5
- 0 \leq X_i \leq 3\times 10^8
- All input values are integers.

Sample Input 1

3
1 2 3
2
2 4
6
1 2 4 8 16 32
4
1 5 10 50

Sample Output 1

No
Yes
Yes
No


- It is impossible to select one element from each of A, B, and C so that their sum is 1.
- Selecting 1, 2, and 2 from A, B, and C, respectively, makes the sum 5.
- Selecting 2, 4, and 4 from A, B, and C, respectively, makes the sum 10.
- It is impossible to select one element from each of A, B, and C so that their sum is 50.

Qwen2 Analysis:
The problem described above falls under the category of "Algorithm Implementation" with a specific focus on "Dynamic Programming". 

### Difficulty Level:
- **Intermediate**: This problem requires understanding of algorithm design techniques like dynamic programming. However, it doesn't involve complex algorithms or data structures, making it more accessible to intermediate programmers.
  
### Required Programming Skills:
1. **Looping Constructs**: The solution involves iterating over the input sequences which is a fundamental skill in programming.
2. **Data Structures**: Efficient use of 2D or multidimensional arrays for storing intermediate results can be part of the solution.
3. **Dynamic Programming Concepts**: Understanding how to break down the problem into sub-problems and using previously computed solutions to solve larger problems.

### Complexity:
- **Time Complexity**: The straightforward implementation would involve multiple nested loops, which could lead to a complexity up to O(Q * N * M * L) depending on the approach. However, by applying dynamic programming correctly, it can be optimized.
  - For example, if we use a 3D array `dp[i][j][k]` where `i`, `j`, and `k` represent indices into sequences A, B, and C respectively, with each index ranging from `[0...min(i,j,k)]`, the time complexity reduces to O(NML).
- **Space Complexity**: With dynamic programming, space could be another concern. In this case, if we're only storing values for a single iteration of one sequence at a time, the space might be optimized down to `O(min(N, M, L))` or even `O(1)` with careful implementation.

### Solution Approach:
1. **Preprocessing**: Before solving each query independently, potentially sort sequences A and C for better efficiency in finding sum pairs.
2. **Dynamic Programming**: Use DP states such as `(sum_so_far, index_of_sequence_A, index_of_sequence_B, index_of_sequence_C)` to keep track of achievable sums.
3. **Query Processing**: For each query `X_i`, check if there exists a state where the sum equals `X_i` by traversing through all possible combinations.

This problem encourages not only coding skills but also understanding and application of dynamic programming strategies in solving problems related to sequence summation and selection, making it suitable for intermediate to advanced programmers looking to enhance their skills in algorithmic problem-solving.
