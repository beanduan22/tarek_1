Problem ID: abc350_d
Problem Content:
There is an SNS used by N users, labeled with numbers from 1 to N.
In this SNS, two users can become friends with each other.
Friendship is bidirectional; if user X is a friend of user Y, user Y is always a friend of user X.
Currently, there are M pairs of friendships on the SNS, with the i-th pair consisting of users A_i and B_i.
Determine the maximum number of times the following operation can be performed:

- Operation: Choose three users X, Y, and Z such that X and Y are friends, Y and Z are friends, but X and Z are not. Make X and Z friends.

Input

The input is given from Standard Input in the following format:
N M
A_1 B_1
\vdots
A_M B_M

Output

Print the answer.

Constraints


- 2 \leq N \leq 2 \times 10^5
- 0 \leq M \leq 2 \times 10^5
- 1 \leq A_i < B_i \leq N
- The pairs (A_i, B_i) are distinct.
- All input values are integers.

Sample Input 1

4 3
1 2
2 3
1 4

Sample Output 1

3

Three new friendships with a friend's friend can occur as follows:

- User 1 becomes friends with user 3, who is a friend of their friend (user 2)
- User 3 becomes friends with user 4, who is a friend of their friend (user 1)
- User 2 becomes friends with user 4, who is a friend of their friend (user 1)

There will not be four or more new friendships.

Sample Input 2

3 0

Sample Output 2

0

If there are no initial friendships, no new friendships can occur.

Sample Input 3

10 8
1 2
2 3
3 4
4 5
6 7
7 8
8 9
9 10

Sample Output 3

12

Qwen2 Analysis:
The problem presented above involves analyzing relationships in a social network (or graph), determining potential new connections given existing ones, and optimizing based on certain conditions. This problem falls under the domain of **Graph Theory** and specifically pertains to **Social Network Analysis** or **Friendship Graphs**, which are common themes in computer science competitions like programming contests.

### Difficulty Level

- **Medium to Hard**: The problem requires understanding of graph concepts, especially dealing with relationships and connections. It involves reasoning about the structure of friendship networks and applying algorithms efficiently without necessarily having a direct formulaic solution.

### Required Programming Skills

- **Graph Representation**: Ability to represent graphs using adjacency lists or matrices.
- **Depth First Search (DFS)** or **Breadth First Search (BFS)**: For traversing through the graph to find potential new friendships.
- **Counting and Optimization**: Efficient counting of relationships and optimizing based on the given constraints.

### Complexity

The problem is generally considered polynomial in terms of complexity due to its focus on iterating through relations (M) and nodes (N). The most complex aspect involves analyzing the structure of existing friendships to determine potential new ones, which can be optimized with careful algorithm design.

In summary, this question tests a good balance of theoretical knowledge in graph theory and practical programming skills. It's designed to challenge participants' ability to model real-world problems with graphs and optimize algorithms for efficiency.
