Problem ID: abc311_e
Problem Content:
There is a grid with H rows and W columns. Let (i, j) denote the square at the i-th row from the top and j-th column from the left of the grid.
Each square of the grid is holed or not. There are exactly N holed squares: (a_1, b_1), (a_2, b_2), \dots, (a_N, b_N).
When the triple of positive integers (i, j, n) satisfies the following condition, the square region whose top-left corner is (i, j) and whose bottom-right corner is (i + n - 1, j + n - 1) is called a holeless square.

- i + n - 1 \leq H.
- j + n - 1 \leq W.
- For every pair of non-negative integers (k, l) such that 0 \leq k \leq n - 1, 0 \leq l \leq n - 1, square (i + k, j + l) is not holed.

How many holeless squares are in the grid?

Input

The input is given from Standard Input in the following format:
H W N
a_1 b_1
a_2 b_2
\vdots
a_N b_N

Output

Print the number of holeless squares.

Constraints


- 1 \leq H, W \leq 3000
- 0 \leq N \leq \min(H \times W, 10^5)
- 1 \leq a_i \leq H
- 1 \leq b_i \leq W
- All (a_i, b_i) are pairwise different.
- All input values are integers.

Sample Input 1

2 3 1
2 3

Sample Output 1

6

There are six holeless squares, listed below. For the first five, n = 1, and the top-left and bottom-right corners are the same square.

- The square region whose top-left and bottom-right corners are (1, 1).
- The square region whose top-left and bottom-right corners are (1, 2).
- The square region whose top-left and bottom-right corners are (1, 3).
- The square region whose top-left and bottom-right corners are (2, 1).
- The square region whose top-left and bottom-right corners are (2, 2).
- The square region whose top-left corner is (1, 1) and whose bottom-right corner is (2, 2).

Sample Input 2

3 2 6
1 1
1 2
2 1
2 2
3 1
3 2

Sample Output 2

0

There may be no holeless square.

Sample Input 3

1 1 0

Sample Output 3

1

The whole grid may be a holeless square.

Sample Input 4

3000 3000 0

Sample Output 4

9004500500

Qwen2 Analysis:
Based on the given details of this problem, we can categorize it as follows:

**Category**: **Data Structures & Algorithms**

- **Difficulty Level**: Medium to High  
  - The problem involves grid manipulation, which typically requires a good understanding of data structures like arrays or matrices for efficient processing.
  - The nested loops and conditions to check the validity of square regions suggest algorithmic complexity.

- **Required Programming Skills**:
  - Understanding of basic programming concepts (such as loops and conditional statements)
  - Proficiency in handling array indexing
  - Ability to write efficient code to iterate through grids, arrays or matrices

- **Complexity**:  
  - Time Complexity: This problem could potentially have a time complexity based on the grid size (H * W) and the number of holes. In worst-case scenarios when all cells are holed, iterating through each cell might result in O(H*W) operations for checking holes around each square, leading to a higher complexity than the initial linear scan for finding the holes.

  - Space Complexity: The primary concern is space used by storing coordinates and possible modifications to arrays for marking visited or checked areas. However, this problem primarily focuses on computational efficiency rather than memory usage due to the constraints given.

**Conclusion**: This problem tests the ability to handle multidimensional data structures, implement efficient search algorithms (like nested loops), and apply logical reasoning to validate conditions based on coordinates provided. It is suitable for intermediate programmers looking to improve their skills in handling grid-based problems and optimization of code for better performance.
