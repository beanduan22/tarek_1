Problem ID: abc322_e
Problem Content:
AtCoder Inc. is planning to develop a product. The product has K parameters, whose values are currently all zero. The company aims to raise all parameter values to at least P.
There are N development plans. Executing the i-th development plan (1 \le i \le N) increases the value of the j-th parameter by A_{i,j} for every integer j such that 1 \le j \le K, at the cost of C_i.
A development plan cannot be executed more than once. Determine whether the company can achieve its goal, and if it can, find the minimum total cost required to achieve the goal.

Input

The input is given from Standard Input in the following format:
N K P
C_1 A_{1,1} A_{1,2} \dots A_{1,K}
C_2 A_{2,1} A_{2,2} \dots A_{2,K}
\dots
C_N A_{N,1} A_{N,2} \dots A_{N,K}

Output

If AtCoder Inc. can achieve its goal, print the minimum total cost required to achieve the goal; otherwise, print -1.

Constraints


- 1 \le N \le 100
- 1 \le K,P \le 5
- 0 \le A_{i,j} \le P(1 \le i \le N,1 \le j \le K)
- 1 \le C_i \le 10^9(1 \le i \le N)
- All input values are integers.

Sample Input 1

4 3 5
5 3 0 2
3 1 2 3
3 2 4 0
1 0 1 4

Sample Output 1

9

If you execute the first, third, and fourth development plans, each parameter will be 3+2+0=5,0+4+1=5,2+0+4=6, all of which are at least 5, so the goal is achieved. The total cost in this case is 5 + 3 + 1 = 9.
It is impossible to achieve the goal at a total cost of 8 or less. Thus, the answer is 9.

Sample Input 2

7 3 5
85 1 0 1
37 1 1 0
38 2 0 0
45 0 2 2
67 1 1 0
12 2 2 0
94 2 2 1

Sample Output 2

-1

You cannot achieve the goal no matter what you do. Thus, print -1.

Qwen2 Analysis:
The provided programming problem involves optimization using a set of development plans to reach certain goals while minimizing costs under constraints. This type of problem falls into the realm of algorithm design, specifically focusing on algorithms that deal with optimization problems, such as greedy algorithms or more complex techniques like dynamic programming when the standard greedy approach fails.

### Difficulty

- **Conceptual Level**: Moderate
  - The problem introduces a matrix operation (iterating through columns for each row) and constraints management which are common in algorithmic challenges but doesn't require advanced data structures or operations not typically covered at this level.
  
- **Implementation Complexity**: Moderate to High
  - While the solution involves mathematical calculations, implementing an efficient algorithm that correctly handles all edge cases might require careful planning. The use of priority queues (heaps) is hinted through considering dynamic programming and greedy algorithms, where such data structures can optimize the decision-making process.

### Required Programming Skills

- **Dynamic Programming**: Utilizing a DP table to store intermediate results for optimization.
- **Efficient Data Structure Usage**: Prioritization of actions based on cost or impact might require sorting techniques or priority queues.
- **Algorithm Analysis**: Understanding when to stop exploring certain paths in the solution space can save computational resources.

### Complexity

This problem has an input size constraint that makes it feasible even for a greedy approach with careful implementation. However, the optimal strategy depends heavily on how well one can prioritize and order development plans based on their impact versus cost. The complexity could be improved with more sophisticated algorithms like dynamic programming to ensure that all potentially optimal actions are considered without explicitly trying every combination.

### Categories

- **Algorithmic Problem**: Solves a problem using algorithmic techniques.
- **Optimization Challenge**: Requires finding the best solution from multiple options.
- **Greedy Algorithms**: Students might initially consider greedy approaches but will learn about potential limitations and need to optimize further with more complex strategies like dynamic programming.

This categorization provides insight into the educational value of this problem for students learning about optimization algorithms in computer science, emphasizing both theoretical concepts and practical application through coding challenges.
