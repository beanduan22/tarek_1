Problem ID: abc303_e
Problem Content:
A graph with (k+1) vertices and k edges is called a level-k\ (k\geq 2) star if and only if:

- it has a vertex that is connected to each of the other k vertices with an edge, and there are no other edges.

At first, Takahashi had a graph consisting of stars.  He repeated the following operation until every pair of vertices in the graph was connected:

- choose two vertices in the graph.  Here, the vertices must be disconnected, and their degrees must be both 1.  Add an edge that connects the chosen two vertices.

He then arbitrarily assigned an integer from 1 through N to each of the vertices in the graph after the procedure.  The resulting graph is a tree; we call it T.  T has (N-1) edges, the i-th of which connects u_i and v_i.
Takahashi has now forgotten the number and levels of the stars that he initially had.  Find them, given T.

Input

The input is given from Standard Input in the following format:
N
u_1 v_1
\vdots
u_{N-1} v_{N-1}

Output

Suppose that Takahashi initially had M stars, whose levels were L=(L_1,L_2,\ldots,L_M).
Sort L in ascending order, and print them with spaces in between.
We can prove that the solution is unique in this problem.

Constraints


- 3\leq N\leq 2\times 10^5
- 1\leq u_i, v_i\leq N
- The given graph is an N-vertex tree obtained by the procedure in the problem statement.
- All values in the input are integers.

Sample Input 1

6
1 2
2 3
3 4
4 5
5 6

Sample Output 1

2 2

Two level-2 stars yield T, as the following figure shows:

Sample Input 2

9
3 9
7 8
8 6
4 6
4 1
5 9
7 3
5 2

Sample Output 2

2 2 2

Sample Input 3

20
8 3
8 18
2 19
8 20
9 17
19 7
8 7
14 12
2 15
14 10
2 13
2 16
2 1
9 5
10 15
14 6
2 4
2 11
5 12

Sample Output 3

2 3 4 7

Qwen2 Analysis:
The problem described above can be classified under several categories in terms of difficulty, required programming skills, and complexity:

### Difficulty Level:
- **High**: The problem requires deep understanding of graph theory concepts like trees, star graphs, and the ability to analyze a given tree structure. It also involves implementing logic related to sorting arrays and working with adjacency relationships between nodes.
  
### Required Programming Skills:
- **Graph Theory**: Understanding how to represent graphs (in this case, a tree) using data structures like adjacency lists or matrices is crucial.
- **Tree Manipulation**: Being able to traverse the graph/tree in different ways (e.g., DFS for finding specific patterns).
- **Data Structures**: Efficient use of data structures to store and manipulate the star levels and other related information as you iterate through the graph.
- **Algorithm Design**: The ability to design algorithms that can identify stars within a tree based on edge connections is essential.

### Algorithmic Complexity:
- **Time Complexity**: While not overly complex in terms of time complexity (e.g., potentially \(O(N + E)\) where \(E\) is edges, since it involves traversing the entire graph), implementing the algorithm efficiently requires careful consideration to avoid unnecessary computations.
- **Space Complexity**: The space required should be manageable as most operations involve basic data structures like arrays and hash maps.

### Problem-Solving Approach:
- **Understanding the problem statement** clearly lays out what you need to achieve (identifying stars of different levels within a tree).
- **Logical Reasoning**: The approach involves reasoning about how trees can be formed from stars by adding edges, which requires understanding adjacency relationships in graphs.
- **Implementation Details**: Successfully solving this problem hinges on effectively implementing algorithms that can identify the necessary patterns in the given data (tree structure).

### Conclusion:
This problem leans towards being quite challenging due to its requirement for advanced knowledge of graph theory and algorithm design. It's suitable for experienced programmers or students who are looking to deepen their understanding of these topics by tackling complex problems. The solution involves not only technical skills but also careful logical reasoning about how graphs transform under certain operations, making it a great exercise for enhancing problem-solving abilities in computer science and algorithmic programming.
