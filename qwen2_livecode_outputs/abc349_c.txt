Problem ID: abc349_c
Problem Content:
A string T of length 3 consisting of uppercase English letters is an airport code for a string S of lowercase English letters if and only if T can be derived from S by one of the following methods:

- Take a subsequence of length 3 from S (not necessarily contiguous) and convert it to uppercase letters to form T.
- Take a subsequence of length 2 from S (not necessarily contiguous), convert it to uppercase letters, and append X to the end to form T.

Given strings S and T, determine if T is an airport code for S.

Input

The input is given from Standard Input in the following format:
S
T

Output

Print Yes if T is an airport code for S, and No otherwise.

Constraints


- S is a string of lowercase English letters with a length between 3 and 10^5, inclusive.
- T is a string of uppercase English letters with a length of 3.

Sample Input 1

narita
NRT

Sample Output 1

Yes

The subsequence nrt of narita, when converted to uppercase, forms the string NRT, which is an airport code for narita.

Sample Input 2

losangeles
LAX

Sample Output 2

Yes

The subsequence la of losangeles, when converted to uppercase and appended with X, forms the string LAX, which is an airport code for losangeles.

Sample Input 3

snuke
RNG

Sample Output 3

No

Qwen2 Analysis:
Based on the description of the problem provided:

1. **Difficulty**: The problem involves string manipulation, understanding subsequence extraction from a larger sequence, and condition checking for converting subsequences to uppercase. These are relatively basic concepts in computer science and algorithmic thinking, making it suitable for beginners or as an easy-level problem.

2. **Required Programming Skills**: It requires proficiency in working with strings in the programming language of choice (since the input is given as a string). Basic skills such as accessing substring parts from a larger string, manipulating characters to convert them to uppercase, and checking conditions are sufficient.

3. **Complexity**: The algorithmic complexity here involves scanning through the sequence once or twice for extracting subsequences, which is linear time O(n), where n could be up to 10^5 in the worst case (the length of string S). No additional data structures seem necessary beyond basic variables to store strings and indices.

Considering these points, this problem can be categorized as follows:
- **Category**: Easy - Beginner Friendly
- **Skill Levels Required**: Basic programming skills with some knowledge of string handling
- **Algorithmic Complexity**: Linear time complexity (O(n))

The nature of the problem aligns well with an introductory lesson or practice set for someone learning to manipulate strings in a programming language, focusing on fundamental operations and condition checking.
