Problem ID: abc344_b
Problem Content:
You are given N integers A_1,A_2,\dots,A_N, one per line, over N lines. However, N is not given in the input.
Furthermore, the following is guaranteed:

- A_i \neq 0 ( 1 \le i \le N-1 )
- A_N = 0

Print A_N, A_{N-1},\dots,A_1 in this order.

Input

The input is given from Standard Input in the following format:
A_1
A_2
\vdots
A_N

Output

Print A_N, A_{N-1}, \dots, A_1 in this order, as integers, separated by newlines.

Constraints


- All input values are integers.
- 1 \le N \le 100
- 1 \le A_i \le 10^9 ( 1 \le i \le N-1 )
- A_N = 0

Sample Input 1

3
2
1
0

Sample Output 1

0
1
2
3

Note again that N is not given in the input.
Here, N=4 and A=(3,2,1,0).

Sample Input 2

0

Sample Output 2

0

A=(0).

Sample Input 3

123
456
789
987
654
321
0

Sample Output 3

0
321
654
987
789
456
123

Qwen2 Analysis:
The problem described here is of a moderate level in terms of difficulty. It requires understanding of basic input/output operations, arrays or lists (in this context represented as sequences of integers), loops, and some specific use case handling for edge cases like when `N` isn't provided directly in the input.

**Required Programming Skills:**

1. **Data Input:** The problem involves reading multiple integer inputs from standard input (`stdin`). This requires understanding how to read an integer or a sequence of integers in programming languages.

2. **Looping and Iteration:** To print elements in reverse order, you would need to iterate through the array/list from the end to the beginning. Loop control statements (like `for` loops) will be crucial here.

3. **Handling Edge Cases:** The problem specifies constraints such as `1 ≤ N ≤ 100` and `1 ≤ A_i ≤ 10^9`, but it does not specify how many integers are being inputted or the value of `N`. This necessitates a robust way to determine when you've reached the end of your input sequence.

4. **Print Statements:** Proper use of output operations (`print` or similar) is necessary, especially in handling newline characters properly as specified by `separated by newlines`.

**Algorithm Complexity:**

- **Time Complexity:** Since it involves iterating over a potentially variable-sized array (of up to 100 elements), the time complexity is linear relative to the size of the input. In Big O notation, this would be denoted as `O(N)`.

- **Space Complexity:** This problem likely uses only a fixed amount of space for storing variables and does not scale with the size of the input other than the space required by `N` and the list elements themselves (`A_i`). Hence, it has constant or `O(1)` space complexity if considering only the extra space for temporary storage.

**Category:**

- **Educational Programming Languages:** Python, C++, Java, or any language that supports loops, arrays, and input/output operations well would be suitable to solve this problem.
  
In summary, the problem requires fundamental programming skills but also tests handling of edge cases and iterative processes efficiently. The solution should ideally demonstrate good practices in data structure usage (like dynamically managing lists or arrays), loop logic, and output formatting for clear presentation of results.

The required solution does not involve complex algorithms or data structures beyond basic array manipulation, making it appropriate for intermediate-level learners seeking to enhance their understanding of control flow statements and input/output operations in programming.
