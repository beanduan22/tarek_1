Problem ID: 1899_D
Problem Content:
Yarik is a big fan of many kinds of music. But Yarik loves not only listening to music but also writing it. He likes electronic music most of all, so he has created his own system of music notes, which, in his opinion, is best for it.

Since Yarik also likes informatics, in his system notes are denoted by integers of $2^k$, where $k \ge 1$ — a positive integer. But, as you know, you can't use just notes to write music, so Yarik uses combinations of two notes. The combination of two notes $(a, b)$, where $a = 2^k$ and $b = 2^l$, he denotes by the integer $a^b$.

For example, if $a = 8 = 2^3$, $b = 4 = 2^2$, then the combination $(a, b)$ is denoted by the integer $a^b = 8^4 = 4096$. Note that different combinations can have the same notation, e.g., the combination $(64, 2)$ is also denoted by the integer $4096 = 64^2$.

Yarik has already chosen $n$ notes that he wants to use in his new melody. However, since their integers can be very large, he has written them down as an array $a$ of length $n$, then the note $i$ is $b_i = 2^{a_i}$. The integers in array $a$ can be repeated.

The melody will consist of several combinations of two notes. Yarik was wondering how many pairs of notes $b_i, b_j$ $(i < j)$ exist such that the combination $(b_i, b_j)$ is equal to the combination $(b_j, b_i)$. In other words, he wants to count the number of pairs $(i, j)$ $(i < j)$ such that $b_i^{b_j} = b_j^{b_i}$. Help him find the number of such pairs.

Input

The first line of the input contains one integer $t$ ($1 \le t \le 10^4$) — the number of test cases.

The first line of each test case contains one integer $n$ ($1 \leq n \leq 2 \cdot 10^5$) — the length of the arrays.

The next line contains $n$ integers $a_1, a_2, \dots, a_n$ ($1 \leq a_i \leq 10^9$) — array $a$.

It is guaranteed that the sum of $n$ over all test cases does not exceed $2 \cdot 10^5$.

Output

For each test case, output the number of pairs that satisfy the given condition.Sample Input 1:
5

1

2

4

3 1 3 2

2

1000 1000

3

1 1 1

19

2 4 1 6 2 8 5 4 2 10 5 10 8 7 4 3 2 6 10



Sample Output 1:

0
2
1
3
19


Qwen2 Analysis:
The given programming problem involves mathematical concepts such as powers of two, binary representations, and counting pairs in an array that satisfy a specific condition. It requires understanding of integer arithmetic operations (powers) and efficient ways to count certain elements within arrays.

**Category:**
1. **Difficulty Level:** Medium-High.
2. **Programming Skills Required:** Basic understanding of mathematics related to powers of two, familiarity with algorithms for counting pairs in data structures like arrays or lists, experience with optimization techniques such as sorting or hashing.
3. **Complexity:**
   - Time Complexity: The core part involves comparing elements after calculating their corresponding values based on given conditions ($2^{a_i}$). This operation might be iterative and potentially complex depending on the implementation of power calculations, but it can be optimized using precomputation for powers up to $10^9$.
   - Space Complexity: Minimal due to the use of a single array for input.

**Algorithmic Approach:**
1. **Preprocessing:** Calculate or precompute all required values based on powers of two and their binary representations, which could help in reducing time complexity during comparison.
2. **Sorting:** Sort the given list to optimize finding pairs that can potentially satisfy the condition ($b_i^{b_j} = b_j^{b_i}$).
3. **Pair Counting:** Use a counting or hashing approach to identify matching elements efficiently by checking each pair, keeping in mind that if $a^b = b^a$, then either both are equal (which should be squared), or they must have specific relationships based on their binary representations.
4. **Avoiding Redundancy:** Since the problem specifies considering pairs where $i < j$, ensure to avoid counting any pair twice.

This problem could potentially be solved using dynamic programming techniques if applied carefully, optimizing for both time and space efficiency by possibly storing intermediate results or counts that can be reused during subsequent calculations.

**Key Points:**
- **Efficiency:** Optimizing the power calculation and comparison process is crucial.
- **Data Structures:** Utilization of data structures like maps or hash tables might help in tracking frequencies efficiently without needing to recompute values repeatedly for each pair comparison.
- **Mathematical Insights:** Understanding properties related to powers (e.g., when $2^a = 2^b$) can simplify the problem-solving process significantly.

Overall, this question blends concepts from mathematics and algorithms, requiring a good understanding of binary representations and efficient data handling techniques.
