Problem ID: abc306_a
Problem Content:
You are given a string S of length N consisting of lowercase English letters.
We denote the i-th character of S by S_i.
Print the string of length 2N obtained by concatenating S_1,S_1,S_2,S_2,\dots,S_N, and S_N in this order.
For example, if S is beginner, print bbeeggiinnnneerr.

Input

The input is given from Standard Input in the following format:
N
S

Output

Print the answer.

Constraints


- N is an integer such that 1 \le N \le 50.
- S is a string of length N consisting of lowercase English letters.

Sample Input 1

8
beginner

Sample Output 1

bbeeggiinnnneerr

It is the same as the example described in the problem statement.

Sample Input 2

3
aaa

Sample Output 2

aaaaaa

Qwen2 Analysis:
The problem provided can be categorized as an easy-level question focusing primarily on string manipulation concepts in programming. 

### Analysis:

1. **Input Processing:**
   - The input consists of a single line containing two pieces of data: the integer `N`, which represents the length of the string `S`, and the string `S` itself.
   - The constraints for this problem are relatively low (`N <= 50`), suggesting that brute force approaches should perform well, making it suitable for beginners or as an easy-level question.

2. **Algorithm:**
   - The task requires generating a new string by concatenating each character twice in order from `S`.
   - This involves iterating over the characters of `S`, doubling each character positionally.
   - Python offers simplicity and ease with string slicing, making it a good choice for implementing this solution.

3. **Solution Complexity:**
   - Since we're dealing with strings of length up to 50, linear time complexity (O(N)) is sufficient. The operation performed involves traversing the input string once.
   - No complex data structures or algorithms are required; straightforward looping and concatenation should suffice.

4. **Required Programming Skills:**
   - Basic knowledge of string manipulation in a programming language like Python.
   - Familiarity with loops and conditionals to iterate over the elements of the string.
   - Ability to concatenate strings efficiently, which is typically handled by built-in functions.

5. **Output Expectation:**
   - The output is straightforward and relies on correctly implementing the described operation without requiring advanced knowledge or additional optimization techniques.

### Conclusion:
Given these points, this problem aligns well with the "Easy" category for coding challenges. It tests fundamental programming skills such as string handling and iterative processes without introducing complexities that would typically be found in intermediate or advanced problems. The question is a clear example of applying basic algorithms to manipulate strings efficiently under specified constraints.
