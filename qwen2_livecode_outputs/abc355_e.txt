Problem ID: abc355_e
Problem Content:
This is an interactive problem (where your program interacts with the judge via input and output).
You are given a positive integer N and integers L and R such that 0 \leq L \leq R < 2^N. The judge has a hidden sequence A = (A_0, A_1, \dots, A_{2^N-1}) consisting of integers between 0 and 99, inclusive.
Your goal is to find the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100. However, you cannot directly know the values of the elements in the sequence A. Instead, you can ask the judge the following question:

- Choose non-negative integers i and j such that 2^i(j+1) \leq 2^N. Let l = 2^i j and r = 2^i (j+1) - 1. Ask for the remainder when A_l + A_{l+1} + \dots + A_r is divided by 100.

Let m be the minimum number of questions required to determine the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100 for any sequence A. You need to find this remainder within m questions.

Input and Output

This is an interactive problem (where your program interacts with the judge via input and output).
First, read the integers N, L, and R from Standard Input:
N L R

Then, repeat asking questions until you can determine the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100. Each question should be printed in the following format:
? i j

Here, i and j must satisfy the following constraints:

- i and j are non-negative integers.
- 2^i(j+1) \leq 2^N

The response to the question will be given in the following format from Standard Input:
T

Here, T is the answer to the question, which is the remainder when A_l + A_{l+1} + \dots + A_r is divided by 100, where l = 2^i j and r = 2^i (j+1) - 1.
If i and j do not satisfy the constraints, or if the number of questions exceeds m, then T will be -1.
If the judge returns -1, your program is already considered incorrect. In this case, terminate the program immediately.
Once you have determined the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100, print the remainder S in the following format and terminate the program immediately:
! S

Input and Output

This is an interactive problem (where your program interacts with the judge via input and output).
First, read the integers N, L, and R from Standard Input:
N L R

Then, repeat asking questions until you can determine the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100. Each question should be printed in the following format:
? i j

Here, i and j must satisfy the following constraints:

- i and j are non-negative integers.
- 2^i(j+1) \leq 2^N

The response to the question will be given in the following format from Standard Input:
T

Here, T is the answer to the question, which is the remainder when A_l + A_{l+1} + \dots + A_r is divided by 100, where l = 2^i j and r = 2^i (j+1) - 1.
If i and j do not satisfy the constraints, or if the number of questions exceeds m, then T will be -1.
If the judge returns -1, your program is already considered incorrect. In this case, terminate the program immediately.
Once you have determined the remainder when A_L + A_{L+1} + \dots + A_R is divided by 100, print the remainder S in the following format and terminate the program immediately:
! S

Constraints


- 1 \leq N \leq 18
- 0 \leq L \leq R \leq 2^N - 1
- All input values are integers.



Qwen2 Analysis:
The problem described above can be categorized as an **Interactive Programming Problem**, with a specific focus on **Divide-and-Conquer** strategy. Here's why:

1. **Interactivity**: The interaction between your program and the judge through input/output operations suggests that this is indeed an interactive programming challenge.

2. **Problem Solving Strategy**: The solution involves making strategic queries based on powers of two to divide the sequence into sub-sequences, leveraging binary search principles but applied iteratively in a manner similar to dynamic programming or divide-and-conquer strategies where each step depends on results from previous steps (queries).

3. **Algorithmic Complexity**:
   - **Time Complexity**: The algorithm has a time complexity that is logarithmic with respect to \(N\) due to dividing the problem into halves repeatedly, making it efficient for large inputs.
   - **Space Complexity**: The space complexity is relatively low since it mostly depends on the depth of recursion or iteration used in calculating the remainder of sums.

4. **Skill Requirements**:
   - **Algorithm Design**: Requires skills in designing algorithms that can efficiently reduce a problem to smaller instances until a solution can be directly computed.
   - **Interactive Input/Output Handling**: Knowledge of how to write code that interacts with an external program or judge, which includes managing state and responses correctly.

5. **Problem Specifics**:
   - **Range Constraints**: The constraint \(1 \leq N \leq 18\) suggests moderate complexity, as the size of \(N\) influences the maximum depth of recursion but is still within reasonable limits for interactive problem-solving.
   - **Sequence Sum Modulo Problem**: It involves calculating sums modulo a number (in this case, 100) which can require handling large numbers efficiently or using modular arithmetic to avoid overflow.

6. **Educational Value**:
   - The problem promotes understanding of dynamic programming principles through a practical application where decisions are made based on intermediate results.
   - It also emphasizes the importance of being mindful of resource limits (in this case, question limits) in interactive problems.

Thus, it can be labeled as an Intermediate to Advanced level problem requiring good grasp of algorithmic techniques and efficient implementation skills. Interactive programming challenges often push developers beyond standard textbook algorithms by embedding them within real-time decision-making processes based on feedback from the system being simulated or judged against.
