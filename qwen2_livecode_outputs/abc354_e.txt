Problem ID: abc354_e
Problem Content:
Takahashi and Aoki are playing a game using N cards. The front side of the i-th card has A_i written on it, and the back side has B_i written on it. Initially, the N cards are laid out on the table. With Takahashi going first, the two players take turns performing the following operation:

- Choose a pair of cards from the table such that either the numbers on their front sides are the same or the numbers on their back sides are the same, and remove these two cards from the table. If no such pair of cards exists, the player cannot perform the operation.

The player who is first to be unable to perform the operation loses, and the other player wins.
Determine who wins if both players play optimally.

Input

The input is given from Standard Input in the following format:
N
A_1 B_1
A_2 B_2
\vdots
A_N B_N

Output

Print Takahashi if Takahashi wins when both players play optimally, and Aoki otherwise.

Constraints


- 1 \leq N \leq 18
- 1 \leq A_i, B_i \leq 10^9
- All input values are integers.

Sample Input 1

5
1 9
2 5
4 9
1 4
2 5

Sample Output 1

Aoki

If Takahashi first removes

- 
the first and third cards: Aoki can win by removing the second and fifth cards.

- 
the first and fourth cards: Aoki can win by removing the second and fifth cards.

- 
the second and fifth cards: Aoki can win by removing the first and third cards.


These are the only three pairs of cards Takahashi can remove in his first move, and Aoki can win in all cases. Therefore, the answer is Aoki.

Sample Input 2

9
3 2
1 7
4 1
1 8
5 2
9 8
2 1
6 8
5 2

Sample Output 2

Takahashi

Qwen2 Analysis:
The given programming problem involves game theory and optimization. Let's break down what it requires:

- The primary task is to determine the winner between two players (Takahashi and Aoki) playing a strategic card game where they take turns removing pairs of cards based on certain conditions related to their numbers.
- The game has clear rules for how moves are made, including when play can no longer proceed.
- The solution hinges on understanding optimal strategies that both players might adopt, indicating some elements of computational complexity theory or algorithmic strategy might be involved.

Based on these characteristics:

1. **Difficulty**: Intermediate - while the concept doesn't require deep theoretical knowledge, implementing a proper game-playing AI with optimal strategies can introduce complexity in programming and logic design.

2. **Required Programming Skills**:
   - Basic understanding of algorithms (e.g., iteration, conditionals).
   - Ability to model state changes based on game rules.
   - Implementation experience, particularly with control flow and data structures like arrays or lists for storing the cards' state.

3. **Complexity**: The use of strategies and optimization suggests some aspects might be related to computational complexity, though without detailed analysis, it's hard to pin down whether it's linear, polynomial, exponential, etc., in terms of time complexity. However, since it involves decision-making based on multiple options (each player having at least two choices per turn), it could hint at a higher degree of computational complexity than simple linear problems.

**Category Prediction**: Based on these factors, this problem likely falls into the **Intermediate/Advanced Programming and Algorithms** category. It requires not only solid programming skills but also understanding of basic game theory or optimization strategies to develop an efficient solution.

This categorization suggests that candidates should have a good grasp of algorithmic thinking and be able to apply it to devise optimal moves in a strategic context, which is essential for solving such problems effectively.
