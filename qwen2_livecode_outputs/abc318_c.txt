Problem ID: abc318_c
Problem Content:
Takahashi is planning an N-day train trip.
For each day, he can pay the regular fare or use a one-day pass.
Here, for 1\leq i\leq N, the regular fare for the i-th day of the trip is F_i yen.
On the other hand, a batch of D one-day passes is sold for P yen. You can buy as many passes as you want, but only in units of D.
Each purchased pass can be used on any day, and it is fine to have some leftovers at the end of the trip.
Find the minimum possible total cost for the N-day trip, that is, the cost of purchasing one-day passes plus the total regular fare for the days not covered by one-day passes.

Input

The input is given from Standard Input in the following format:
N D P
F_1 F_2 \ldots F_N

Output

Print the minimum possible total cost for the N-day trip.

Constraints


- 1\leq N\leq 2\times 10^5
- 1\leq D\leq 2\times 10^5
- 1\leq P\leq 10^9
- 1\leq F_i\leq 10^9
- All input values are integers.

Sample Input 1

5 2 10
7 1 6 3 6

Sample Output 1

20

If he buys just one batch of one-day passes and uses them for the first and third days, the total cost will be (10\times 1)+(0+1+0+3+6)=20, which is the minimum cost needed.
Thus, print 20.

Sample Input 2

3 1 10
1 2 3

Sample Output 2

6

The minimum cost is achieved by paying the regular fare for all three days.

Sample Input 3

8 3 1000000000
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000

Sample Output 3

3000000000

The minimum cost is achieved by buying three batches of one-day passes and using them for all eight days.
Note that the answer may not fit into a 32-bit integer type.

Qwen2 Analysis:
This problem can be categorized as **Dynamic Programming with Greedy**: It requires understanding of both dynamic programming techniques for optimization problems and the greedy choice property which enables making locally optimal choices at each step expecting to find a global optimum.

**Required Skills:**
1. **Sorting:** To potentially optimize the solution by sorting costs or batches.
2. **Looping:** For iterating through all days and applying decision-making logic.
3. **Conditional Logic:** To decide whether to purchase one-day passes based on cost comparison between regular fare vs pass price.
4. **Integer Overflow Handling:** Ensuring calculations don't overflow for large inputs, possibly requiring 64-bit data types.

**Problem Complexity:**
- The problem size can be large (up to \(2 \times 10^5\)), which suggests the solution must optimize space and time usage efficiently.
- It requires careful handling of edge cases (like when buying a pass actually exceeds the cost of regular fares).
- Efficiently calculating costs for each day involves trade-offs between buying passes vs regular fare, indicating an intricate decision-making process.

**Problem Type:**
Dynamic Programming with Greedy Choice: This involves making decisions based on local optima while aiming to solve the global problem optimally. It utilizes DP principles by breaking down the problem into smaller subproblems (deciding per day) and using their solutions to find the best overall solution.

The dynamic programming aspect comes from deciding at each step whether buying a one-day pass is cheaper than paying the regular fare for that day, considering the costs accumulated up to that point. The greedy choice property allows making an optimal decision on a single pass vs regular fare without re-computing past decisions. 

In summary, this problem blends optimization with decision-making under constraints, typical of problems requiring dynamic programming or greedy approaches, especially when dealing with large input sizes and cost considerations over multiple days.
