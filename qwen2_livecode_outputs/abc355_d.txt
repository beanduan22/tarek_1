Problem ID: abc355_d
Problem Content:
You are given N intervals of real numbers. The i-th (1 \leq i \leq N) interval is [l_i, r_i]. Find the number of pairs (i, j)\,(1 \leq i < j \leq N) such that the i-th and j-th intervals intersect.

Input

The input is given from Standard Input in the following format:
N
l_1 r_1
l_2 r_2
\vdots
l_N r_N

Output

Print the answer.

Constraints


- 2 \leq N \leq 5 \times 10^5
- 0 \leq l_i < r_i \leq 10^9
- All input values are integers.

Sample Input 1

3
1 5
7 8
3 7

Sample Output 1

2

The given intervals are [1,5], [7,8], [3,7]. Among these, the 1-st and 3-rd intervals intersect, as well as the 2-nd and 3-rd intervals, so the answer is 2.

Sample Input 2

3
3 4
2 5
1 6

Sample Output 2

3

Sample Input 3

2
1 2
3 4

Sample Output 3

0

Qwen2 Analysis:
The given programming problem involves finding intersecting intervals from a set of N real-number intervals. It is a classic computational geometry problem but can also be approached through the principles of algorithm design that include sorting, prefix sums or dynamic programming techniques.

**Category Prediction:**

1. **Difficulty**: The problem falls under medium to hard difficulty levels because it requires efficient computation and understanding of interval intersection properties along with careful handling of edge cases (like intervals where one ends before another starts).

2. **Required Programming Skills**: It requires skills in:
   - Reading and parsing input data efficiently.
   - Implementing sorting algorithms for the intervals based on their starting points or end points depending upon the approach used.
   - Possibility of using advanced data structures like segment trees, interval trees, or hash maps for optimization if N is very large.

3. **Complexity**: The solution could vary in complexity:
   - Naive Approach: Sorting all pairs and checking intersection would be O(N^2) which might not work well with constraints.
   - Optimized Approach: Using efficient algorithms, it can be done in linear time if implemented correctly (e.g., sorting intervals based on start points then using prefix sums to count intersections).

**Solution Strategy**:

Given that the problem is described as part of a competitive programming contest or similar resource, an optimized solution likely involves:
1. **Sorting**: Sort all intervals by their starting points and keep track of when intervals end (use a data structure like a vector with each element containing interval details).
2. **Prefix Sum Trick**: As you iterate through the sorted list from start to finish, maintain a counter that tracks how many intervals are currently "open" or overlapping with the current one being evaluated. This can be done by updating the count whenever an interval starts (increasing) and ends (decreasing).

**Conclusion**:

The given problem fits into the categories of Computational Geometry, Data Structures & Algorithms, and Optimization Problems within the realm of competitive programming. It requires knowledge of sorting algorithms, prefix sums for cumulative counting, and efficient handling of data structures to manage intervals effectively without exceeding time complexity constraints.

Implementing this problem efficiently involves choosing the right approach (sort-based method optimized with a counter to keep track of overlapping intervals) which is both fast and scalable as per the problem's constraints.
