Problem ID: abc325_e
Problem Content:
There are N cities in a certain country.
You will travel from your office in city 1 to a destination in city N, via zero or more cities.
Two types of transportation are available: company car and train. The time required to travel from city i to city j is as follows:

- D_{i,j} \times A minutes by company car, and
- D_{i,j} \times B + C minutes by train.

You can switch from company car to train, but not vice versa.
You can do so without spending time, but only in a city.
What is the minimum time in minutes to travel from city 1 to city N?

Input

The input is given from Standard Input in the following format:
N A B C
D_{1,1} D_{1,2} \ldots D_{1,N}
D_{2,1} D_{2,2} \ldots D_{2,N}
\vdots
D_{N,1} D_{N,2} \ldots D_{N,N}

Output

Print the answer as an integer.

Constraints


- 2 \leq N \leq 1000
- 1 \leq A, B, C \leq 10^6 
- D_{i,j} \leq 10^6
- D_{i,i} = 0
- D_{i,j} = D_{j,i} > 0 (i \neq j)
- All input values are integers.

Sample Input 1

4 8 5 13
0 6 2 15
6 0 3 5
2 3 0 13
15 5 13 0

Sample Output 1

78

You can travel from city 1 to city 4 in a total of 78 minutes by moving as follows.

- Travel by company car from city 1 to city 3. This takes 2 \times 8 = 16 minutes.
- Travel by company car from city 3 to city 2. This takes 3 \times 8 = 24 minutes.
- Travel by train from city 2 to city 4. This takes 5 \times 5 + 13 = 38 minutes.

It is impossible to travel from city 1 to city 4 in less than 78 minutes.

Sample Input 2

3 1 1000000 1000000
0 10 1
10 0 10
1 10 0

Sample Output 2

1

Sample Input 3

5 954257 954213 814214
0 84251 214529 10017 373342
84251 0 91926 32336 164457
214529 91926 0 108914 57762
10017 32336 108914 0 234705
373342 164457 57762 234705 0

Sample Output 3

168604826785

Qwen2 Analysis:
This problem falls into the category of Graph Algorithms with a specific emphasis on dynamic programming and optimization techniques.

**Difficulty**: The problem is moderately challenging. It requires understanding of graph traversal concepts like shortest path algorithms but then twists this concept by incorporating transportation options (car vs train) which makes it more complex than a standard shortest path problem.

**Required Programming Skills**:
1. **Graph Representation**: Understanding how to represent a weighted directed graph as input data.
2. **Dynamic Programming**: Ability to apply dynamic programming techniques in a scenario where there are two modes of transportation with different costs and traversal options.
3. **Optimization Techniques**: The use of optimizations like memorization or precomputations for parts of the solution.

**Complexity**:
The complexity arises from considering both car and train travel simultaneously which leads to an expanded search space compared to a standard shortest path problem where you might only consider one mode of transport. The dynamic programming approach helps manage this complexity by breaking down the problem into smaller subproblems (i.e., finding minimum time to reach each city) and storing solutions for these subproblems in order not to recalculate them.

The algorithm would involve:
1. **Initialization**: Setting up a DP table that can hold minimum time calculations for reaching every city from city 1.
2. **Iteration**: Iterating through all cities, considering both car and train paths at each step to update the DP table with minimum times.
3. **Optimization**: Efficiently updating the DP table by comparing costs of car and train travel between two consecutive cities and ensuring not to recalculate already computed minimum times.

**Category Prediction**: Based on these aspects, this problem would likely be categorized under:
- **Intermediate Algorithmic Problem**
- **Dynamic Programming and Graph Algorithms**
- **Optimization in Transportation Networks**

Solving problems like this requires a solid understanding of algorithms, data structures, and the ability to abstract real-world scenarios into computational models. It's suitable for those who are comfortable with coding challenges that involve advanced concepts while requiring careful logical reasoning and optimization strategies.
