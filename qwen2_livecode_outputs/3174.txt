Problem ID: 3174
Problem Content:
You are given a 0-indexed binary string s having an even length.
A string is beautiful if it's possible to partition it into one or more substrings such that:

Each substring has an even length.
Each substring contains only 1's or only 0's.

You can change any character in s to 0 or 1.
Return the minimum number of changes required to make the string s beautiful.
 
Example 1:

Input: s = "1001"
Output: 2
Explanation: We change s[1] to 1 and s[3] to 0 to get string "1100".
It can be seen that the string "1100" is beautiful because we can partition it into "11|00".
It can be proven that 2 is the minimum number of changes needed to make the string beautiful.

Example 2:

Input: s = "10"
Output: 1
Explanation: We change s[1] to 1 to get string "11".
It can be seen that the string "11" is beautiful because we can partition it into "11".
It can be proven that 1 is the minimum number of changes needed to make the string beautiful.

Example 3:

Input: s = "0000"
Output: 0
Explanation: We don't need to make any changes as the string "0000" is beautiful already.

 
Constraints:

2 <= s.length <= 10^5
s has an even length.
s[i] is either '0' or '1'.

Qwen2 Analysis:
Based on the description provided for this problem, we can categorize it into several aspects:

### Difficulty:
The problem involves string manipulation with a constraint that requires analyzing adjacent characters (since changes are only possible between pairs of characters). This indicates that the solution would require understanding of iteration techniques and conditional logic. It might involve some level of optimization to ensure efficiency given the constraints, but the core concept is straightforward, making it suitable for an intermediate difficulty problem.

### Required Programming Skills:
The skills needed primarily include:
1. **String Processing:** The ability to iterate through a string efficiently.
2. **Conditional Logic:** Making decisions based on adjacent character values.
3. **Counting Operations:** Keeping track of the minimum number of changes required.
4. **Logical Reasoning:** Determining conditions under which no change is needed or when one change can resolve issues.

### Complexity:
In terms of time complexity, a naive approach might involve checking every possible partition of the string, leading to exponential complexity (2^n, where n is half the length of s). However, given that we need only make changes between pairs and not within individual characters, an optimized solution with linear or near-linear time complexity can be devised by iterating through the string once.

### Conclusion:
This problem falls into a category of algorithmic challenges that are typical for interviews or competitive programming. It requires understanding of basic data structures (like strings) and algorithms such as iteration to solve effectively. The focus on optimization highlights the importance of efficient coding practices and logical reasoning over more complex algorithm design techniques. Hence, this can be classified as an intermediate difficulty problem in terms of both knowledge required and complexity management.

The approach might involve:
1. **Single Pass:** Iterate through the string once.
2. **Conditional Logic:** Use if statements to decide on changes based on adjacent characters.
3. **Optimization:** Minimize unnecessary computations, focusing on transitions that require changes.
4. **Counter or Accumulator:** Keep a count of required changes.

Solutions will vary depending on the language used (e.g., Python, C++, Java), but the core logic remains consistent across them.
