Problem ID: abc314_b
Problem Content:
N people, person 1, person 2, \ldots, person N, are playing roulette.
The outcome of a spin is one of the 37 integers from 0 to 36.
For each i = 1, 2, \ldots, N, person i has bet on C_i of the 37 possible outcomes: A_{i, 1}, A_{i, 2}, \ldots, A_{i, C_i}.
The wheel has been spun, and the outcome is X.
Print the numbers of all people who have bet on X with the fewest bets, in ascending order.
More formally, print all integers i between 1 and N, inclusive, that satisfy both of the following conditions, in ascending order:

- Person i has bet on X.
- For each j = 1, 2, \ldots, N, if person j has bet on X, then C_i \leq C_j.

Note that there may be no number to print (see Sample Input 2).

Input

The input is given from Standard Input in the following format:
N
C_1
A_{1, 1} A_{1, 2} \ldots A_{1, C_1}
C_2
A_{2, 1} A_{2, 2} \ldots A_{2, C_2}
\vdots
C_N
A_{N, 1} A_{N, 2} \ldots A_{N, C_N}
X

Output

Let B_1, B_2, \ldots, B_K be the sequence of numbers to be printed in ascending order.
Using the following format, print the count of numbers to be printed, K, on the first line,
and B_1, B_2, \ldots, B_K separated by spaces on the second line:
K
B_1 B_2 \ldots B_K

Constraints


- 1 \leq N \leq 100
- 1 \leq C_i \leq 37
- 0 \leq A_{i, j} \leq 36
- A_{i, 1}, A_{i, 2}, \ldots, A_{i, C_i} are all different for each i = 1, 2, \ldots, N.
- 0 \leq X \leq 36
- All input values are integers.

Sample Input 1

4
3
7 19 20
4
4 19 24 0
2
26 10
3
19 31 24
19

Sample Output 1

2
1 4

The wheel has been spun, and the outcome is 19.
The people who has bet on 19 are person 1, person 2, and person 4, and the number of their bets are 3, 4, and 3, respectively.
Therefore, among the people who has bet on 19, the ones with the fewest bets are person 1 and person 4.

Sample Input 2

3
1
1
1
2
1
3
0

Sample Output 2

0


The wheel has been spun and the outcome is 0, but no one has bet on 0, so there is no number to print.

Qwen2 Analysis:
Based on the description of this problem:

1. **Problem Type**: This seems like a typical algorithmic problem from competitive programming or similar tasks that require knowledge in data structures and algorithms. It involves processing inputs, maintaining state for multiple individuals (each person), comparing values based on certain criteria, sorting, and outputting results.

2. **Required Skills**:
   - **Data Structures**: Use of arrays, hash maps, or sets to keep track of bets made by each individual.
   - **Algorithm Complexity**: Requires efficient algorithms to handle inputs efficiently for larger N (e.g., using a hash map where keys are outcomes and values are arrays representing the people who bet on that outcome).
   - **Condition Checking**: Implementation of conditions based on comparisons between different individuals' betting patterns.

3. **Complexity**:
   - **Time Complexity**: The algorithm will likely need to iterate over all individuals for each possible outcome (O(N * 37)), which might be optimized by precomputing data structures.
   - **Space Complexity**: Could depend on how the input is stored, but a reasonable scenario could require O(N) space.

Given these factors:

- **Difficulty Level**: Intermediate to Advanced
- **Skill Set Required**: Basic understanding of algorithms (sorting, searching), familiarity with data structures like arrays and maps, ability to implement logic based on multiple conditions.
  
This problem category typically involves:
1. Reading input efficiently and storing it in a suitable structure (e.g., a map where keys are outcomes and values are lists or sets containing the people who bet on that outcome).
2. Iterating over all individuals and outcomes to check their betting patterns according to specified criteria.
3. Sorting or filtering based on conditions (in this case, finding those with the minimum number of bets among those who bet on a particular outcome).
4. Outputting results in the required format.

The solution would likely involve creating data structures for each person's bets and outcomes, then iterating through these to identify people meeting specific criteria before finalizing and outputting the answer according to instructions provided in the problem statement.

In summary, this is an intermediate level coding challenge that requires careful algorithm design and implementation skills, primarily focusing on efficient data handling and condition checking.
