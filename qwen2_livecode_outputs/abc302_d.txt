Problem ID: abc302_d
Problem Content:
Takahashi has decided to give one gift to Aoki and one gift to Snuke.
There are N candidates of gifts for Aoki,
and their values are A_1, A_2, \ldots,A_N.
There are M candidates of gifts for Snuke,
and their values are B_1, B_2, \ldots,B_M.  
Takahashi wants to choose gifts so that the difference in values of the two gifts is at most D.
Determine if he can choose such a pair of gifts.  If he can, print the maximum sum of values of the chosen gifts.

Input

The input is given from Standard Input in the following format:
N M D
A_1 A_2 \ldots A_N
B_1 B_2 \ldots B_M

Output

If he can choose gifts to satisfy the condition,
print the maximum sum of values of the chosen gifts.
If he cannot satisfy the condition, print -1.

Constraints


- 1\leq N,M\leq 2\times 10^5
- 1\leq A_i,B_i\leq 10^{18}
- 0\leq D \leq 10^{18}
- All values in the input are integers.

Sample Input 1

2 3 2
3 10
2 5 15

Sample Output 1

8

The difference of values of the two gifts should be at most 2.
If he gives a gift with value 3 to Aoki and another with value 5 to Snuke, the condition is satisfied, achieving the maximum possible sum of values.
Thus, 3+5=8 should be printed.

Sample Input 2

3 3 0
1 3 3
6 2 7

Sample Output 2

-1

He cannot choose gifts to satisfy the condition.
Note that the candidates of gifts for a person may contain multiple gifts with the same value.

Sample Input 3

1 1 1000000000000000000
1000000000000000000
1000000000000000000

Sample Output 3

2000000000000000000

Note that the answer may not fit into a 32-bit integer type.

Sample Input 4

8 6 1
2 5 6 5 2 1 7 9
7 2 5 5 2 4

Sample Output 4

14

Qwen2 Analysis:
Based on the description of the problem, it seems to involve sorting algorithms, searching techniques, data structures, and greedy strategies. The main challenge lies in efficiently finding pairs that satisfy the given constraints (difference in values ≤ D) while maximizing their sum.

Here's a breakdown:
1. **Input Processing**: Reading integers from stdin into arrays for Aoki's gifts (`A_i`), Snuke's gifts (`B_i`), and the constraint `D`. This requires handling large input sizes efficiently, hence skills in efficient input reading are required.
2. **Sorting**: The first step might involve sorting both lists of gift values. Sorting algorithms such as QuickSort or MergeSort can be used depending on efficiency considerations for different cases (N,M <= 2*10^5).
3. **Binary Search / Greedy Selection**: Given the need to maximize the sum under constraints, we might either use binary search techniques to find the optimal pair efficiently or employ a greedy strategy. This involves selecting gifts from `Aoki` and `Snuke`, ensuring their difference in values is ≤ D while maximizing the total value of chosen gifts.
4. **Output Processing**: Based on whether a valid pair satisfying the constraints was found, print either the maximum sum (`max(a,b)` where `a` belongs to Aoki's list, `b` from Snuke's list) or `-1` if no such pair exists.

This problem falls under categories of:
- **Algorithms**: Sorting and Searching Techniques
- **Data Structures**: Arrays, maybe a priority queue for optimization (though not explicitly mentioned)
- **Programming Skills**: Efficient Input Handling (especially when dealing with large datasets), use of appropriate data types to avoid overflow or underflow issues.

The problem's complexity revolves around:
- The time complexity for sorting (`N log N` and `M log M` where `N,M <= 2*10^5`).
- The space complexity, especially in the context of storing arrays, though this might not be a significant concern given common limits on memory usage.

Given these aspects, it's well-suited for an intermediate to advanced level problem, likely requiring careful algorithmic thinking and optimization skills. Implementing efficient data structures and algorithms can make a significant difference in solving this problem within reasonable time constraints for large inputs.
