Problem ID: abc326_b
Problem Content:
A 326-like number is a three-digit positive integer where the product of the hundreds and tens digits equals the ones digit.
For example, 326,400,144 are 326-like numbers, while 623,777,429 are not.
Given an integer N, find the smallest 326-like number greater than or equal to N. It always exists under the constraints.

Input

The input is given from Standard Input in the following format:
N

Output

Print the answer.

Constraints


- 100 \leq N \leq 919
- N is an integer.

Sample Input 1

320

Sample Output 1

326

320,321,322,323,324,325 are not 326-like numbers, while 326 is a 326-like number.

Sample Input 2

144

Sample Output 2

144

144 is a 326-like number.

Sample Input 3

516

Sample Output 3

600

Qwen2 Analysis:
The given problem can be categorized as an **Easy** problem, involving basic programming concepts such as iteration (using loops), conditional checks, and arithmetic operations.

Here are the main aspects that define its level:

1. **Skill Level**: The task requires only fundamental programming skills like understanding of loops (`for` or `while`) for iterating through numbers, conditions to check if a number meets certain criteria (in this case, being a 326-like number), and basic arithmetic operations.

2. **Complexity**: The problem doesn't involve complex algorithms, recursion, advanced data structures, or multi-threading. Instead, it's focused on simple logic processing and sequence generation.

3. **Data Constraints**: With the constraints provided (`100 ≤ N ≤ 919`), we are dealing with relatively small numbers which can be handled efficiently using basic programming constructs without the need for advanced computational techniques.

In summary, this problem would suit someone who is either learning to code or has just started practicing algorithms. It doesn't require any knowledge of data structures beyond basic ones like arrays or lists and doesn't involve complex mathematical concepts that might confuse beginners. Thus, categorizing it as an **Easy** problem seems appropriate based on the outlined criteria.
