Problem ID: abc322_a
Problem Content:
You are given a string S of length N consisting of A, B, and C.
Find the position where ABC first appears as a (contiguous) substring in S. In other words, find the smallest integer n that satisfies all of the following conditions.

- 1 \leq n \leq N - 2.
- The string obtained by extracting the n-th through (n+2)-th characters of S is ABC.

If ABC does not appear in S, print -1.

Input

The input is given from Standard Input in the following format:
N
S

Output

Print the position where ABC first appears as a substring in S, or -1 if it does not appear in S.

Constraints


- 3 \leq N \leq 100
- S is a string of length N consisting of A, B, and C.

Sample Input 1

8
ABABCABC

Sample Output 1

3

ABC first appears in S at the 3-rd through 5-th characters of S. Therefore, the answer is 3.

Sample Input 2

3
ACB

Sample Output 2

-1

If ABC does not appear in S, print -1.

Sample Input 3

20
BBAAABBACAACABCBABAB

Sample Output 3

13

Qwen2 Analysis:
This problem falls under the category of "String Manipulation" or "Substring Search". It requires basic understanding of string handling in a programming language that supports string slicing or substring extraction. The difficulty level is considered to be 'Easy' since it involves straightforward implementation of logic.

Required Programming Skills:
1. String manipulation: Being able to extract substrings from the input string.
2. Looping and conditions checking: Implementing loops (like for-loop) to iterate through the string elements, and conditions checks like if-else statements.
3. Basic arithmetic operations: In this case, calculating indices.

Complexity:
The time complexity of solving this problem is O(N), where N is the length of the input string S. This is because we need to traverse each character in the string once to find the required substring "ABC". The space complexity is constant (O(1)), assuming that storing 'A', 'B', and 'C' as variables takes constant space.

The solution will involve iterating through each character of the string, checking for a sequence of "A", then "B" after it, and finally "C" after those. If found at any point, return the index position + 1 (as indices are often counted from 0). If no such sequence is found by the end of the iteration, return -1 to indicate that 'ABC' does not appear in the string.

The problem also includes constraints which limit N to a reasonable number (3 ≤ N ≤ 100) and specifies what characters can be present ('A', 'B', 'C') making it manageable for students learning basic string handling techniques.
