Problem ID: abc319_d
Problem Content:
Takahashi is displaying a sentence with N words in a window.
All words have the same height, and the width of the i-th word (1\leq i\leq N) is L _ i.
The words are displayed in the window separated by a space of width 1.
More precisely, when the sentence is displayed in a window of width W, the following conditions are satisfied.

- The sentence is divided into several lines.
- The first word is displayed at the beginning of the top line.
- The i-th word (2\leq i\leq N) is displayed either with a gap of 1 after the (i-1)-th word, or at the beginning of the line below the line containing the (i-1)-th word. It will not be displayed anywhere else.
- The width of each line does not exceed W. Here, the width of a line refers to the distance from the left end of the leftmost word to the right end of the rightmost word.

When Takahashi displayed the sentence in the window, the sentence fit into M or fewer lines.
Find the minimum possible width of the window.

Input

The input is given from Standard Input in the following format:
N M
L _ 1 L _ 2 \ldots L _ N

Output

Print the answer in one line.

Constraints


- 1\leq M\leq N\leq2\times10 ^ 5
- 1\leq L _ i\leq10^9\ (1\leq i\leq N)
- All input values are integers.

Sample Input 1

13 3
9 5 2 7 1 8 8 2 1 5 2 3 6

Sample Output 1

26

When the width of the window is 26, you can fit the given sentence into three lines as follows.

You cannot fit the given sentence into three lines when the width of the window is 25 or less, so print 26.
Note that you should not display a word across multiple lines, let the width of a line exceed the width of the window, or rearrange the words.

Sample Input 2

10 1
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000

Sample Output 2

10000000009

Note that the answer may not fit into a 32\operatorname{bit} integer.

Sample Input 3

30 8
8 55 26 97 48 37 47 35 55 5 17 62 2 60 23 99 73 34 75 7 46 82 84 29 41 32 31 52 32 60

Sample Output 3

189

Qwen2 Analysis:
The given programming problem involves calculating the minimum possible width of a window needed to display a sentence with `N` words (`L_1` through `L_N`) in `M` or fewer lines. The constraints are as follows:

1. **Constraints**:
   - Number of words, `N`, ranges from 1 to \(2 \times 10^5\).
   - Minimum number of lines allowed, `M`, is between 1 and `2 \times 10^5`.
   - Width of each word (`L_i`) varies from 1 to \(10^9\).

This problem can be categorized under **Algorithm/Computation** due to the following requirements:

- **Efficiency**: The solution needs to handle large values for `N` and potentially perform calculations involving very large numbers (up to \(10^9\)), which necessitates careful handling of data types.
- **Complexity Management**: The solution should avoid exponential or quadratic time complexity approaches, aiming for more optimized algorithms that can efficiently process the input within reasonable time constraints.

### Required Programming Skills:

1. **Arithmetic Operations on Large Numbers**:
   - Efficiently performing arithmetic operations with large numbers (`long long`, `BigInteger`, etc.) due to the size limit of \(10^9\).

2. **Binary Search or Greedy Approach for Optimization**:
   - Depending on the problem formulation, a binary search might be used to find the minimum width efficiently or applying optimization techniques like greedy algorithms.

3. **Handling Large Inputs**: Efficiently reading and processing large inputs (up to \(10^5\) integers).

### Complexity:

- **Time Complexity**: The solution should aim for linear or close to linear time complexity (`O(N log W)` using binary search on the width).
- **Space Complexity**: Constant space is sufficient as no additional data structures of significant size are required.

### Algorithmic Approach Outline:
1. **Sorting**: Sort words based on their length.
2. **Binary Search** (if not directly greedy): Use a range to find the minimum width that fits all lines under `M` constraints by narrowing down the possible widths using binary search.
3. **Greedy Approach**: Directly calculate width without needing to adjust bounds iteratively, if optimization can be proven or implemented efficiently.

### Conclusion:
The problem falls into categories requiring expertise in handling large numbers, efficient algorithmic techniques (like binary search for optimization), and careful management of data types and operations with respect to constraints. It targets intermediate to advanced level programming skills focusing on optimizing performance under time complexity limitations.

---
