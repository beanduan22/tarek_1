Problem ID: abc304_e
Problem Content:
You are given an undirected graph G with N vertices and M edges.
For i = 1, 2, \ldots, M, the i-th edge is an undirected edge connecting vertices u_i and v_i.
A graph with N vertices is called good if the following condition holds for all i = 1, 2, \ldots, K:

- there is no path connecting vertices x_i and y_i in G.

The given graph G is good.
You are given Q independent questions. Answer all of them.
For i = 1, 2, \ldots, Q, the i-th question is as follows.

- Is the graph G^{(i)} obtained by adding an undirected edge connecting vertices p_i and q_i to the given graph G good?

Input

The input is given from Standard Input in the following format:
N M
u_1 v_1
u_2 v_2
\vdots
u_M v_M
K
x_1 y_1
x_2 y_2
\vdots
x_K y_K
Q
p_1 q_1
p_2 q_2
\vdots
p_Q q_Q

Output

Print Q lines.
For i = 1, 2, \ldots, Q, the i-th line should contain the answer to the i-th question: Yes if the graph G^{(i)} is good, and No otherwise.

Constraints


- 2 \leq N \leq 2 \times 10^5
- 0 \leq M \leq 2 \times10^5
- 1 \leq u_i, v_i \leq N
- 1 \leq K \leq 2 \times 10^5
- 1 \leq x_i, y_i \leq N
- x_i \neq y_i
- i \neq j \implies \lbrace x_i, y_i \rbrace \neq \lbrace x_j, y_j \rbrace
- For all i = 1, 2, \ldots, K, there is no path connecting vertices x_i and y_i.
- 1 \leq Q \leq 2 \times 10^5
- 1 \leq p_i, q_i \leq N
- p_i \neq q_i
- All input values are integers.

Sample Input 1

6 6
1 2
2 3
2 3
3 1
5 4
5 5
3
1 5
2 6
4 3
4
2 5
2 6
5 6
5 4

Sample Output 1

No
No
Yes
Yes


- For the first question, the graph G^{(1)} is not good because it has a path 1 \rightarrow 2 \rightarrow 5 connecting vertices x_1 = 1 and y_1 = 5. Therefore, print No.
- For the second question, the graph G^{(2)} is not good because it has a path 2 \rightarrow 6 connecting vertices x_2 = 2 and y_2 = 6. Therefore, print No.
- For the third question, the graph G^{(3)} is good. Therefore, print Yes.
- For the fourth question, the graph G^{(4)} is good. Therefore, print Yes.

As seen in this sample input, note that the given graph G may have self-loops or multi-edges.

Qwen2 Analysis:
The given problem can be categorized as an Advanced Graph Theory Problem with a focus on Union-Find (Disjoint Set) data structure. Here are some reasons why:

**Difficulty Level:**
The problem involves analyzing properties of undirected graphs after certain edge modifications while ensuring no path exists between specific vertex pairs. This requires understanding of graph theory concepts and the ability to efficiently manage connectivity in dynamic graph scenarios, which makes it a relatively advanced problem.

**Required Programming Skills:**
To solve this problem, one needs proficiency in the following areas:
1. **Understanding and Implementing Union-Find (Disjoint Set) Data Structure:** To determine if there exists any path between vertices after adding an edge or to check connectivity among certain vertex pairs.
2. **Graph Representation:** Typically, adjacency list or matrix representations are used for graph problems, but in this case, the dynamic nature of adding edges suggests that some form of efficient updating might be necessary.
3. **Efficient Input Processing:** Given constraints involving large numbers (up to 2x10^5), efficient reading and processing of input is crucial.

**Complexity:**
The complexity lies in ensuring efficient handling of edge modifications while maintaining the property that there's no path between specific vertex pairs after each modification. The use of Union-Find structures allows for quick updates and queries on connectivity, which makes it suitable for problems with multiple modifications to the graph structure.

**Additional Considerations:**
- **Handling Constraints:** The problem deals with constraints that involve operations within a large integer range (up to 2x10^5), necessitating careful implementation of algorithms to avoid time limit exceedance.
- **Output Analysis:** For each query, determining whether adding an edge will maintain the property requires analyzing connectivity between specific vertices, which can be complex when considering all previous edge modifications.

In summary, this problem combines several key aspects that are characteristic of advanced programming challenges: graph theory concepts with efficient data structure implementation and optimization for performance in a large-scale scenario. It's designed to test not only fundamental knowledge but also the ability to apply these principles efficiently under constraints.
