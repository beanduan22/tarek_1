Problem ID: abc352_d
Problem Content:
You are given a permutation P = (P_1, P_2, \dots, P_N) of (1, 2, \dots, N).
A length-K sequence of indices (i_1, i_2, \dots, i_K) is called a good index sequence if it satisfies both of the following conditions:

- 1 \leq i_1 < i_2 < \dots < i_K \leq N.
- The subsequence (P_{i_1}, P_{i_2}, \dots, P_{i_K}) can be obtained by rearranging some consecutive K integers.
Formally, there exists an integer a such that \lbrace P_{i_1},P_{i_2},\dots,P_{i_K} \rbrace = \lbrace a,a+1,\dots,a+K-1 \rbrace.

Find the minimum value of i_K - i_1 among all good index sequences. It can be shown that at least one good index sequence exists under the constraints of this problem.

Input

The input is given from Standard Input in the following format:
N K
P_1 P_2 \dots P_N

Output

Print the minimum value of i_K - i_1 among all good index sequences.

Constraints


- 1 \leq K \leq N \leq 2 \times 10^5
- 1 \leq P_i \leq N
- P_i \neq P_j if i \neq j.
- All input values are integers.

Sample Input 1

4 2
2 3 1 4

Sample Output 1

1

The good index sequences are (1,2),(1,3),(2,4). For example, (i_1, i_2) = (1,3) is a good index sequence because 1 \leq i_1 < i_2 \leq N and (P_{i_1}, P_{i_2}) = (2,1) is a rearrangement of two consecutive integers 1, 2.
Among these good index sequences, the smallest value of i_K - i_1 is for (1,2), which is 2-1=1.

Sample Input 2

4 1
2 3 1 4

Sample Output 2

0

i_K - i_1 = i_1 - i_1 = 0 in all good index sequences.

Sample Input 3

10 5
10 1 6 8 7 2 5 9 3 4

Sample Output 3

5

Qwen2 Analysis:
The problem described above falls under the category of "Algorithms" with a specific focus on "Dynamic Programming" or "Sliding Window" techniques. Based on the constraints provided (1 ≤ K ≤ N ≤ 2 * 10^5) and the level of difficulty indicated by the sample inputs, this question requires understanding of algorithmic concepts that involve efficiently managing sequences and their properties.

**Difficulty Level**: Medium-High

**Required Programming Skills**:
- **Dynamic Programming/Sliding Window**: The key to solving such problems is often in manipulating subsets or subsequences based on specific criteria (in this case, rearranged consecutive integers).
- **Array Manipulation**: Efficient manipulation of array data structures and operations like sorting or indexing sequences.
- **Understanding of Constraints**: Knowing how to handle large inputs efficiently.

**Complexity**:
The problem likely requires an algorithm with a time complexity better than O(N^2) as brute-force solutions would exceed reasonable time limits for larger input sizes. Techniques such as binary search, prefix sums, or dynamic programming might be necessary to optimize the solution.

**Approach Prediction**:
Given the constraints and output requirements, it's probable that an approach involving tracking subsequences of length K efficiently will be required. This could involve maintaining a data structure (like an array with precomputed ranges) that allows for fast querying of consecutive integers within any subsequence or calculating the minimum gap between valid index sequences.

**Solving Strategy**:
1. **Initialization**: Set up necessary data structures such as arrays to keep track of starting points, ends, and potential subsequences.
2. **Sliding Window/Dynamic Programming Logic**: Use a sliding window technique to consider all possible subsequences of length K, updating the minimum gap found each time.
3. **Optimization**: Consider optimizations like using binary search for faster lookups or maintaining a sorted list of indices that might be useful in determining if a subsequence can form the required pattern.

By understanding these aspects, one would typically employ algorithmic techniques familiar from competitive programming to devise an efficient solution for this problem. The solution should ideally aim for linear complexity with respect to input size N when K is small relative to N or when optimizations like binary search are applied effectively to handle larger values of K.
