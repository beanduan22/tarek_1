Problem ID: abc346_b
Problem Content:
There is an infinitely long piano keyboard.
Is there a continuous segment within this keyboard that consists of W white keys and B black keys?

Let S be the string formed by infinitely repeating the string wbwbwwbwbwbw.
Is there a substring of S that consists of W occurrences of w and B occurrences of b?

What is a substring of S?
A substring of S is a string that can be formed by concatenating the l-th, (l+1)-th, \dots, r-th characters of S in this order for some two positive integers l and r (l\leq r).

Input

The input is given from Standard Input in the following format:
W B

Output

If there is a substring of S that consists of W occurrences of w and B occurrences of b, print Yes; otherwise, print No.

Constraints


- W and B are integers.
- 0\leq W,B \leq 100
- W+B \geq 1

Sample Input 1

3 2

Sample Output 1

Yes

The first 15 characters of S are wbwbwwbwbwbwwbw. You can take the 11-th through 15-th characters to form the string bwwbw, which is a substring consisting of three occurrences of w and two occurrences of b.

Sample Input 2

3 0

Sample Output 2

No

The only string consisting of three occurrences of w and zero occurrences of b is www, which is not a substring of S.

Sample Input 3

92 66

Sample Output 3

Yes

Qwen2 Analysis:
This problem falls under the category of "Strings" and "Pattern Recognition", requiring basic understanding of string handling operations in a typical programming language. It involves pattern matching within an infinite repetition of strings, which can be categorized as medium-hard difficulty.

**Required Programming Skills:**
1. **String Manipulation**: The ability to handle string creation, concatenation, slicing, and searching is essential.
2. **Pattern Recognition**: Understanding the patterns formed in repeating sequences can help optimize algorithms for finding matching substrings without needing to generate large amounts of data upfront.

**Problem Complexity:**
- **Input Size**: The problem accepts inputs up to specific limits (W,B â‰¤ 100), suggesting that it deals with manageable input sizes. The computational complexity needs to be linear or less than linear with respect to the input size, considering we need to analyze patterns within a string of a certain length.
- **Algorithmic Approach**: Implementing an efficient way to search for substrings can vary from simple brute force (which would exceed time limits) to more optimized techniques like sliding window algorithms that only process parts of the string at a time.

**Solutions:**
The provided problem statement suggests using Python or another language capable of handling string operations efficiently. The key is in recognizing patterns within the infinite repetition sequence `S` and implementing an algorithm to check for matching substrings without needing to generate every possible substring explicitly, which would be impractical given constraints.

For instance:
1. **Sliding Window Approach**: This involves creating a window that starts at the beginning of S and grows until it finds a match or reaches the end of a pattern cycle (the length of `S`). By incrementally moving this window through each possible position in `S`, we can check substrings efficiently.

2. **Character Counting**: Given the structure of `S` (`wbwbwwbwbwbw`), one could also implement an algorithm that counts occurrences of 'w' and 'b'. If at any point, the count matches W and B simultaneously within a segment of S, then there's a matching substring.

**Optimization Techniques:**
- **Avoiding Repeated Calculations**: Store intermediate results or use mathematical insights to avoid unnecessary computations when comparing patterns.
- **Pattern Recognition Optimization**: Use knowledge about how `S` repeats (`wbwbwwbwbwbw`) to optimize the search for substrings, potentially allowing skipping over parts of S that are known not to contribute to a match.

In summary, this problem requires understanding string repetition, efficient pattern searching, and optimization techniques beyond brute force algorithms. It's designed to test skills in these areas while keeping constraints manageable enough to ensure a reasonable computational complexity.
