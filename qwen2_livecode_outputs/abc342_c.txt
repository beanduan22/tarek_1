Problem ID: abc342_c
Problem Content:
You are given a string S of length N consisting of lowercase English letters.
You will perform an operation Q times on the string S.
The i-th operation (1\leq i\leq Q) is represented by a pair of characters (c _ i,d _ i), which corresponds to the following operation:

- Replace all occurrences of the character c _ i in S with the character d _ i.

Print the string S after all operations are completed.

Input

The input is given from Standard Input in the following format:
N
S
Q
c _ 1 d _ 1
c _ 2 d _ 2
\vdots
c _ Q d _ Q

Output

Print the string S after all operations are completed.

Constraints


- 1\leq N\leq2\times10^5
- S is a string of length N consisting of lowercase English letters.
- 1\leq Q\leq2\times10^5
- c _ i and d _ i are lowercase English letters (1\leq i\leq Q).
- N and Q are integers.

Sample Input 1

7
atcoder
4
r a
t e
d v
a r

Sample Output 1

recover

S changes as follows: atcoder → atcodea → aecodea → aecovea → recover.
For example, in the fourth operation, all occurrences of a in S={}aecovea (the first and seventh characters) are replaced with r, resulting in S={}recover.
After all operations are completed, S={}recover, so print recover.

Sample Input 2

3
abc
4
a a
s k
n n
z b

Sample Output 2

abc

There may be operations where c _ i=d _ i or S does not contain c _ i.

Sample Input 3

34
supercalifragilisticexpialidocious
20
g c
l g
g m
c m
r o
s e
a a
o f
f s
e t
t l
d v
p k
v h
x i
h n
n j
i r
s i
u a

Sample Output 3

laklimamriiamrmrllrmlrkramrjimrial

Qwen2 Analysis:
The problem presented here is classified as an **Intermediate** level coding challenge. This categorization primarily hinges upon several factors:

1. **Complexity of Algorithm**: The operation involves string manipulation which includes replacing characters in a sequence defined by another sequence. While the core concept isn't very complex, managing multiple replacements efficiently can be tricky due to potential overlapping operations.

2. **Required Skills**:
   - **String Manipulation**: This problem heavily relies on string handling techniques such as indexing and replacement.
   - **Data Structures**: Depending on implementation details like whether you're using a list or another data structure to manage the changes, knowledge of appropriate data structures might be required for efficiency.

3. **Time Complexity**: The problem suggests a potential O(N+Q) time complexity if managed efficiently (N being the length of the string and Q being the number of operations). This is because each operation potentially needs to traverse the entire string once in worst-case scenarios, though optimization techniques can make this more efficient.

4. **Space Complexity**: Efficient solutions might require additional space for storing temporary strings or data structures used during replacements.

5. **Implementation Details**:
   - **Handling Overlapping Operations**: Managing multiple replacement operations on the same character requires careful logic to prevent unintended results.
   - **Efficient Replacement Mechanism**: Depending on implementation, you might use methods like iterating over characters of the string and applying replacements as needed.

In conclusion, this problem is a good exercise for developing skills in handling strings and practicing efficient programming techniques. It challenges logical thinking around sequence manipulation while also testing understanding of fundamental data structures in practice.
