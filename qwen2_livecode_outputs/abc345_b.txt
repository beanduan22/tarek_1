Problem ID: abc345_b
Problem Content:
Given an integer X between -10^{18} and 10^{18}, inclusive, print \left\lceil \dfrac{X}{10} \right\rceil.
Here, \left\lceil a \right\rceil denotes the smallest integer not less than a.

Input

The input is given from Standard Input in the following format:
X

Output

Print \left\lceil \dfrac{X}{10} \right\rceil as an integer.

Constraints


- -10^{18} \leq X \leq 10^{18}
- X is an integer.

Sample Input 1

27

Sample Output 1

3

The integers not less than \frac{27}{10} = 2.7 are 3, 4, 5, \dots. Among these, the smallest is 3, so \left \lceil \frac{27}{10} \right \rceil = 3.

Sample Input 2

-13

Sample Output 2

-1

The integers not less than \frac{-13}{10} = -1.3 are all positive integers, 0, and -1. Among these, the smallest is -1, so \left \lceil \frac{-13}{10} \right \rceil = -1.

Sample Input 3

40

Sample Output 3

4

The smallest integer not less than \frac{40}{10} = 4 is 4 itself.

Sample Input 4

-20

Sample Output 4

-2

Sample Input 5

123456789123456789

Sample Output 5

12345678912345679

Qwen2 Analysis:
Based on the description of the problem, it appears to be a straightforward mathematical operation that requires basic programming knowledge. The main task involves performing division, applying ceiling function (which rounds up to the nearest integer), and handling large numbers within given constraints.

### Difficulty Level:
- **Easy**: Given the nature of the operation involved—division by 10 followed by taking the ceiling—the problem does not require any advanced algorithms or complex logic. It tests basic programming skills.
  
### Required Programming Skills:
- **Basic Arithmetic Operations**: The use of division and the ceiling function implies knowledge in performing arithmetic operations within a programming language. Understanding how to handle integer division is crucial here, as standard division might result in floating point numbers.

- **Handling Large Numbers**: Since X can range from -10^18 to 10^18, you need to ensure that your program can handle these large integers without overflow or losing precision issues common with basic numeric types like `int` or `float`.

### Complexity:
- **Time Complexity**: The time complexity is O(1) because the operation performed (division and ceiling function application) does not depend on any variable input size—it only involves a single arithmetic operation.

- **Space Complexity**: Similarly, space complexity would also be O(1), as no additional memory scales with the input size.

### Algorithm:
1. **Input Reading**: Read the integer `X` from the standard input.
2. **Division and Ceiling**: Perform the division of `X` by 10 (considering integer division if necessary). Then, apply the ceiling function to round up to the nearest integer.
3. **Output**: Print the result.

This problem can be solved using any programming language capable of handling large integers. For instance:
- In Python, you might use `int` for handling large numbers inherently and then perform operations directly.
- In C++, Java, or similar languages, you need to ensure that arithmetic operations do not cause overflow and consider the data types available for large numbers.

### Category Prediction:
Given its simplicity in concept and implementation, this problem falls under the category of **Easy** programming challenges. It serves as a good introduction to handling basic mathematical functions through programming and understanding integer operations with large inputs.
