Based on the given problem description, we can categorize this as an "easy" level problem in terms of difficulty. The required programming skills primarily involve understanding basic arithmetic operations such as addition, multiplication, and list manipulation. Moreover, the concept being applied here is fundamental to mathematics - finding the derivative of a polynomial function.

The complexity of the problem mainly comes from correctly interpreting the input representation (polynomial coefficients) and implementing the algorithm that computes the coefficients of its derivative based on those rules in mathematics. This requires careful attention to detail but doesn't involve advanced data structures or complex algorithms.

To solve this problem, we need to understand the rules for finding the derivative of a polynomial:

- The derivative of x^n is n * x^(n-1).
- If you have coefficients xs = [a0, a1, ..., an], then you can compute their derivatives as follows: der_coeffs = [a1, 2 * a2, ..., n * an].

Let's write this code in Python:

```python
def derivative(xs):
    result = []
    for i, coeff in enumerate(xs):
        if coeff != 0:
            # Calculate the degree of the current coefficient and its derivative,
            # append it to 'result', with the correct sign depending on the degree being odd or even.
            result.append(coeff * i)
    return result
```

Now let's test this function:

```python
print(derivative([3, 1, 2, 4, 5])) 
# Expected output: [1, 4, 12, 20]
print(derivative([1, 2, 3]))
# Expected output: [2, 6]
```

Running this code should confirm our predictions about the difficulty and complexity of the problem.