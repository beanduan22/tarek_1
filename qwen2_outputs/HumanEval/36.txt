The provided problem can be categorized as:

1. Difficulty: Medium

This is because it requires understanding of loops, conditionals, string manipulation (via concatenation), and basic arithmetic operations related to numbers less than `n`. While the logic might not be overly complex for an experienced programmer, newcomers to programming may find certain aspects challenging.

2. Required Programming Skills:

- Control structures: The use of for-loops is needed to iterate through numbers in the range up to `n`.
- Conditional statements: These are used to check if a number is divisible by 11 or 13 and if it contains the digit '7'.
- Arithmetic operations: Modulus operator (%) can be utilized to determine divisibility.
- String manipulation: Concatenating strings (to convert integers into their corresponding string representation) and using string methods for checking if '7' exists in a number's string form.

3. Complexity:

The time complexity of this function is primarily determined by the loop that goes through numbers less than `n`. This makes it `O(n)` as worst-case scenario, assuming the entire range needs to be checked.

The space complexity could be considered as `O(1)`, because the amount of additional memory required doesn't grow with the input size (apart from a few integer variables for counters).

In summary, this problem tests skills related to iterating through ranges and performing checks based on certain conditions. It also requires knowledge of basic string manipulation methods that can convert numbers into strings for further examination.

To solve this problem:

1. Loop through integers from `1` up to `n-1`.
2. Check if the current number is divisible by either 11 or 13 (using modulus operation `%`).
3. Convert the current number to a string representation and check if it contains '7'.
4. If both conditions are met, increment a counter.
5. Return the final count after iterating through all eligible numbers.

For example:

```python
def fizz_buzz(n: int):
    count = 0

    for i in range(1, n): 
        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):
            count += 1
            
    return count
```

This solution demonstrates understanding of the problem requirements without using specific Python built-in functions related to counting digit appearances, adhering to the essence of the question.